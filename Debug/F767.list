
F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08004bb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004bb0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d221  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242b  00000000  00000000  0002d2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f6d  00000000  00000000  00030978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db95  00000000  00000000  000588e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f201f  00000000  00000000  0006647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  001584ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08004994 	.word	0x08004994

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08004994 	.word	0x08004994

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <commands>:
#include "commands.h"
#include <string.h>
#include <stdlib.h>

command_t commands(uint8_t* command, buffer_t* measbuff)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09e      	sub	sp, #120	; 0x78
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	command_t comm = {"", 0};
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2260      	movs	r2, #96	; 0x60
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f004 f935 	bl	80047e8 <memset>
 800057e:	2300      	movs	r3, #0
 8000580:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	if(strcmp(command, "D1") == 0)
 8000584:	4943      	ldr	r1, [pc, #268]	; (8000694 <commands+0x134>)
 8000586:	68b8      	ldr	r0, [r7, #8]
 8000588:	f7ff fe56 	bl	8000238 <strcmp>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d114      	bne.n	80005bc <commands+0x5c>
	{
		itoa(getOldestElement(measbuff),  comm.TX_payload, COMM_LEN);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 fb89 	bl	8000caa <getOldestElement>
 8000598:	4603      	mov	r3, r0
 800059a:	4618      	mov	r0, r3
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	220a      	movs	r2, #10
 80005a2:	4619      	mov	r1, r3
 80005a4:	f004 f910 	bl	80047c8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe4d 	bl	800024c <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005ba:	e05f      	b.n	800067c <commands+0x11c>
	}
	else if(strcmp(command, "D2") == 0)
 80005bc:	4936      	ldr	r1, [pc, #216]	; (8000698 <commands+0x138>)
 80005be:	68b8      	ldr	r0, [r7, #8]
 80005c0:	f7ff fe3a 	bl	8000238 <strcmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d114      	bne.n	80005f4 <commands+0x94>
	{
		itoa(getLastElement(measbuff), comm.TX_payload, COMM_LEN);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 fb54 	bl	8000c78 <getLastElement>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	220a      	movs	r2, #10
 80005da:	4619      	mov	r1, r3
 80005dc:	f004 f8f4 	bl	80047c8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe31 	bl	800024c <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005f2:	e043      	b.n	800067c <commands+0x11c>
	}
	else if(command[0] == 'I')
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b49      	cmp	r3, #73	; 0x49
 80005fa:	d11c      	bne.n	8000636 <commands+0xd6>
	{
		itoa(getElementByIdx(measbuff, atoi(command+1)), comm.TX_payload, COMM_LEN);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	3301      	adds	r3, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f89a 	bl	800473a <atoi>
 8000606:	4603      	mov	r3, r0
 8000608:	b29b      	uxth	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 fb65 	bl	8000cdc <getElementByIdx>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	220a      	movs	r2, #10
 800061c:	4619      	mov	r1, r3
 800061e:	f004 f8d3 	bl	80047c8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fe10 	bl	800024c <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29b      	uxth	r3, r3
 8000630:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000634:	e022      	b.n	800067c <commands+0x11c>
	}
	else if(strcmp(command, "CLR") == 0)
 8000636:	4919      	ldr	r1, [pc, #100]	; (800069c <commands+0x13c>)
 8000638:	68b8      	ldr	r0, [r7, #8]
 800063a:	f7ff fdfd 	bl	8000238 <strcmp>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10f      	bne.n	8000664 <commands+0x104>
	{
		bufferClear(measbuff);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fc24 	bl	8000e92 <bufferClear>
		comm.len = (uint16_t)strlen("cleared");
 800064a:	2307      	movs	r3, #7
 800064c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "cleared", comm.len);
 8000650:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000654:	461a      	mov	r2, r3
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4911      	ldr	r1, [pc, #68]	; (80006a0 <commands+0x140>)
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f8b5 	bl	80047cc <memcpy>
 8000662:	e00b      	b.n	800067c <commands+0x11c>
	}
	else
	{
		comm.len = (uint16_t)strlen("unknown");
 8000664:	2307      	movs	r3, #7
 8000666:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "unknown", comm.len);
 800066a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800066e:	461a      	mov	r2, r3
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	490b      	ldr	r1, [pc, #44]	; (80006a4 <commands+0x144>)
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f8a8 	bl	80047cc <memcpy>
	}

	return comm;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4618      	mov	r0, r3
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2266      	movs	r2, #102	; 0x66
 8000686:	4619      	mov	r1, r3
 8000688:	f004 f8a0 	bl	80047cc <memcpy>
}
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	3778      	adds	r7, #120	; 0x78
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	080049ac 	.word	0x080049ac
 8000698:	080049b0 	.word	0x080049b0
 800069c:	080049b4 	.word	0x080049b4
 80006a0:	080049b8 	.word	0x080049b8
 80006a4:	080049c0 	.word	0x080049c0

080006a8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b77      	ldr	r3, [pc, #476]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a76      	ldr	r2, [pc, #472]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b74      	ldr	r3, [pc, #464]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b71      	ldr	r3, [pc, #452]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a70      	ldr	r2, [pc, #448]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b6e      	ldr	r3, [pc, #440]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b6b      	ldr	r3, [pc, #428]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a6a      	ldr	r2, [pc, #424]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b68      	ldr	r3, [pc, #416]	; (800089c <MX_GPIO_Init+0x1f4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b65      	ldr	r3, [pc, #404]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a64      	ldr	r2, [pc, #400]	; (800089c <MX_GPIO_Init+0x1f4>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b62      	ldr	r3, [pc, #392]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a5e      	ldr	r2, [pc, #376]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b5c      	ldr	r3, [pc, #368]	; (800089c <MX_GPIO_Init+0x1f4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	4b59      	ldr	r3, [pc, #356]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a58      	ldr	r2, [pc, #352]	; (800089c <MX_GPIO_Init+0x1f4>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <MX_GPIO_Init+0x1f4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f244 0181 	movw	r1, #16513	; 0x4081
 8000754:	4852      	ldr	r0, [pc, #328]	; (80008a0 <MX_GPIO_Init+0x1f8>)
 8000756:	f001 fad3 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	4851      	ldr	r0, [pc, #324]	; (80008a4 <MX_GPIO_Init+0x1fc>)
 8000760:	f001 face 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	484b      	ldr	r0, [pc, #300]	; (80008a8 <MX_GPIO_Init+0x200>)
 800077c:	f001 f914 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000780:	2332      	movs	r3, #50	; 0x32
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000790:	230b      	movs	r3, #11
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4843      	ldr	r0, [pc, #268]	; (80008a8 <MX_GPIO_Init+0x200>)
 800079c:	f001 f904 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007a0:	2386      	movs	r3, #134	; 0x86
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	483c      	ldr	r0, [pc, #240]	; (80008ac <MX_GPIO_Init+0x204>)
 80007bc:	f001 f8f4 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4831      	ldr	r0, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x1f8>)
 80007da:	f001 f8e5 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4829      	ldr	r0, [pc, #164]	; (80008a0 <MX_GPIO_Init+0x1f8>)
 80007fc:	f001 f8d4 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_GPIO_Init+0x1fc>)
 8000818:	f001 f8c6 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	481d      	ldr	r0, [pc, #116]	; (80008a4 <MX_GPIO_Init+0x1fc>)
 8000830:	f001 f8ba 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000834:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000846:	230a      	movs	r3, #10
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <MX_GPIO_Init+0x204>)
 8000852:	f001 f8a9 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0x204>)
 800086c:	f001 f89c 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000870:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000882:	230b      	movs	r3, #11
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0x1fc>)
 800088e:	f001 f88b 	bl	80019a8 <HAL_GPIO_Init>

}
 8000892:	bf00      	nop
 8000894:	3730      	adds	r7, #48	; 0x30
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b0f0      	sub	sp, #448	; 0x1c0
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fcb8 	bl	800122a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f8bd 	bl	8000a38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f7ff fef3 	bl	80006a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008c2:	f000 fb85 	bl	8000fd0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  bufferInit(&measbuff); //fill measurement buffer with dummy data
 80008c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fab6 	bl	8000e3c <bufferInit>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80008d6:	e01c      	b.n	8000912 <main+0x62>
  {
	  bufferAddElement(&measbuff, (i+1234)*(i%1548));
 80008d8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008dc:	f203 41d2 	addw	r1, r3, #1234	; 0x4d2
 80008e0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80008e4:	0893      	lsrs	r3, r2, #2
 80008e6:	484d      	ldr	r0, [pc, #308]	; (8000a1c <main+0x16c>)
 80008e8:	fba0 0303 	umull	r0, r3, r0, r3
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	f240 600c 	movw	r0, #1548	; 0x60c
 80008f2:	fb00 f303 	mul.w	r3, r0, r3
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	fb03 f201 	mul.w	r2, r3, r1
 80008fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa32 	bl	8000d6c <bufferAddElement>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 8000908:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800090c:	3301      	adds	r3, #1
 800090e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000912:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000916:	2b45      	cmp	r3, #69	; 0x45
 8000918:	d9de      	bls.n	80008d8 <main+0x28>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t addr = 0x08010010;
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <main+0x170>)
 800091c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

  if(HAL_OK == HAL_FLASH_Unlock())
 8000920:	f000 fee0 	bl	80016e4 <HAL_FLASH_Unlock>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d12a      	bne.n	8000980 <main+0xd0>
  {
	 //HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ptr, 0x00000000);
	  int i = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  char* n = "Hello flash memory!!!";
 8000930:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <main+0x174>)
 8000932:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  for(;i < strlen(n); ++i)
 8000936:	e018      	b.n	800096a <main+0xba>
	  {
		  //FLASH_Erase_Sector(FLASH_SECTOR_20, FLASH_VOLTAGE_RANGE_3);
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, n[i]);
 8000938:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800093c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000940:	18d1      	adds	r1, r2, r3
 8000942:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000946:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2200      	movs	r2, #0
 8000952:	461c      	mov	r4, r3
 8000954:	4615      	mov	r5, r2
 8000956:	4622      	mov	r2, r4
 8000958:	462b      	mov	r3, r5
 800095a:	2000      	movs	r0, #0
 800095c:	f000 fe66 	bl	800162c <HAL_FLASH_Program>
	  for(;i < strlen(n); ++i)
 8000960:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000964:	3301      	adds	r3, #1
 8000966:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800096a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 800096e:	f7ff fc6d 	bl	800024c <strlen>
 8000972:	4602      	mov	r2, r0
 8000974:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000978:	429a      	cmp	r2, r3
 800097a:	d8dd      	bhi.n	8000938 <main+0x88>
	  }

	  HAL_FLASH_Lock();
 800097c:	f000 fed4 	bl	8001728 <HAL_FLASH_Lock>
  }

  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RX.c, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	4929      	ldr	r1, [pc, #164]	; (8000a28 <main+0x178>)
 8000984:	4829      	ldr	r0, [pc, #164]	; (8000a2c <main+0x17c>)
 8000986:	f002 fbdd 	bl	8003144 <HAL_UART_Receive_IT>


  while(1)
  {
	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <main+0x180>)
 800098c:	7d1b      	ldrb	r3, [r3, #20]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d1fa      	bne.n	800098a <main+0xda>
	{
		myFrame = prarseRxBuffer();
 8000994:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000998:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 800099c:	463b      	mov	r3, r7
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f8dc 	bl	8000b5c <prarseRxBuffer>
 80009a4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80009a8:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80009ac:	4623      	mov	r3, r4
 80009ae:	4614      	mov	r4, r2
 80009b0:	6820      	ldr	r0, [r4, #0]
 80009b2:	6861      	ldr	r1, [r4, #4]
 80009b4:	68a2      	ldr	r2, [r4, #8]
 80009b6:	c307      	stmia	r3!, {r0, r1, r2}
 80009b8:	89a2      	ldrh	r2, [r4, #12]
 80009ba:	7ba1      	ldrb	r1, [r4, #14]
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	460a      	mov	r2, r1
 80009c0:	709a      	strb	r2, [r3, #2]
		if(myFrame.frameOK)
 80009c2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80009c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d01e      	beq.n	8000a0e <main+0x15e>
		{
			command_t co = commands(myFrame.command, &measbuff);
 80009d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80009d4:	f5a3 70d6 	sub.w	r0, r3, #428	; 0x1ac
 80009d8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80009dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009e0:	3304      	adds	r3, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	f7ff fdbc 	bl	8000560 <commands>
			HAL_UART_Transmit_IT(&huart3, co.TX_payload, co.len);
 80009e8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80009ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80009f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <main+0x17c>)
 80009fc:	f002 fb44 	bl	8003088 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart3, '/n', 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f642 716e 	movw	r1, #12142	; 0x2f6e
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <main+0x17c>)
 8000a08:	f002 fb3e 	bl	8003088 <HAL_UART_Transmit_IT>
 8000a0c:	e7bd      	b.n	800098a <main+0xda>
		}
		else
		{
			HAL_UART_Transmit_IT(&huart3, (const uint8_t*)"frame Error\n", strlen("frame Error\n"));
 8000a0e:	220c      	movs	r2, #12
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <main+0x184>)
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <main+0x17c>)
 8000a14:	f002 fb38 	bl	8003088 <HAL_UART_Transmit_IT>
	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 8000a18:	e7b7      	b.n	800098a <main+0xda>
 8000a1a:	bf00      	nop
 8000a1c:	54abfd5b 	.word	0x54abfd5b
 8000a20:	08010010 	.word	0x08010010
 8000a24:	080049c8 	.word	0x080049c8
 8000a28:	200000a1 	.word	0x200000a1
 8000a2c:	200000a4 	.word	0x200000a4
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	080049e0 	.word	0x080049e0

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fece 	bl	80047e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a5c:	f001 f96a 	bl	8001d34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <SystemClock_Config+0xdc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <SystemClock_Config+0xdc>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <SystemClock_Config+0xdc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <SystemClock_Config+0xe0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <SystemClock_Config+0xe0>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aac:	2360      	movs	r3, #96	; 0x60
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f997 	bl	8001df4 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000acc:	f000 f826 	bl	8000b1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad0:	f001 f940 	bl	8001d54 <HAL_PWREx_EnableOverDrive>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ada:	f000 f81f 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2103      	movs	r1, #3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fc28 	bl	8002350 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b06:	f000 f809 	bl	8000b1c <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <RXbufferClear>:
#include "stdlib.h"

RX_buffer_t RX;

void RXbufferClear(uint8_t* buff, int size) //memset
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	while (size)
 8000b34:	e008      	b.n	8000b48 <RXbufferClear+0x1e>
	{
		*buff = '\0';
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
		size--;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	603b      	str	r3, [r7, #0]
		buff++;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
	while (size)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f3      	bne.n	8000b36 <RXbufferClear+0xc>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <prarseRxBuffer>:
//wystepowania znaków $ oraz #, tzn ramka posiada prawidłowy format: $_________#
//              "$       5            7             05                    12345         255             #
//               ^       ^            ^             ^                     ^             ^               ^
//      znak poczatku,  adres zroda,  adres celu,  ilość danych w ramce,  dane ramki, suma konrolna   znak konca ramki
framecontent prarseRxBuffer()
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b08d      	sub	sp, #52	; 0x34
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	framecontent RxFrame;
	uint8_t l_checksum = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t tempstring[COMMAND_LEN] = "";
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	809a      	strh	r2, [r3, #4]
	RxFrame.frameOK = false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	763b      	strb	r3, [r7, #24]
	if(*RX.RX_Buffer == '$')
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <prarseRxBuffer+0x114>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b24      	cmp	r3, #36	; 0x24
 8000b84:	d161      	bne.n	8000c4a <prarseRxBuffer+0xee>
	{
		RxFrame.src_address = RX.RX_Buffer[1] - 48;
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <prarseRxBuffer+0x114>)
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	3b30      	subs	r3, #48	; 0x30
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	767b      	strb	r3, [r7, #25]
		RxFrame.dst_address = RX.RX_Buffer[2] - 48;
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <prarseRxBuffer+0x114>)
 8000b94:	789b      	ldrb	r3, [r3, #2]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3b30      	subs	r3, #48	; 0x30
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	76bb      	strb	r3, [r7, #26]
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <prarseRxBuffer+0x114>)
 8000ba0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000ba4:	b29b      	uxth	r3, r3
		memcpy(tempstring, (const char*)&RX.RX_Buffer[3], 2);
 8000ba6:	81bb      	strh	r3, [r7, #12]
		RxFrame.data_count = atoi((const char*)tempstring);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fdc4 	bl	800473a <atoi>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	76fb      	strb	r3, [r7, #27]
		if(RxFrame.data_count <= 10)
 8000bb8:	7efb      	ldrb	r3, [r7, #27]
 8000bba:	2b0a      	cmp	r3, #10
 8000bbc:	d845      	bhi.n	8000c4a <prarseRxBuffer+0xee>
		{
			RXbufferClear(tempstring, COMMAND_LEN);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	210a      	movs	r1, #10
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffb0 	bl	8000b2a <RXbufferClear>
			RXbufferClear(RxFrame.command, COMMAND_LEN);
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	3304      	adds	r3, #4
 8000bd0:	210a      	movs	r1, #10
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffa9 	bl	8000b2a <RXbufferClear>
			memcpy(RxFrame.command, (const char*)&RX.RX_Buffer[5], RxFrame.data_count);
 8000bd8:	7efb      	ldrb	r3, [r7, #27]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	3304      	adds	r3, #4
 8000be2:	4924      	ldr	r1, [pc, #144]	; (8000c74 <prarseRxBuffer+0x118>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fdf1 	bl	80047cc <memcpy>
			memcpy(tempstring, (const char*)&RX.RX_Buffer[5] + RxFrame.data_count, 3);
 8000bea:	7efb      	ldrb	r3, [r7, #27]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <prarseRxBuffer+0x118>)
 8000bf0:	18d1      	adds	r1, r2, r3
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fde7 	bl	80047cc <memcpy>
			RxFrame.checksum = atoi((const char*)tempstring);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fd99 	bl	800473a <atoi>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c14:	e00c      	b.n	8000c30 <prarseRxBuffer+0xd4>
			{
				l_checksum += RX.RX_Buffer[5 + offset];
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	3305      	adds	r3, #5
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <prarseRxBuffer+0x114>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c24:	4413      	add	r3, r2
 8000c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c30:	7efb      	ldrb	r3, [r7, #27]
 8000c32:	461a      	mov	r2, r3
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dbed      	blt.n	8000c16 <prarseRxBuffer+0xba>
			}
			if (l_checksum == RxFrame.checksum)
 8000c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d101      	bne.n	8000c4a <prarseRxBuffer+0xee>
			{
				RxFrame.frameOK = true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	763b      	strb	r3, [r7, #24]
			}
		}
	}
	RX.RX_Frame_Cplt = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <prarseRxBuffer+0x114>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	751a      	strb	r2, [r3, #20]
	return RxFrame;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	461c      	mov	r4, r3
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c5a:	6020      	str	r0, [r4, #0]
 8000c5c:	6061      	str	r1, [r4, #4]
 8000c5e:	60a2      	str	r2, [r4, #8]
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	81a2      	strh	r2, [r4, #12]
 8000c66:	73a3      	strb	r3, [r4, #14]
}
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	3734      	adds	r7, #52	; 0x34
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	2000008c 	.word	0x2000008c
 8000c74:	20000091 	.word	0x20000091

08000c78 <getLastElement>:
#include <inttypes.h>
#include "ringbuff.h"
#include "stdlib.h"

uint32_t getLastElement(buffer_t* buff)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <getLastElement+0x24>
	{
		ret = *buff->begin_handler;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <getOldestElement>:

uint32_t getOldestElement(buffer_t* buff)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <getOldestElement+0x24>
	{
		ret = *buff->end_handler;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <getElementByIdx>:

uint32_t getElementByIdx(buffer_t* buff, uint16_t idx)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
	uint32_t ret = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
	uint32_t temp_adr = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
	if (idx < RING_BUF_SIZE &&
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	2b45      	cmp	r3, #69	; 0x45
 8000cf4:	d833      	bhi.n	8000d5e <getElementByIdx+0x82>
		buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
	if (idx < RING_BUF_SIZE &&
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d02b      	beq.n	8000d5e <getElementByIdx+0x82>
	{
		if ((buff->end_handler + idx) >= (buff->elements + RING_BUF_SIZE))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	441a      	add	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3308      	adds	r3, #8
 8000d14:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d319      	bcc.n	8000d50 <getElementByIdx+0x74>
		{
			temp_adr = (uint32_t)(buff->end_handler + idx) % (uint32_t)(buff->elements + RING_BUF_SIZE - 1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8000d2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d32:	fb01 f202 	mul.w	r2, r1, r2
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	60bb      	str	r3, [r7, #8]
			ret = *(uint32_t*)(buff->elements + (temp_adr / 4) - 1);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f103 0208 	add.w	r2, r3, #8
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	3b04      	subs	r3, #4
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	e006      	b.n	8000d5e <getElementByIdx+0x82>
		}
		else
		{
			ret = *(buff->end_handler + idx);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	return ret;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <bufferAddElement>:


void bufferAddElement(buffer_t* buff, uint32_t element)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	if (BUFF_NOT_OVF == buff->flags.buffer_overflow_flag)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d12c      	bne.n	8000de0 <bufferAddElement+0x74>
	{
		if (BUFF_EMPTY == buff->flags.clr_flag)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10b      	bne.n	8000dae <bufferAddElement+0x42>
		{
			*(buff->begin_handler) = element;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	601a      	str	r2, [r3, #0]
			buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
		{
			buff->end_handler = buff->elements;
		}
		*(buff->begin_handler) = element;
	}
}
 8000dac:	e040      	b.n	8000e30 <bufferAddElement+0xc4>
			buff->begin_handler++;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1d1a      	adds	r2, r3, #4
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
			*(buff->begin_handler) = element;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	601a      	str	r2, [r3, #0]
			if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE - 1))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d32f      	bcc.n	8000e30 <bufferAddElement+0xc4>
				buff->flags.buffer_overflow_flag = BUFF_OVF;
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
}
 8000dde:	e027      	b.n	8000e30 <bufferAddElement+0xc4>
		buff->end_handler++;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1d1a      	adds	r2, r3, #4
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	605a      	str	r2, [r3, #4]
		buff->begin_handler++;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1d1a      	adds	r2, r3, #4
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	601a      	str	r2, [r3, #0]
		if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d304      	bcc.n	8000e0e <bufferAddElement+0xa2>
			buff->begin_handler = buff->elements;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f103 0208 	add.w	r2, r3, #8
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
		if (buff->end_handler >= buff->elements + (RING_BUF_SIZE))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3308      	adds	r3, #8
 8000e16:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d304      	bcc.n	8000e28 <bufferAddElement+0xbc>
			buff->end_handler = buff->elements;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f103 0208 	add.w	r2, r3, #8
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	605a      	str	r2, [r3, #4]
		*(buff->begin_handler) = element;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <bufferInit>:

uint8_t bufferInit(buffer_t* buff)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

	buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	buff->flags.buffer_overflow_flag = BUFF_NOT_OVF;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e5c:	f36f 0341 	bfc	r3, #1, #1
 8000e60:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	if (OK == bufferClear(buff))
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f814 	bl	8000e92 <bufferClear>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d10b      	bne.n	8000e88 <bufferInit+0x4c>
	{
		buff->begin_handler = buff->elements;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f103 0208 	add.w	r2, r3, #8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
		buff->end_handler = buff->elements;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f103 0208 	add.w	r2, r3, #8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	605a      	str	r2, [r3, #4]

		ret = OK;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <bufferClear>:

uint8_t bufferClear(buffer_t* buff)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
	if (BUFF_NOT_EMPTY == buff->flags.clr_flag)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d01f      	beq.n	8000eee <bufferClear+0x5c>
	{
		uint16_t idx = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	81bb      	strh	r3, [r7, #12]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	81bb      	strh	r3, [r7, #12]
 8000eb6:	e008      	b.n	8000eca <bufferClear+0x38>
		{
			buff->elements[idx] = 0;
 8000eb8:	89ba      	ldrh	r2, [r7, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3202      	adds	r2, #2
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	81bb      	strh	r3, [r7, #12]
 8000eca:	89bb      	ldrh	r3, [r7, #12]
 8000ecc:	2b45      	cmp	r3, #69	; 0x45
 8000ece:	d9f3      	bls.n	8000eb8 <bufferClear+0x26>
		}
		buff->begin_handler = NULL;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
		buff->end_handler = NULL;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]

		buff->flags.clr_flag = BUFF_EMPTY;
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000ee2:	f36f 0300 	bfc	r3, #0, #1
 8000ee6:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120

		ret = OK;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f988 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <USART3_IRQHandler+0x10>)
 8000f9e:	f002 f915 	bl	80031cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000a4 	.word	0x200000a4

08000fac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_USART3_UART_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART3_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART3_UART_Init+0x58>)
 8001014:	f001 ffea 	bl	8002fec <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800101e:	f7ff fd7d 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000a4 	.word	0x200000a4
 800102c:	40004800 	.word	0x40004800

08001030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0ae      	sub	sp, #184	; 0xb8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2290      	movs	r2, #144	; 0x90
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f003 fbc9 	bl	80047e8 <memset>
  if(uartHandle->Instance==USART3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <HAL_UART_MspInit+0xc4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d144      	bne.n	80010ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001066:	2300      	movs	r3, #0
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fb94 	bl	800279c <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800107a:	f7ff fd4f 	bl	8000b1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_UART_MspInit+0xc8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c8:	2307      	movs	r3, #7
 80010ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_UART_MspInit+0xcc>)
 80010d6:	f000 fc67 	bl	80019a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2027      	movs	r0, #39	; 0x27
 80010e0:	f000 f9db 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010e4:	2027      	movs	r0, #39	; 0x27
 80010e6:	f000 f9f4 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	37b8      	adds	r7, #184	; 0xb8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40004800 	.word	0x40004800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	//char tmp_char = c;
	//'$', '5', '7', '0', '2', 'D', '5', '1', '2', '1', '#'
	if (huart1->Instance == USART3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2e      	ldr	r2, [pc, #184]	; (80011c8 <HAL_UART_RxCpltCallback+0xc8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d156      	bne.n	80011c0 <HAL_UART_RxCpltCallback+0xc0>
	{
		if(RX.RX_Buff_Idx > RX_BUFF_SIZE - 1)
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001114:	7cdb      	ldrb	r3, [r3, #19]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b12      	cmp	r3, #18
 800111a:	d902      	bls.n	8001122 <HAL_UART_RxCpltCallback+0x22>
		{
			RX.RX_Buff_Idx = 0;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800111e:	2200      	movs	r2, #0
 8001120:	74da      	strb	r2, [r3, #19]
		}
		if (RX.c == '$')
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001124:	7d5b      	ldrb	r3, [r3, #21]
 8001126:	2b24      	cmp	r3, #36	; 0x24
 8001128:	d11e      	bne.n	8001168 <HAL_UART_RxCpltCallback+0x68>
		{
			RX.RX_Frame_Cplt = 0;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800112c:	2200      	movs	r2, #0
 800112e:	751a      	strb	r2, [r3, #20]
			RX.RX_Buff_Idx = 0;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001132:	2200      	movs	r2, #0
 8001134:	74da      	strb	r2, [r3, #19]
			RXbufferClear(RX.RX_Buffer, RX_BUFF_SIZE);
 8001136:	2113      	movs	r1, #19
 8001138:	4824      	ldr	r0, [pc, #144]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800113a:	f7ff fcf6 	bl	8000b2a <RXbufferClear>
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001140:	7cdb      	ldrb	r3, [r3, #19]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001148:	7d59      	ldrb	r1, [r3, #21]
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800114c:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx++;
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001150:	7cdb      	ldrb	r3, [r3, #19]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800115a:	74da      	strb	r2, [r3, #19]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	491c      	ldr	r1, [pc, #112]	; (80011d0 <HAL_UART_RxCpltCallback+0xd0>)
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001162:	f001 ffef 	bl	8003144 <HAL_UART_Receive_IT>
			return;
 8001166:	e02b      	b.n	80011c0 <HAL_UART_RxCpltCallback+0xc0>
		}
		else if (RX.c == '#')
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800116a:	7d5b      	ldrb	r3, [r3, #21]
 800116c:	2b23      	cmp	r3, #35	; 0x23
 800116e:	d113      	bne.n	8001198 <HAL_UART_RxCpltCallback+0x98>
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001172:	7cdb      	ldrb	r3, [r3, #19]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800117a:	7d59      	ldrb	r1, [r3, #21]
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800117e:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx = 0;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001182:	2200      	movs	r2, #0
 8001184:	74da      	strb	r2, [r3, #19]
			RX.RX_Frame_Cplt = 1;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 8001188:	2201      	movs	r2, #1
 800118a:	751a      	strb	r2, [r3, #20]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	4910      	ldr	r1, [pc, #64]	; (80011d0 <HAL_UART_RxCpltCallback+0xd0>)
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001192:	f001 ffd7 	bl	8003144 <HAL_UART_Receive_IT>
			return;
 8001196:	e013      	b.n	80011c0 <HAL_UART_RxCpltCallback+0xc0>
		}
		else
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 800119a:	7cdb      	ldrb	r3, [r3, #19]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 80011a2:	7d59      	ldrb	r1, [r3, #21]
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 80011a6:	5499      	strb	r1, [r3, r2]
		}
		RX.RX_Buff_Idx++;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 80011aa:	7cdb      	ldrb	r3, [r3, #19]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_UART_RxCpltCallback+0xcc>)
 80011b4:	74da      	strb	r2, [r3, #19]
		HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	4905      	ldr	r1, [pc, #20]	; (80011d0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <HAL_UART_RxCpltCallback+0xd4>)
 80011bc:	f001 ffc2 	bl	8003144 <HAL_UART_Receive_IT>
	}
}
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40004800 	.word	0x40004800
 80011cc:	2000008c 	.word	0x2000008c
 80011d0:	200000a1 	.word	0x200000a1
 80011d4:	200000a4 	.word	0x200000a4

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001202:	f7ff fed3 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 faa3 	bl	8004750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fb51 	bl	80008b0 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800121c:	08004b40 	.word	0x08004b40
  ldr r2, =_sbss
 8001220:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001224:	2000014c 	.word	0x2000014c

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>

0800122a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f928 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f805 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fe5f 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f943 	bl	80014ee <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f90b 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	2000012c 	.word	0x2000012c

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000012c 	.word	0x2000012c

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	05fa0000 	.word	0x05fa0000

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff feda 	bl	80012cc <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e052      	b.n	80015de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0216 	bic.w	r2, r2, #22
 8001546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <HAL_DMA_Abort+0x62>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001588:	e013      	b.n	80015b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158a:	f7ff fe9f 	bl	80012cc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b05      	cmp	r3, #5
 8001596:	d90c      	bls.n	80015b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e015      	b.n	80015de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e4      	bne.n	800158a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	223f      	movs	r2, #63	; 0x3f
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00c      	b.n	800161e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2205      	movs	r2, #5
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_FLASH_Program+0xb0>)
 8001640:	7d1b      	ldrb	r3, [r3, #20]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_FLASH_Program+0x1e>
 8001646:	2302      	movs	r3, #2
 8001648:	e043      	b.n	80016d2 <HAL_FLASH_Program+0xa6>
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_FLASH_Program+0xb0>)
 800164c:	2201      	movs	r2, #1
 800164e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001654:	f000 f878 	bl	8001748 <FLASH_WaitForLastOperation>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d133      	bne.n	80016ca <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d823      	bhi.n	80016b0 <HAL_FLASH_Program+0x84>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HAL_FLASH_Program+0x44>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001681 	.word	0x08001681
 8001674:	0800168d 	.word	0x0800168d
 8001678:	08001699 	.word	0x08001699
 800167c:	080016a5 	.word	0x080016a5
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f000 f921 	bl	80018cc <FLASH_Program_Byte>
        break;
 800168a:	e012      	b.n	80016b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800168c:	883b      	ldrh	r3, [r7, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f000 f8f5 	bl	8001880 <FLASH_Program_HalfWord>
        break;
 8001696:	e00c      	b.n	80016b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f000 f8c9 	bl	8001834 <FLASH_Program_Word>
        break;
 80016a2:	e006      	b.n	80016b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80016a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f000 f88d 	bl	80017c8 <FLASH_Program_DoubleWord>
        break;
 80016ae:	e000      	b.n	80016b2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80016b0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016b6:	f000 f847 	bl	8001748 <FLASH_WaitForLastOperation>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_FLASH_Program+0xb4>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_FLASH_Program+0xb4>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_FLASH_Program+0xb0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	751a      	strb	r2, [r3, #20]

  return status;
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000130 	.word	0x20000130
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_FLASH_Unlock+0x38>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da0b      	bge.n	800170e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_FLASH_Unlock+0x38>)
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_FLASH_Unlock+0x3c>)
 80016fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_FLASH_Unlock+0x38>)
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_FLASH_Unlock+0x40>)
 8001700:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_FLASH_Unlock+0x38>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da01      	bge.n	800170e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800170e:	79fb      	ldrb	r3, [r7, #7]
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40023c00 	.word	0x40023c00
 8001720:	45670123 	.word	0x45670123
 8001724:	cdef89ab 	.word	0xcdef89ab

08001728 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_FLASH_Lock+0x1c>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_FLASH_Lock+0x1c>)
 8001732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001736:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40023c00 	.word	0x40023c00

08001748 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <FLASH_WaitForLastOperation+0x78>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800175a:	f7ff fdb7 	bl	80012cc <HAL_GetTick>
 800175e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001760:	e010      	b.n	8001784 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d00c      	beq.n	8001784 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <FLASH_WaitForLastOperation+0x38>
 8001770:	f7ff fdac 	bl	80012cc <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	d201      	bcs.n	8001784 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e019      	b.n	80017b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <FLASH_WaitForLastOperation+0x7c>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e8      	bne.n	8001762 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <FLASH_WaitForLastOperation+0x7c>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800179c:	f000 f8ba 	bl	8001914 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e009      	b.n	80017b8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <FLASH_WaitForLastOperation+0x7c>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <FLASH_WaitForLastOperation+0x7c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
  
}  
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000130 	.word	0x20000130
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <FLASH_Program_DoubleWord+0x68>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80017fe:	f3bf 8f6f 	isb	sy
}
 8001802:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	000a      	movs	r2, r1
 8001812:	2300      	movs	r3, #0
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	3104      	adds	r1, #4
 8001818:	4613      	mov	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <FLASH_Program_Word+0x48>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <FLASH_Program_Word+0x48>)
 8001844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001848:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <FLASH_Program_Word+0x48>)
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <FLASH_Program_Word+0x48>)
 8001850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001854:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <FLASH_Program_Word+0x48>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <FLASH_Program_Word+0x48>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 8001892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <FLASH_Program_HalfWord+0x48>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018b6:	f3bf 8f4f 	dsb	sy
}
 80018ba:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40023c00 	.word	0x40023c00

080018cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <FLASH_Program_Byte+0x44>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018fe:	f3bf 8f4f 	dsb	sy
}
 8001902:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40023c00 	.word	0x40023c00

08001914 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 800192e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 8001946:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 800195e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 8001976:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <FLASH_SetErrorCode+0x90>)
 800198e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <FLASH_SetErrorCode+0x8c>)
 8001992:	22f2      	movs	r2, #242	; 0xf2
 8001994:	60da      	str	r2, [r3, #12]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	20000130 	.word	0x20000130

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e175      	b.n	8001cb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8164 	bne.w	8001cae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x56>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80be 	beq.w	8001cae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b66      	ldr	r3, [pc, #408]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b4a:	4a61      	ldr	r2, [pc, #388]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_GPIO_Init+0x32c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d037      	beq.n	8001be6 <HAL_GPIO_Init+0x23e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_GPIO_Init+0x23a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x236>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <HAL_GPIO_Init+0x338>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x232>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <HAL_GPIO_Init+0x33c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x22e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_GPIO_Init+0x340>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x22a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x344>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x226>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a51      	ldr	r2, [pc, #324]	; (8001cf0 <HAL_GPIO_Init+0x348>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x222>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a50      	ldr	r2, [pc, #320]	; (8001cf4 <HAL_GPIO_Init+0x34c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x21e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_GPIO_Init+0x350>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001bbe:	2309      	movs	r3, #9
 8001bc0:	e012      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	e010      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	e00e      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00c      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00a      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	e008      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x240>
 8001be6:	2300      	movs	r3, #0
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f002 0203 	and.w	r2, r2, #3
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c54:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_GPIO_Init+0x354>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	f67f ae86 	bls.w	80019c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40021c00 	.word	0x40021c00
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40022400 	.word	0x40022400
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40007000 	.word	0x40007000

08001d54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_PWREx_EnableOverDrive+0x98>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_PWREx_EnableOverDrive+0x98>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_PWREx_EnableOverDrive+0x98>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d82:	f7ff faa3 	bl	80012cc <HAL_GetTick>
 8001d86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d88:	e009      	b.n	8001d9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d8a:	f7ff fa9f 	bl	80012cc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d98:	d901      	bls.n	8001d9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e022      	b.n	8001de4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d1ee      	bne.n	8001d8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db8:	f7ff fa88 	bl	80012cc <HAL_GetTick>
 8001dbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dbe:	e009      	b.n	8001dd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dc0:	f7ff fa84 	bl	80012cc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dce:	d901      	bls.n	8001dd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e007      	b.n	8001de4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001de0:	d1ee      	bne.n	8001dc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e29b      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b96      	ldr	r3, [pc, #600]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e24:	4b93      	ldr	r3, [pc, #588]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
 8001e30:	4b90      	ldr	r3, [pc, #576]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x130>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e275      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x7a>
 8001e60:	4b84      	ldr	r3, [pc, #528]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a83      	ldr	r2, [pc, #524]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x9c>
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7b      	ldr	r2, [pc, #492]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc0>
 8001e9a:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a75      	ldr	r2, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b73      	ldr	r3, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a72      	ldr	r2, [pc, #456]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd8>
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f9fa 	bl	80012cc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f9f6 	bl	80012cc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e229      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe8>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f9e6 	bl	80012cc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f9e2 	bl	80012cc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e215      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b57      	ldr	r3, [pc, #348]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x110>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d069      	beq.n	8002006 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x190>
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1e9      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	493d      	ldr	r1, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e040      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f998 	bl	80012cc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f994 	bl	80012cc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1c7      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4929      	ldr	r1, [pc, #164]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f974 	bl	80012cc <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f970 	bl	80012cc <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1a3      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d038      	beq.n	8002084 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d019      	beq.n	800204e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f951 	bl	80012cc <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202e:	f7ff f94d 	bl	80012cc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e180      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x23a>
 800204c:	e01a      	b.n	8002084 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x280>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff f937 	bl	80012cc <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002062:	f7ff f933 	bl	80012cc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d903      	bls.n	8002078 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e166      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
 8002074:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a4 	beq.w	80021da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a88      	ldr	r2, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b86      	ldr	r3, [pc, #536]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020c6:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff f8fb 	bl	80012cc <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff f8f7 	bl	80012cc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e12a      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ec:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x4d4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x31a>
 8002100:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x33c>
 8002116:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x35e>
 8002138:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x376>
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5b      	ldr	r2, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f8ab 	bl	80012cc <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff f8a7 	bl	80012cc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0d8      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x386>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7ff f895 	bl	80012cc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff f891 	bl	80012cc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0c2      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a3c      	ldr	r2, [pc, #240]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80ae 	beq.w	8002340 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d06d      	beq.n	80022cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d14b      	bne.n	8002290 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f862 	bl	80012cc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f85e 	bl	80012cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e091      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	071b      	lsls	r3, r3, #28
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f830 	bl	80012cc <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7ff f82c 	bl	80012cc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e05f      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x47c>
 800228e:	e057      	b.n	8002340 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 8002296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f816 	bl	80012cc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f812 	bl	80012cc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e045      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4b0>
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x54c>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_OscConfig+0x558>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d129      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d122      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d119      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d10f      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d0      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 020f 	bic.w	r2, r3, #15
 800237e:	4965      	ldr	r1, [pc, #404]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	494d      	ldr	r1, [pc, #308]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d040      	beq.n	8002474 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e073      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4936      	ldr	r1, [pc, #216]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe ff42 	bl	80012cc <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe ff3e 	bl	80012cc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e053      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d210      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 020f 	bic.w	r2, r3, #15
 800248a:	4922      	ldr	r1, [pc, #136]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	490a      	ldr	r1, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	5ccb      	ldrb	r3, [r1, r3]
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fe9e 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00
 8002518:	40023800 	.word	0x40023800
 800251c:	080049f0 	.word	0x080049f0
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800252c:	b094      	sub	sp, #80	; 0x50
 800252e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
 8002534:	2300      	movs	r3, #0
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002538:	2300      	movs	r3, #0
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002540:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d00d      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x40>
 800254c:	2b08      	cmp	r3, #8
 800254e:	f200 80e1 	bhi.w	8002714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002556:	2b04      	cmp	r3, #4
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x3a>
 800255a:	e0db      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_GetSysClockFreq+0x204>)
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002560:	e0db      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002562:	4b73      	ldr	r3, [pc, #460]	; (8002730 <HAL_RCC_GetSysClockFreq+0x208>)
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002566:	e0d8      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002568:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002572:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257e:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	2200      	movs	r2, #0
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
 8002588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
 8002592:	2300      	movs	r3, #0
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
 8002596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800259a:	4622      	mov	r2, r4
 800259c:	462b      	mov	r3, r5
 800259e:	f04f 0000 	mov.w	r0, #0
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	0159      	lsls	r1, r3, #5
 80025a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ac:	0150      	lsls	r0, r2, #5
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4621      	mov	r1, r4
 80025b4:	1a51      	subs	r1, r2, r1
 80025b6:	6139      	str	r1, [r7, #16]
 80025b8:	4629      	mov	r1, r5
 80025ba:	eb63 0301 	sbc.w	r3, r3, r1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025cc:	4659      	mov	r1, fp
 80025ce:	018b      	lsls	r3, r1, #6
 80025d0:	4651      	mov	r1, sl
 80025d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025d6:	4651      	mov	r1, sl
 80025d8:	018a      	lsls	r2, r1, #6
 80025da:	4651      	mov	r1, sl
 80025dc:	ebb2 0801 	subs.w	r8, r2, r1
 80025e0:	4659      	mov	r1, fp
 80025e2:	eb63 0901 	sbc.w	r9, r3, r1
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fa:	4690      	mov	r8, r2
 80025fc:	4699      	mov	r9, r3
 80025fe:	4623      	mov	r3, r4
 8002600:	eb18 0303 	adds.w	r3, r8, r3
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	462b      	mov	r3, r5
 8002608:	eb49 0303 	adc.w	r3, r9, r3
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800261a:	4629      	mov	r1, r5
 800261c:	024b      	lsls	r3, r1, #9
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002624:	4621      	mov	r1, r4
 8002626:	024a      	lsls	r2, r1, #9
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	2200      	movs	r2, #0
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002638:	f7fd fe10 	bl	800025c <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002644:	e058      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	2200      	movs	r2, #0
 800264e:	4618      	mov	r0, r3
 8002650:	4611      	mov	r1, r2
 8002652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002660:	4642      	mov	r2, r8
 8002662:	464b      	mov	r3, r9
 8002664:	f04f 0000 	mov.w	r0, #0
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	0159      	lsls	r1, r3, #5
 800266e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002672:	0150      	lsls	r0, r2, #5
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4641      	mov	r1, r8
 800267a:	ebb2 0a01 	subs.w	sl, r2, r1
 800267e:	4649      	mov	r1, r9
 8002680:	eb63 0b01 	sbc.w	fp, r3, r1
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002698:	ebb2 040a 	subs.w	r4, r2, sl
 800269c:	eb63 050b 	sbc.w	r5, r3, fp
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	00eb      	lsls	r3, r5, #3
 80026aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ae:	00e2      	lsls	r2, r4, #3
 80026b0:	4614      	mov	r4, r2
 80026b2:	461d      	mov	r5, r3
 80026b4:	4643      	mov	r3, r8
 80026b6:	18e3      	adds	r3, r4, r3
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	464b      	mov	r3, r9
 80026bc:	eb45 0303 	adc.w	r3, r5, r3
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ce:	4629      	mov	r1, r5
 80026d0:	028b      	lsls	r3, r1, #10
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d8:	4621      	mov	r1, r4
 80026da:	028a      	lsls	r2, r1, #10
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e2:	2200      	movs	r2, #0
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	61fa      	str	r2, [r7, #28]
 80026e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ec:	f7fd fdb6 	bl	800025c <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	3301      	adds	r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800270a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetSysClockFreq+0x204>)
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800271c:	4618      	mov	r0, r3
 800271e:	3750      	adds	r7, #80	; 0x50
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	007a1200 	.word	0x007a1200

08002734 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_RCC_GetHCLKFreq+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002750:	f7ff fff0 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0a9b      	lsrs	r3, r3, #10
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08004a00 	.word	0x08004a00

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002778:	f7ff ffdc 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0b5b      	lsrs	r3, r3, #13
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	08004a00 	.word	0x08004a00

0800279c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027c4:	4b69      	ldr	r3, [pc, #420]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a68      	ldr	r2, [pc, #416]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ce:	6093      	str	r3, [r2, #8]
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	4964      	ldr	r1, [pc, #400]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d017      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f6:	4b5d      	ldr	r3, [pc, #372]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	4959      	ldr	r1, [pc, #356]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002832:	4b4e      	ldr	r3, [pc, #312]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	494a      	ldr	r1, [pc, #296]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 808b 	beq.w	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	4a39      	ldr	r2, [pc, #228]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6413      	str	r3, [r2, #64]	; 0x40
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fd12 	bl	80012cc <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fd0e 	bl	80012cc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e38f      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d035      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d02e      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002908:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d114      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fcd6 	bl	80012cc <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fcd2 	bl	80012cc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e351      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002952:	d111      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002962:	400b      	ands	r3, r1
 8002964:	4901      	ldr	r1, [pc, #4]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
 800296a:	e00b      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
 8002974:	0ffffcff 	.word	0x0ffffcff
 8002978:	4bac      	ldr	r3, [pc, #688]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4aab      	ldr	r2, [pc, #684]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002982:	6093      	str	r3, [r2, #8]
 8002984:	4ba9      	ldr	r3, [pc, #676]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	49a6      	ldr	r1, [pc, #664]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002992:	4313      	orrs	r3, r2
 8002994:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029a2:	4ba2      	ldr	r3, [pc, #648]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a8:	4aa0      	ldr	r2, [pc, #640]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029b2:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	499b      	ldr	r1, [pc, #620]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d0:	4b96      	ldr	r3, [pc, #600]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029de:	4993      	ldr	r1, [pc, #588]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f2:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a00:	498a      	ldr	r1, [pc, #552]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a14:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a22:	4982      	ldr	r1, [pc, #520]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a36:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4979      	ldr	r1, [pc, #484]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a58:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4971      	ldr	r1, [pc, #452]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f023 020c 	bic.w	r2, r3, #12
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	4968      	ldr	r1, [pc, #416]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9c:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	4960      	ldr	r1, [pc, #384]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002acc:	4957      	ldr	r1, [pc, #348]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	494f      	ldr	r1, [pc, #316]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	4946      	ldr	r1, [pc, #280]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	493e      	ldr	r1, [pc, #248]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b76:	492d      	ldr	r1, [pc, #180]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d011      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	4924      	ldr	r1, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	4914      	ldr	r1, [pc, #80]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfc:	490b      	ldr	r1, [pc, #44]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c20:	4902      	ldr	r1, [pc, #8]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c28:	e002      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3c:	4b8a      	ldr	r3, [pc, #552]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	4986      	ldr	r1, [pc, #536]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c70:	497d      	ldr	r1, [pc, #500]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d006      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80d6 	beq.w	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c8c:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a75      	ldr	r2, [pc, #468]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c98:	f7fe fb18 	bl	80012cc <HAL_GetTick>
 8002c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ca0:	f7fe fb14 	bl	80012cc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e195      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d021      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce6:	0e1b      	lsrs	r3, r3, #24
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	019a      	lsls	r2, r3, #6
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	071b      	lsls	r3, r3, #28
 8002d06:	4958      	ldr	r1, [pc, #352]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d38:	d129      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	0f1b      	lsrs	r3, r3, #28
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	019a      	lsls	r2, r3, #6
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	071b      	lsls	r3, r3, #28
 8002d6e:	493e      	ldr	r1, [pc, #248]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7c:	f023 021f 	bic.w	r2, r3, #31
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4938      	ldr	r1, [pc, #224]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002da8:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	0f1b      	lsrs	r3, r3, #28
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	019a      	lsls	r2, r3, #6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	4926      	ldr	r1, [pc, #152]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	019a      	lsls	r2, r3, #6
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e12:	f7fe fa5b 	bl	80012cc <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e1a:	f7fe fa57 	bl	80012cc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0d8      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	f040 80ce 	bne.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fa3e 	bl	80012cc <HAL_GetTick>
 8002e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e52:	e00b      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e54:	f7fe fa3a 	bl	80012cc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d904      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0bb      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e78:	d0ec      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02e      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d12a      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	0f1b      	lsrs	r3, r3, #28
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	019a      	lsls	r2, r3, #6
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	061b      	lsls	r3, r3, #24
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	071b      	lsls	r3, r3, #28
 8002ed6:	4944      	ldr	r1, [pc, #272]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	3b01      	subs	r3, #1
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	493d      	ldr	r1, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d022      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0c:	d11d      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	0f1b      	lsrs	r3, r3, #28
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	019a      	lsls	r2, r3, #6
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	071b      	lsls	r3, r3, #28
 8002f42:	4929      	ldr	r1, [pc, #164]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	0e1b      	lsrs	r3, r3, #24
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	019a      	lsls	r2, r3, #6
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4911      	ldr	r1, [pc, #68]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe f98a 	bl	80012cc <HAL_GetTick>
 8002fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fbc:	f7fe f986 	bl	80012cc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e007      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fda:	d1ef      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e040      	b.n	8003080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe f80e 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fbe0 	bl	80037f0 <UART_SetConfig>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e022      	b.n	8003080 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe38 	bl	8003cb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 febf 	bl	8003dfc <UART_CheckIdleState>
 800307e:	4603      	mov	r3, r0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003088:	b480      	push	{r7}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800309a:	2b20      	cmp	r3, #32
 800309c:	d147      	bne.n	800312e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Transmit_IT+0x22>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e040      	b.n	8003130 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d107      	bne.n	80030f2 <HAL_UART_Transmit_IT+0x6a>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_UART_Transmit_IT+0xb4>)
 80030ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80030f0:	e002      	b.n	80030f8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a12      	ldr	r2, [pc, #72]	; (8003140 <HAL_UART_Transmit_IT+0xb8>)
 80030f6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	623b      	str	r3, [r7, #32]
 8003118:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	69f9      	ldr	r1, [r7, #28]
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	61bb      	str	r3, [r7, #24]
   return(result);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e6      	bne.n	80030f8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	372c      	adds	r7, #44	; 0x2c
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	0800435b 	.word	0x0800435b
 8003140:	080042a5 	.word	0x080042a5

08003144 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003158:	2b20      	cmp	r3, #32
 800315a:	d132      	bne.n	80031c2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_UART_Receive_IT+0x24>
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02b      	b.n	80031c4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d018      	beq.n	80031b2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	613b      	str	r3, [r7, #16]
   return(result);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	69f9      	ldr	r1, [r7, #28]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e6      	bne.n	8003180 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	461a      	mov	r2, r3
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 ff33 	bl	8004024 <UART_Start_Receive_IT>
 80031be:	4603      	mov	r3, r0
 80031c0:	e000      	b.n	80031c4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0ba      	sub	sp, #232	; 0xe8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80031fa:	4013      	ands	r3, r2
 80031fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d115      	bne.n	8003234 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00f      	beq.n	8003234 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 82ac 	beq.w	8003782 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
      }
      return;
 8003232:	e2a6      	b.n	8003782 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8117 	beq.w	800346c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800324a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_UART_IRQHandler+0x298>)
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 810a 	beq.w	800346c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <HAL_UART_IRQHandler+0xbc>
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d011      	beq.n	80032b8 <HAL_UART_IRQHandler+0xec>
 8003294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2202      	movs	r2, #2
 80032a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d011      	beq.n	80032e8 <HAL_UART_IRQHandler+0x11c>
 80032c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2204      	movs	r2, #4
 80032d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003304:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2208      	movs	r2, #8
 8003312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_UART_IRQHandler+0x18a>
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8212 	beq.w	8003786 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800336e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d005      	beq.n	80033ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04f      	beq.n	800344e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fefe 	bl	80041b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d141      	bne.n	8003446 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1d9      	bne.n	80033c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	2b00      	cmp	r3, #0
 8003414:	d013      	beq.n	800343e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	4a13      	ldr	r2, [pc, #76]	; (8003468 <HAL_UART_IRQHandler+0x29c>)
 800341c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f8df 	bl	80015e6 <HAL_DMA_Abort_IT>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d017      	beq.n	800345e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003438:	4610      	mov	r0, r2
 800343a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e00f      	b.n	800345e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9b6 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	e00b      	b.n	800345e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9b2 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	e007      	b.n	800345e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9ae 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800345c:	e193      	b.n	8003786 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345e:	bf00      	nop
    return;
 8003460:	e191      	b.n	8003786 <HAL_UART_IRQHandler+0x5ba>
 8003462:	bf00      	nop
 8003464:	04000120 	.word	0x04000120
 8003468:	08004279 	.word	0x08004279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 814c 	bne.w	800370e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8145 	beq.w	800370e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 813e 	beq.w	800370e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2210      	movs	r2, #16
 8003498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	f040 80b6 	bne.w	8003616 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8165 	beq.w	800378a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ca:	429a      	cmp	r2, r3
 80034cc:	f080 815d 	bcs.w	800378a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	f000 8086 	beq.w	80035f4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003516:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800351e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800352a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1da      	bne.n	80034e8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003556:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800355a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800355e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e1      	bne.n	8003532 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3308      	adds	r3, #8
 800358e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e3      	bne.n	800356e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e4      	bne.n	80035b4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd ff89 	bl	8001506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003606:	b29b      	uxth	r3, r3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	b29b      	uxth	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8d8 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003614:	e0b9      	b.n	800378a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003622:	b29b      	uxth	r3, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80ab 	beq.w	800378e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e4      	bne.n	8003642 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	623b      	str	r3, [r7, #32]
   return(result);
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800369c:	633a      	str	r2, [r7, #48]	; 0x30
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e3      	bne.n	8003678 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0310 	bic.w	r3, r3, #16
 80036d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	617b      	str	r3, [r7, #20]
   return(result);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e4      	bne.n	80036c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f85c 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800370c:	e03f      	b.n	800378e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00e      	beq.n	8003738 <HAL_UART_IRQHandler+0x56c>
 800371a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800372e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f853 	bl	80037dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003736:	e02d      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
    }
    return;
 8003760:	e017      	b.n	8003792 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <HAL_UART_IRQHandler+0x5c8>
 800376e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fe4d 	bl	800441a <UART_EndTransmit_IT>
    return;
 8003780:	e008      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003782:	bf00      	nop
 8003784:	e006      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
      return;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
      return;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003792:	bf00      	nop
  }

}
 8003794:	37e8      	adds	r7, #232	; 0xe8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop

0800379c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4ba6      	ldr	r3, [pc, #664]	; (8003ab4 <UART_SetConfig+0x2c4>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	6979      	ldr	r1, [r7, #20]
 8003824:	430b      	orrs	r3, r1
 8003826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a94      	ldr	r2, [pc, #592]	; (8003ab8 <UART_SetConfig+0x2c8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d120      	bne.n	80038ae <UART_SetConfig+0xbe>
 800386c:	4b93      	ldr	r3, [pc, #588]	; (8003abc <UART_SetConfig+0x2cc>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d816      	bhi.n	80038a8 <UART_SetConfig+0xb8>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <UART_SetConfig+0x90>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	0800389d 	.word	0x0800389d
 8003888:	08003897 	.word	0x08003897
 800388c:	080038a3 	.word	0x080038a3
 8003890:	2301      	movs	r3, #1
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e150      	b.n	8003b38 <UART_SetConfig+0x348>
 8003896:	2302      	movs	r3, #2
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e14d      	b.n	8003b38 <UART_SetConfig+0x348>
 800389c:	2304      	movs	r3, #4
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e14a      	b.n	8003b38 <UART_SetConfig+0x348>
 80038a2:	2308      	movs	r3, #8
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e147      	b.n	8003b38 <UART_SetConfig+0x348>
 80038a8:	2310      	movs	r3, #16
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e144      	b.n	8003b38 <UART_SetConfig+0x348>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a83      	ldr	r2, [pc, #524]	; (8003ac0 <UART_SetConfig+0x2d0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d132      	bne.n	800391e <UART_SetConfig+0x12e>
 80038b8:	4b80      	ldr	r3, [pc, #512]	; (8003abc <UART_SetConfig+0x2cc>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d828      	bhi.n	8003918 <UART_SetConfig+0x128>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <UART_SetConfig+0xdc>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	08003901 	.word	0x08003901
 80038d0:	08003919 	.word	0x08003919
 80038d4:	08003919 	.word	0x08003919
 80038d8:	08003919 	.word	0x08003919
 80038dc:	0800390d 	.word	0x0800390d
 80038e0:	08003919 	.word	0x08003919
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003919 	.word	0x08003919
 80038ec:	08003907 	.word	0x08003907
 80038f0:	08003919 	.word	0x08003919
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003919 	.word	0x08003919
 80038fc:	08003913 	.word	0x08003913
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e118      	b.n	8003b38 <UART_SetConfig+0x348>
 8003906:	2302      	movs	r3, #2
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e115      	b.n	8003b38 <UART_SetConfig+0x348>
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e112      	b.n	8003b38 <UART_SetConfig+0x348>
 8003912:	2308      	movs	r3, #8
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e10f      	b.n	8003b38 <UART_SetConfig+0x348>
 8003918:	2310      	movs	r3, #16
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e10c      	b.n	8003b38 <UART_SetConfig+0x348>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a68      	ldr	r2, [pc, #416]	; (8003ac4 <UART_SetConfig+0x2d4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d120      	bne.n	800396a <UART_SetConfig+0x17a>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <UART_SetConfig+0x2cc>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003932:	2b30      	cmp	r3, #48	; 0x30
 8003934:	d013      	beq.n	800395e <UART_SetConfig+0x16e>
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	d814      	bhi.n	8003964 <UART_SetConfig+0x174>
 800393a:	2b20      	cmp	r3, #32
 800393c:	d009      	beq.n	8003952 <UART_SetConfig+0x162>
 800393e:	2b20      	cmp	r3, #32
 8003940:	d810      	bhi.n	8003964 <UART_SetConfig+0x174>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <UART_SetConfig+0x15c>
 8003946:	2b10      	cmp	r3, #16
 8003948:	d006      	beq.n	8003958 <UART_SetConfig+0x168>
 800394a:	e00b      	b.n	8003964 <UART_SetConfig+0x174>
 800394c:	2300      	movs	r3, #0
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e0f2      	b.n	8003b38 <UART_SetConfig+0x348>
 8003952:	2302      	movs	r3, #2
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e0ef      	b.n	8003b38 <UART_SetConfig+0x348>
 8003958:	2304      	movs	r3, #4
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e0ec      	b.n	8003b38 <UART_SetConfig+0x348>
 800395e:	2308      	movs	r3, #8
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e0e9      	b.n	8003b38 <UART_SetConfig+0x348>
 8003964:	2310      	movs	r3, #16
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e0e6      	b.n	8003b38 <UART_SetConfig+0x348>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <UART_SetConfig+0x2d8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d120      	bne.n	80039b6 <UART_SetConfig+0x1c6>
 8003974:	4b51      	ldr	r3, [pc, #324]	; (8003abc <UART_SetConfig+0x2cc>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800397e:	2bc0      	cmp	r3, #192	; 0xc0
 8003980:	d013      	beq.n	80039aa <UART_SetConfig+0x1ba>
 8003982:	2bc0      	cmp	r3, #192	; 0xc0
 8003984:	d814      	bhi.n	80039b0 <UART_SetConfig+0x1c0>
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d009      	beq.n	800399e <UART_SetConfig+0x1ae>
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d810      	bhi.n	80039b0 <UART_SetConfig+0x1c0>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <UART_SetConfig+0x1a8>
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x1b4>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x1c0>
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e0cc      	b.n	8003b38 <UART_SetConfig+0x348>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e0c9      	b.n	8003b38 <UART_SetConfig+0x348>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e0c6      	b.n	8003b38 <UART_SetConfig+0x348>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e0c3      	b.n	8003b38 <UART_SetConfig+0x348>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e0c0      	b.n	8003b38 <UART_SetConfig+0x348>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a44      	ldr	r2, [pc, #272]	; (8003acc <UART_SetConfig+0x2dc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d125      	bne.n	8003a0c <UART_SetConfig+0x21c>
 80039c0:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <UART_SetConfig+0x2cc>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ce:	d017      	beq.n	8003a00 <UART_SetConfig+0x210>
 80039d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d4:	d817      	bhi.n	8003a06 <UART_SetConfig+0x216>
 80039d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039da:	d00b      	beq.n	80039f4 <UART_SetConfig+0x204>
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d811      	bhi.n	8003a06 <UART_SetConfig+0x216>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <UART_SetConfig+0x1fe>
 80039e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ea:	d006      	beq.n	80039fa <UART_SetConfig+0x20a>
 80039ec:	e00b      	b.n	8003a06 <UART_SetConfig+0x216>
 80039ee:	2300      	movs	r3, #0
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e0a1      	b.n	8003b38 <UART_SetConfig+0x348>
 80039f4:	2302      	movs	r3, #2
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e09e      	b.n	8003b38 <UART_SetConfig+0x348>
 80039fa:	2304      	movs	r3, #4
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e09b      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a00:	2308      	movs	r3, #8
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e098      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a06:	2310      	movs	r3, #16
 8003a08:	77fb      	strb	r3, [r7, #31]
 8003a0a:	e095      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <UART_SetConfig+0x2e0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d125      	bne.n	8003a62 <UART_SetConfig+0x272>
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <UART_SetConfig+0x2cc>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a24:	d017      	beq.n	8003a56 <UART_SetConfig+0x266>
 8003a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2a:	d817      	bhi.n	8003a5c <UART_SetConfig+0x26c>
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a30:	d00b      	beq.n	8003a4a <UART_SetConfig+0x25a>
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a36:	d811      	bhi.n	8003a5c <UART_SetConfig+0x26c>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <UART_SetConfig+0x254>
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x260>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x26c>
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e076      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e073      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e070      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e06d      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e06a      	b.n	8003b38 <UART_SetConfig+0x348>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <UART_SetConfig+0x2e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d138      	bne.n	8003ade <UART_SetConfig+0x2ee>
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <UART_SetConfig+0x2cc>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a7a:	d017      	beq.n	8003aac <UART_SetConfig+0x2bc>
 8003a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a80:	d82a      	bhi.n	8003ad8 <UART_SetConfig+0x2e8>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	d00b      	beq.n	8003aa0 <UART_SetConfig+0x2b0>
 8003a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8c:	d824      	bhi.n	8003ad8 <UART_SetConfig+0x2e8>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <UART_SetConfig+0x2aa>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d006      	beq.n	8003aa6 <UART_SetConfig+0x2b6>
 8003a98:	e01e      	b.n	8003ad8 <UART_SetConfig+0x2e8>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e04b      	b.n	8003b38 <UART_SetConfig+0x348>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e048      	b.n	8003b38 <UART_SetConfig+0x348>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e045      	b.n	8003b38 <UART_SetConfig+0x348>
 8003aac:	2308      	movs	r3, #8
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e042      	b.n	8003b38 <UART_SetConfig+0x348>
 8003ab2:	bf00      	nop
 8003ab4:	efff69f3 	.word	0xefff69f3
 8003ab8:	40011000 	.word	0x40011000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	40004800 	.word	0x40004800
 8003ac8:	40004c00 	.word	0x40004c00
 8003acc:	40005000 	.word	0x40005000
 8003ad0:	40011400 	.word	0x40011400
 8003ad4:	40007800 	.word	0x40007800
 8003ad8:	2310      	movs	r3, #16
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e02c      	b.n	8003b38 <UART_SetConfig+0x348>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	; (8003cac <UART_SetConfig+0x4bc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d125      	bne.n	8003b34 <UART_SetConfig+0x344>
 8003ae8:	4b71      	ldr	r3, [pc, #452]	; (8003cb0 <UART_SetConfig+0x4c0>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003af2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003af6:	d017      	beq.n	8003b28 <UART_SetConfig+0x338>
 8003af8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003afc:	d817      	bhi.n	8003b2e <UART_SetConfig+0x33e>
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b02:	d00b      	beq.n	8003b1c <UART_SetConfig+0x32c>
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d811      	bhi.n	8003b2e <UART_SetConfig+0x33e>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <UART_SetConfig+0x326>
 8003b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b12:	d006      	beq.n	8003b22 <UART_SetConfig+0x332>
 8003b14:	e00b      	b.n	8003b2e <UART_SetConfig+0x33e>
 8003b16:	2300      	movs	r3, #0
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e00d      	b.n	8003b38 <UART_SetConfig+0x348>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e00a      	b.n	8003b38 <UART_SetConfig+0x348>
 8003b22:	2304      	movs	r3, #4
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e007      	b.n	8003b38 <UART_SetConfig+0x348>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x348>
 8003b2e:	2310      	movs	r3, #16
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e001      	b.n	8003b38 <UART_SetConfig+0x348>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	d15b      	bne.n	8003bfa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d828      	bhi.n	8003b9a <UART_SetConfig+0x3aa>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x360>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b9b 	.word	0x08003b9b
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003b9b 	.word	0x08003b9b
 8003b68:	08003b9b 	.word	0x08003b9b
 8003b6c:	08003b9b 	.word	0x08003b9b
 8003b70:	08003b93 	.word	0x08003b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fdea 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8003b78:	61b8      	str	r0, [r7, #24]
        break;
 8003b7a:	e013      	b.n	8003ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fdfa 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8003b80:	61b8      	str	r0, [r7, #24]
        break;
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <UART_SetConfig+0x4c4>)
 8003b86:	61bb      	str	r3, [r7, #24]
        break;
 8003b88:	e00c      	b.n	8003ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8a:	f7fe fccd 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003b8e:	61b8      	str	r0, [r7, #24]
        break;
 8003b90:	e008      	b.n	8003ba4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b96:	61bb      	str	r3, [r7, #24]
        break;
 8003b98:	e004      	b.n	8003ba4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d074      	beq.n	8003c94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	005a      	lsls	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	d916      	bls.n	8003bf4 <UART_SetConfig+0x404>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d212      	bcs.n	8003bf4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f023 030f 	bic.w	r3, r3, #15
 8003bd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	89fa      	ldrh	r2, [r7, #14]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e04f      	b.n	8003c94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77bb      	strb	r3, [r7, #30]
 8003bf8:	e04c      	b.n	8003c94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bfa:	7ffb      	ldrb	r3, [r7, #31]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d828      	bhi.n	8003c52 <UART_SetConfig+0x462>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x418>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c43 	.word	0x08003c43
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fe fd8e 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8003c30:	61b8      	str	r0, [r7, #24]
        break;
 8003c32:	e013      	b.n	8003c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fd9e 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8003c38:	61b8      	str	r0, [r7, #24]
        break;
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <UART_SetConfig+0x4c4>)
 8003c3e:	61bb      	str	r3, [r7, #24]
        break;
 8003c40:	e00c      	b.n	8003c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fc71 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003c46:	61b8      	str	r0, [r7, #24]
        break;
 8003c48:	e008      	b.n	8003c5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e004      	b.n	8003c5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	77bb      	strb	r3, [r7, #30]
        break;
 8003c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085a      	lsrs	r2, r3, #1
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b0f      	cmp	r3, #15
 8003c7a:	d909      	bls.n	8003c90 <UART_SetConfig+0x4a0>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c82:	d205      	bcs.n	8003c90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	e001      	b.n	8003c94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ca0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40007c00 	.word	0x40007c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400

08003cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01a      	beq.n	8003dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db6:	d10a      	bne.n	8003dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e0c:	f7fd fa5e 	bl	80012cc <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d10e      	bne.n	8003e3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f831 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e027      	b.n	8003e8e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d10e      	bne.n	8003e6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f81b 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e011      	b.n	8003e8e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	e0a7      	b.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	f000 80a3 	beq.w	8003ff8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fd fa0b 	bl	80012cc <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13f      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003edc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	663b      	str	r3, [r7, #96]	; 0x60
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e068      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d050      	beq.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f64:	d148      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e6      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fc2:	623a      	str	r2, [r7, #32]
 8003fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e010      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	429a      	cmp	r2, r3
 8004014:	f43f af48 	beq.w	8003ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3770      	adds	r7, #112	; 0x70
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004024:	b480      	push	{r7}
 8004026:	b097      	sub	sp, #92	; 0x5c
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d10e      	bne.n	8004076 <UART_Start_Receive_IT+0x52>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <UART_Start_Receive_IT+0x48>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800406a:	e02d      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004074:	e028      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <UART_Start_Receive_IT+0x76>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <UART_Start_Receive_IT+0x6c>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	22ff      	movs	r2, #255	; 0xff
 800408a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800408e:	e01b      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	227f      	movs	r2, #127	; 0x7f
 8004094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004098:	e016      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a2:	d10d      	bne.n	80040c0 <UART_Start_Receive_IT+0x9c>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <UART_Start_Receive_IT+0x92>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	227f      	movs	r2, #127	; 0x7f
 80040b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b4:	e008      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	223f      	movs	r2, #63	; 0x3f
 80040ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040be:	e003      	b.n	80040c8 <UART_Start_Receive_IT+0xa4>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2222      	movs	r2, #34	; 0x22
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80040fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d107      	bne.n	8004126 <UART_Start_Receive_IT+0x102>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <UART_Start_Receive_IT+0x184>)
 8004122:	669a      	str	r2, [r3, #104]	; 0x68
 8004124:	e002      	b.n	800412c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a20      	ldr	r2, [pc, #128]	; (80041ac <UART_Start_Receive_IT+0x188>)
 800412a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d019      	beq.n	8004168 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
 8004154:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e6      	bne.n	8004134 <UART_Start_Receive_IT+0x110>
 8004166:	e018      	b.n	800419a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	613b      	str	r3, [r7, #16]
   return(result);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	61bb      	str	r3, [r7, #24]
   return(result);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e6      	bne.n	8004168 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	375c      	adds	r7, #92	; 0x5c
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	080045d5 	.word	0x080045d5
 80041ac:	0800446f 	.word	0x0800446f

080041b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b095      	sub	sp, #84	; 0x54
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
 80041d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e6      	bne.n	80041b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3308      	adds	r3, #8
 80041f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	64bb      	str	r3, [r7, #72]	; 0x48
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800420a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e5      	bne.n	80041ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004222:	2b01      	cmp	r3, #1
 8004224:	d118      	bne.n	8004258 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800426c:	bf00      	nop
 800426e:	3754      	adds	r7, #84	; 0x54
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fa8a 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b08f      	sub	sp, #60	; 0x3c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d14c      	bne.n	800434e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d132      	bne.n	8004326 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	613b      	str	r3, [r7, #16]
   return(result);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004324:	e013      	b.n	800434e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800434e:	bf00      	nop
 8004350:	373c      	adds	r7, #60	; 0x3c
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800435a:	b480      	push	{r7}
 800435c:	b091      	sub	sp, #68	; 0x44
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004366:	2b21      	cmp	r3, #33	; 0x21
 8004368:	d151      	bne.n	800440e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d132      	bne.n	80043dc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	623b      	str	r3, [r7, #32]
   return(result);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438a:	63bb      	str	r3, [r7, #56]	; 0x38
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	617b      	str	r3, [r7, #20]
   return(result);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80043da:	e018      	b.n	800440e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800440e:	bf00      	nop
 8004410:	3744      	adds	r7, #68	; 0x44
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6979      	ldr	r1, [r7, #20]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	613b      	str	r3, [r7, #16]
   return(result);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff f99b 	bl	800379c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004466:	bf00      	nop
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b096      	sub	sp, #88	; 0x58
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800447c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004486:	2b22      	cmp	r3, #34	; 0x22
 8004488:	f040 8098 	bne.w	80045bc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004496:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800449a:	b2d9      	uxtb	r1, r3
 800449c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	400a      	ands	r2, r1
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d17b      	bne.n	80045cc <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e8:	653b      	str	r3, [r7, #80]	; 0x50
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
 80044f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	623b      	str	r3, [r7, #32]
   return(result);
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004526:	633a      	str	r2, [r7, #48]	; 0x30
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	2b01      	cmp	r3, #1
 8004554:	d12e      	bne.n	80045b4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60fb      	str	r3, [r7, #12]
   return(result);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	64bb      	str	r3, [r7, #72]	; 0x48
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	69b9      	ldr	r1, [r7, #24]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	617b      	str	r3, [r7, #20]
   return(result);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d103      	bne.n	80045a4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2210      	movs	r2, #16
 80045a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff f909 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045b2:	e00b      	b.n	80045cc <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fc fda3 	bl	8001100 <HAL_UART_RxCpltCallback>
}
 80045ba:	e007      	b.n	80045cc <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	619a      	str	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	3758      	adds	r7, #88	; 0x58
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b096      	sub	sp, #88	; 0x58
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	2b22      	cmp	r3, #34	; 0x22
 80045ee:	f040 8098 	bne.w	8004722 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004602:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004606:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800460a:	4013      	ands	r3, r2
 800460c:	b29a      	uxth	r2, r3
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d17b      	bne.n	8004732 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004658:	643b      	str	r3, [r7, #64]	; 0x40
 800465a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	61fb      	str	r3, [r7, #28]
   return(result);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	64bb      	str	r3, [r7, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d12e      	bne.n	800471a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	647b      	str	r3, [r7, #68]	; 0x44
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	613b      	str	r3, [r7, #16]
   return(result);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e6      	bne.n	80046c2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d103      	bne.n	800470a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f856 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004718:	e00b      	b.n	8004732 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fcf0 	bl	8001100 <HAL_UART_RxCpltCallback>
}
 8004720:	e007      	b.n	8004732 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0208 	orr.w	r2, r2, #8
 8004730:	619a      	str	r2, [r3, #24]
}
 8004732:	bf00      	nop
 8004734:	3758      	adds	r7, #88	; 0x58
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <atoi>:
 800473a:	220a      	movs	r2, #10
 800473c:	2100      	movs	r1, #0
 800473e:	f000 b8dd 	b.w	80048fc <strtol>
	...

08004744 <__errno>:
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <__errno+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c

08004750 <__libc_init_array>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	4d0d      	ldr	r5, [pc, #52]	; (8004788 <__libc_init_array+0x38>)
 8004754:	4c0d      	ldr	r4, [pc, #52]	; (800478c <__libc_init_array+0x3c>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	2600      	movs	r6, #0
 800475c:	42a6      	cmp	r6, r4
 800475e:	d109      	bne.n	8004774 <__libc_init_array+0x24>
 8004760:	4d0b      	ldr	r5, [pc, #44]	; (8004790 <__libc_init_array+0x40>)
 8004762:	4c0c      	ldr	r4, [pc, #48]	; (8004794 <__libc_init_array+0x44>)
 8004764:	f000 f916 	bl	8004994 <_init>
 8004768:	1b64      	subs	r4, r4, r5
 800476a:	10a4      	asrs	r4, r4, #2
 800476c:	2600      	movs	r6, #0
 800476e:	42a6      	cmp	r6, r4
 8004770:	d105      	bne.n	800477e <__libc_init_array+0x2e>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	f855 3b04 	ldr.w	r3, [r5], #4
 8004778:	4798      	blx	r3
 800477a:	3601      	adds	r6, #1
 800477c:	e7ee      	b.n	800475c <__libc_init_array+0xc>
 800477e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004782:	4798      	blx	r3
 8004784:	3601      	adds	r6, #1
 8004786:	e7f2      	b.n	800476e <__libc_init_array+0x1e>
 8004788:	08004b38 	.word	0x08004b38
 800478c:	08004b38 	.word	0x08004b38
 8004790:	08004b38 	.word	0x08004b38
 8004794:	08004b3c 	.word	0x08004b3c

08004798 <__itoa>:
 8004798:	1e93      	subs	r3, r2, #2
 800479a:	2b22      	cmp	r3, #34	; 0x22
 800479c:	b510      	push	{r4, lr}
 800479e:	460c      	mov	r4, r1
 80047a0:	d904      	bls.n	80047ac <__itoa+0x14>
 80047a2:	2300      	movs	r3, #0
 80047a4:	700b      	strb	r3, [r1, #0]
 80047a6:	461c      	mov	r4, r3
 80047a8:	4620      	mov	r0, r4
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	2a0a      	cmp	r2, #10
 80047ae:	d109      	bne.n	80047c4 <__itoa+0x2c>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	da07      	bge.n	80047c4 <__itoa+0x2c>
 80047b4:	232d      	movs	r3, #45	; 0x2d
 80047b6:	700b      	strb	r3, [r1, #0]
 80047b8:	4240      	negs	r0, r0
 80047ba:	2101      	movs	r1, #1
 80047bc:	4421      	add	r1, r4
 80047be:	f000 f8a7 	bl	8004910 <__utoa>
 80047c2:	e7f1      	b.n	80047a8 <__itoa+0x10>
 80047c4:	2100      	movs	r1, #0
 80047c6:	e7f9      	b.n	80047bc <__itoa+0x24>

080047c8 <itoa>:
 80047c8:	f7ff bfe6 	b.w	8004798 <__itoa>

080047cc <memcpy>:
 80047cc:	440a      	add	r2, r1
 80047ce:	4291      	cmp	r1, r2
 80047d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	4770      	bx	lr
 80047d8:	b510      	push	{r4, lr}
 80047da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d1f9      	bne.n	80047da <memcpy+0xe>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <memset>:
 80047e8:	4402      	add	r2, r0
 80047ea:	4603      	mov	r3, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d100      	bne.n	80047f2 <memset+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	f803 1b01 	strb.w	r1, [r3], #1
 80047f6:	e7f9      	b.n	80047ec <memset+0x4>

080047f8 <_strtol_l.constprop.0>:
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fe:	d001      	beq.n	8004804 <_strtol_l.constprop.0+0xc>
 8004800:	2b24      	cmp	r3, #36	; 0x24
 8004802:	d906      	bls.n	8004812 <_strtol_l.constprop.0+0x1a>
 8004804:	f7ff ff9e 	bl	8004744 <__errno>
 8004808:	2316      	movs	r3, #22
 800480a:	6003      	str	r3, [r0, #0]
 800480c:	2000      	movs	r0, #0
 800480e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004812:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80048f8 <_strtol_l.constprop.0+0x100>
 8004816:	460d      	mov	r5, r1
 8004818:	462e      	mov	r6, r5
 800481a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800481e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004822:	f017 0708 	ands.w	r7, r7, #8
 8004826:	d1f7      	bne.n	8004818 <_strtol_l.constprop.0+0x20>
 8004828:	2c2d      	cmp	r4, #45	; 0x2d
 800482a:	d132      	bne.n	8004892 <_strtol_l.constprop.0+0x9a>
 800482c:	782c      	ldrb	r4, [r5, #0]
 800482e:	2701      	movs	r7, #1
 8004830:	1cb5      	adds	r5, r6, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d05b      	beq.n	80048ee <_strtol_l.constprop.0+0xf6>
 8004836:	2b10      	cmp	r3, #16
 8004838:	d109      	bne.n	800484e <_strtol_l.constprop.0+0x56>
 800483a:	2c30      	cmp	r4, #48	; 0x30
 800483c:	d107      	bne.n	800484e <_strtol_l.constprop.0+0x56>
 800483e:	782c      	ldrb	r4, [r5, #0]
 8004840:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004844:	2c58      	cmp	r4, #88	; 0x58
 8004846:	d14d      	bne.n	80048e4 <_strtol_l.constprop.0+0xec>
 8004848:	786c      	ldrb	r4, [r5, #1]
 800484a:	2310      	movs	r3, #16
 800484c:	3502      	adds	r5, #2
 800484e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004852:	f108 38ff 	add.w	r8, r8, #4294967295
 8004856:	f04f 0c00 	mov.w	ip, #0
 800485a:	fbb8 f9f3 	udiv	r9, r8, r3
 800485e:	4666      	mov	r6, ip
 8004860:	fb03 8a19 	mls	sl, r3, r9, r8
 8004864:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004868:	f1be 0f09 	cmp.w	lr, #9
 800486c:	d816      	bhi.n	800489c <_strtol_l.constprop.0+0xa4>
 800486e:	4674      	mov	r4, lr
 8004870:	42a3      	cmp	r3, r4
 8004872:	dd24      	ble.n	80048be <_strtol_l.constprop.0+0xc6>
 8004874:	f1bc 0f00 	cmp.w	ip, #0
 8004878:	db1e      	blt.n	80048b8 <_strtol_l.constprop.0+0xc0>
 800487a:	45b1      	cmp	r9, r6
 800487c:	d31c      	bcc.n	80048b8 <_strtol_l.constprop.0+0xc0>
 800487e:	d101      	bne.n	8004884 <_strtol_l.constprop.0+0x8c>
 8004880:	45a2      	cmp	sl, r4
 8004882:	db19      	blt.n	80048b8 <_strtol_l.constprop.0+0xc0>
 8004884:	fb06 4603 	mla	r6, r6, r3, r4
 8004888:	f04f 0c01 	mov.w	ip, #1
 800488c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004890:	e7e8      	b.n	8004864 <_strtol_l.constprop.0+0x6c>
 8004892:	2c2b      	cmp	r4, #43	; 0x2b
 8004894:	bf04      	itt	eq
 8004896:	782c      	ldrbeq	r4, [r5, #0]
 8004898:	1cb5      	addeq	r5, r6, #2
 800489a:	e7ca      	b.n	8004832 <_strtol_l.constprop.0+0x3a>
 800489c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80048a0:	f1be 0f19 	cmp.w	lr, #25
 80048a4:	d801      	bhi.n	80048aa <_strtol_l.constprop.0+0xb2>
 80048a6:	3c37      	subs	r4, #55	; 0x37
 80048a8:	e7e2      	b.n	8004870 <_strtol_l.constprop.0+0x78>
 80048aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80048ae:	f1be 0f19 	cmp.w	lr, #25
 80048b2:	d804      	bhi.n	80048be <_strtol_l.constprop.0+0xc6>
 80048b4:	3c57      	subs	r4, #87	; 0x57
 80048b6:	e7db      	b.n	8004870 <_strtol_l.constprop.0+0x78>
 80048b8:	f04f 3cff 	mov.w	ip, #4294967295
 80048bc:	e7e6      	b.n	800488c <_strtol_l.constprop.0+0x94>
 80048be:	f1bc 0f00 	cmp.w	ip, #0
 80048c2:	da05      	bge.n	80048d0 <_strtol_l.constprop.0+0xd8>
 80048c4:	2322      	movs	r3, #34	; 0x22
 80048c6:	6003      	str	r3, [r0, #0]
 80048c8:	4646      	mov	r6, r8
 80048ca:	b942      	cbnz	r2, 80048de <_strtol_l.constprop.0+0xe6>
 80048cc:	4630      	mov	r0, r6
 80048ce:	e79e      	b.n	800480e <_strtol_l.constprop.0+0x16>
 80048d0:	b107      	cbz	r7, 80048d4 <_strtol_l.constprop.0+0xdc>
 80048d2:	4276      	negs	r6, r6
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d0f9      	beq.n	80048cc <_strtol_l.constprop.0+0xd4>
 80048d8:	f1bc 0f00 	cmp.w	ip, #0
 80048dc:	d000      	beq.n	80048e0 <_strtol_l.constprop.0+0xe8>
 80048de:	1e69      	subs	r1, r5, #1
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	e7f3      	b.n	80048cc <_strtol_l.constprop.0+0xd4>
 80048e4:	2430      	movs	r4, #48	; 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1b1      	bne.n	800484e <_strtol_l.constprop.0+0x56>
 80048ea:	2308      	movs	r3, #8
 80048ec:	e7af      	b.n	800484e <_strtol_l.constprop.0+0x56>
 80048ee:	2c30      	cmp	r4, #48	; 0x30
 80048f0:	d0a5      	beq.n	800483e <_strtol_l.constprop.0+0x46>
 80048f2:	230a      	movs	r3, #10
 80048f4:	e7ab      	b.n	800484e <_strtol_l.constprop.0+0x56>
 80048f6:	bf00      	nop
 80048f8:	08004a2e 	.word	0x08004a2e

080048fc <strtol>:
 80048fc:	4613      	mov	r3, r2
 80048fe:	460a      	mov	r2, r1
 8004900:	4601      	mov	r1, r0
 8004902:	4802      	ldr	r0, [pc, #8]	; (800490c <strtol+0x10>)
 8004904:	6800      	ldr	r0, [r0, #0]
 8004906:	f7ff bf77 	b.w	80047f8 <_strtol_l.constprop.0>
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <__utoa>:
 8004910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004912:	4c1f      	ldr	r4, [pc, #124]	; (8004990 <__utoa+0x80>)
 8004914:	b08b      	sub	sp, #44	; 0x2c
 8004916:	4605      	mov	r5, r0
 8004918:	460b      	mov	r3, r1
 800491a:	466e      	mov	r6, sp
 800491c:	f104 0c20 	add.w	ip, r4, #32
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	4637      	mov	r7, r6
 8004926:	c703      	stmia	r7!, {r0, r1}
 8004928:	3408      	adds	r4, #8
 800492a:	4564      	cmp	r4, ip
 800492c:	463e      	mov	r6, r7
 800492e:	d1f7      	bne.n	8004920 <__utoa+0x10>
 8004930:	7921      	ldrb	r1, [r4, #4]
 8004932:	7139      	strb	r1, [r7, #4]
 8004934:	1e91      	subs	r1, r2, #2
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	6038      	str	r0, [r7, #0]
 800493a:	2922      	cmp	r1, #34	; 0x22
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	d904      	bls.n	800494c <__utoa+0x3c>
 8004942:	7019      	strb	r1, [r3, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	4618      	mov	r0, r3
 8004948:	b00b      	add	sp, #44	; 0x2c
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800494c:	1e58      	subs	r0, r3, #1
 800494e:	4684      	mov	ip, r0
 8004950:	fbb5 f7f2 	udiv	r7, r5, r2
 8004954:	fb02 5617 	mls	r6, r2, r7, r5
 8004958:	3628      	adds	r6, #40	; 0x28
 800495a:	446e      	add	r6, sp
 800495c:	460c      	mov	r4, r1
 800495e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004962:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004966:	462e      	mov	r6, r5
 8004968:	42b2      	cmp	r2, r6
 800496a:	f101 0101 	add.w	r1, r1, #1
 800496e:	463d      	mov	r5, r7
 8004970:	d9ee      	bls.n	8004950 <__utoa+0x40>
 8004972:	2200      	movs	r2, #0
 8004974:	545a      	strb	r2, [r3, r1]
 8004976:	1919      	adds	r1, r3, r4
 8004978:	1aa5      	subs	r5, r4, r2
 800497a:	42aa      	cmp	r2, r5
 800497c:	dae3      	bge.n	8004946 <__utoa+0x36>
 800497e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004982:	780e      	ldrb	r6, [r1, #0]
 8004984:	7006      	strb	r6, [r0, #0]
 8004986:	3201      	adds	r2, #1
 8004988:	f801 5901 	strb.w	r5, [r1], #-1
 800498c:	e7f4      	b.n	8004978 <__utoa+0x68>
 800498e:	bf00      	nop
 8004990:	08004a08 	.word	0x08004a08

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
