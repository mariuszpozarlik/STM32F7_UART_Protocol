
Nucleo-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200001dc  08004ca4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004ca4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f804  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000239c  00000000  00000000  0002fa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  00031db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286ad  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7e3  00000000  00000000  0005b6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f371b  00000000  00000000  00067ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b5e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002770  00000000  00000000  0015b660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001dc 	.word	0x200001dc
 8000214:	00000000 	.word	0x00000000
 8000218:	08004914 	.word	0x08004914

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e0 	.word	0x200001e0
 8000234:	08004914 	.word	0x08004914

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b972 	b.w	8000558 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9e08      	ldr	r6, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	4688      	mov	r8, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14b      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029a:	428a      	cmp	r2, r1
 800029c:	4615      	mov	r5, r2
 800029e:	d967      	bls.n	8000370 <__udivmoddi4+0xe4>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0720 	rsb	r7, r2, #32
 80002aa:	fa01 f302 	lsl.w	r3, r1, r2
 80002ae:	fa20 f707 	lsr.w	r7, r0, r7
 80002b2:	4095      	lsls	r5, r2
 80002b4:	ea47 0803 	orr.w	r8, r7, r3
 80002b8:	4094      	lsls	r4, r2
 80002ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002c4:	fa1f fc85 	uxth.w	ip, r5
 80002c8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d0:	fb07 f10c 	mul.w	r1, r7, ip
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x60>
 80002d8:	18eb      	adds	r3, r5, r3
 80002da:	f107 30ff 	add.w	r0, r7, #4294967295
 80002de:	f080 811b 	bcs.w	8000518 <__udivmoddi4+0x28c>
 80002e2:	4299      	cmp	r1, r3
 80002e4:	f240 8118 	bls.w	8000518 <__udivmoddi4+0x28c>
 80002e8:	3f02      	subs	r7, #2
 80002ea:	442b      	add	r3, r5
 80002ec:	1a5b      	subs	r3, r3, r1
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000300:	45a4      	cmp	ip, r4
 8000302:	d909      	bls.n	8000318 <__udivmoddi4+0x8c>
 8000304:	192c      	adds	r4, r5, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x290>
 800030e:	45a4      	cmp	ip, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x290>
 8000314:	3802      	subs	r0, #2
 8000316:	442c      	add	r4, r5
 8000318:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	2700      	movs	r7, #0
 8000322:	b11e      	cbz	r6, 800032c <__udivmoddi4+0xa0>
 8000324:	40d4      	lsrs	r4, r2
 8000326:	2300      	movs	r3, #0
 8000328:	e9c6 4300 	strd	r4, r3, [r6]
 800032c:	4639      	mov	r1, r7
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0xbe>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80eb 	beq.w	8000512 <__udivmoddi4+0x286>
 800033c:	2700      	movs	r7, #0
 800033e:	e9c6 0100 	strd	r0, r1, [r6]
 8000342:	4638      	mov	r0, r7
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f783 	clz	r7, r3
 800034e:	2f00      	cmp	r7, #0
 8000350:	d147      	bne.n	80003e2 <__udivmoddi4+0x156>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xd0>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80fa 	bhi.w	8000550 <__udivmoddi4+0x2c4>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0303 	sbc.w	r3, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4698      	mov	r8, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d0e0      	beq.n	800032c <__udivmoddi4+0xa0>
 800036a:	e9c6 4800 	strd	r4, r8, [r6]
 800036e:	e7dd      	b.n	800032c <__udivmoddi4+0xa0>
 8000370:	b902      	cbnz	r2, 8000374 <__udivmoddi4+0xe8>
 8000372:	deff      	udf	#255	; 0xff
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	2a00      	cmp	r2, #0
 800037a:	f040 808f 	bne.w	800049c <__udivmoddi4+0x210>
 800037e:	1b49      	subs	r1, r1, r5
 8000380:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000384:	fa1f f885 	uxth.w	r8, r5
 8000388:	2701      	movs	r7, #1
 800038a:	fbb1 fcfe 	udiv	ip, r1, lr
 800038e:	0c23      	lsrs	r3, r4, #16
 8000390:	fb0e 111c 	mls	r1, lr, ip, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb08 f10c 	mul.w	r1, r8, ip
 800039c:	4299      	cmp	r1, r3
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x124>
 80003a0:	18eb      	adds	r3, r5, r3
 80003a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x122>
 80003a8:	4299      	cmp	r1, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2bc>
 80003ae:	4684      	mov	ip, r0
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	b2a3      	uxth	r3, r4
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c0:	fb08 f800 	mul.w	r8, r8, r0
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x14c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x14a>
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	f200 80b6 	bhi.w	8000542 <__udivmoddi4+0x2b6>
 80003d6:	4618      	mov	r0, r3
 80003d8:	eba4 0408 	sub.w	r4, r4, r8
 80003dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e0:	e79f      	b.n	8000322 <__udivmoddi4+0x96>
 80003e2:	f1c7 0c20 	rsb	ip, r7, #32
 80003e6:	40bb      	lsls	r3, r7
 80003e8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003ec:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f0:	fa01 f407 	lsl.w	r4, r1, r7
 80003f4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003f8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003fc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000400:	4325      	orrs	r5, r4
 8000402:	fbb3 f9f8 	udiv	r9, r3, r8
 8000406:	0c2c      	lsrs	r4, r5, #16
 8000408:	fb08 3319 	mls	r3, r8, r9, r3
 800040c:	fa1f fa8e 	uxth.w	sl, lr
 8000410:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000414:	fb09 f40a 	mul.w	r4, r9, sl
 8000418:	429c      	cmp	r4, r3
 800041a:	fa02 f207 	lsl.w	r2, r2, r7
 800041e:	fa00 f107 	lsl.w	r1, r0, r7
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b0>
 8000424:	eb1e 0303 	adds.w	r3, lr, r3
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	f080 8087 	bcs.w	800053e <__udivmoddi4+0x2b2>
 8000430:	429c      	cmp	r4, r3
 8000432:	f240 8084 	bls.w	800053e <__udivmoddi4+0x2b2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4473      	add	r3, lr
 800043c:	1b1b      	subs	r3, r3, r4
 800043e:	b2ad      	uxth	r5, r5
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3310 	mls	r3, r8, r0, r3
 8000448:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800044c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000450:	45a2      	cmp	sl, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1da>
 8000454:	eb1e 0404 	adds.w	r4, lr, r4
 8000458:	f100 33ff 	add.w	r3, r0, #4294967295
 800045c:	d26b      	bcs.n	8000536 <__udivmoddi4+0x2aa>
 800045e:	45a2      	cmp	sl, r4
 8000460:	d969      	bls.n	8000536 <__udivmoddi4+0x2aa>
 8000462:	3802      	subs	r0, #2
 8000464:	4474      	add	r4, lr
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	eba4 040a 	sub.w	r4, r4, sl
 8000472:	454c      	cmp	r4, r9
 8000474:	46c2      	mov	sl, r8
 8000476:	464b      	mov	r3, r9
 8000478:	d354      	bcc.n	8000524 <__udivmoddi4+0x298>
 800047a:	d051      	beq.n	8000520 <__udivmoddi4+0x294>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d069      	beq.n	8000554 <__udivmoddi4+0x2c8>
 8000480:	ebb1 050a 	subs.w	r5, r1, sl
 8000484:	eb64 0403 	sbc.w	r4, r4, r3
 8000488:	fa04 fc0c 	lsl.w	ip, r4, ip
 800048c:	40fd      	lsrs	r5, r7
 800048e:	40fc      	lsrs	r4, r7
 8000490:	ea4c 0505 	orr.w	r5, ip, r5
 8000494:	e9c6 5400 	strd	r5, r4, [r6]
 8000498:	2700      	movs	r7, #0
 800049a:	e747      	b.n	800032c <__udivmoddi4+0xa0>
 800049c:	f1c2 0320 	rsb	r3, r2, #32
 80004a0:	fa20 f703 	lsr.w	r7, r0, r3
 80004a4:	4095      	lsls	r5, r2
 80004a6:	fa01 f002 	lsl.w	r0, r1, r2
 80004aa:	fa21 f303 	lsr.w	r3, r1, r3
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	4338      	orrs	r0, r7
 80004b4:	0c01      	lsrs	r1, r0, #16
 80004b6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ba:	fa1f f885 	uxth.w	r8, r5
 80004be:	fb0e 3317 	mls	r3, lr, r7, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb07 f308 	mul.w	r3, r7, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	fa04 f402 	lsl.w	r4, r4, r2
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x256>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004d8:	d22f      	bcs.n	800053a <__udivmoddi4+0x2ae>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d92d      	bls.n	800053a <__udivmoddi4+0x2ae>
 80004de:	3f02      	subs	r7, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	1acb      	subs	r3, r1, r3
 80004e4:	b281      	uxth	r1, r0
 80004e6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ea:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f2:	fb00 f308 	mul.w	r3, r0, r8
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x27e>
 80004fa:	1869      	adds	r1, r5, r1
 80004fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000500:	d217      	bcs.n	8000532 <__udivmoddi4+0x2a6>
 8000502:	428b      	cmp	r3, r1
 8000504:	d915      	bls.n	8000532 <__udivmoddi4+0x2a6>
 8000506:	3802      	subs	r0, #2
 8000508:	4429      	add	r1, r5
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000510:	e73b      	b.n	800038a <__udivmoddi4+0xfe>
 8000512:	4637      	mov	r7, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e709      	b.n	800032c <__udivmoddi4+0xa0>
 8000518:	4607      	mov	r7, r0
 800051a:	e6e7      	b.n	80002ec <__udivmoddi4+0x60>
 800051c:	4618      	mov	r0, r3
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x8c>
 8000520:	4541      	cmp	r1, r8
 8000522:	d2ab      	bcs.n	800047c <__udivmoddi4+0x1f0>
 8000524:	ebb8 0a02 	subs.w	sl, r8, r2
 8000528:	eb69 020e 	sbc.w	r2, r9, lr
 800052c:	3801      	subs	r0, #1
 800052e:	4613      	mov	r3, r2
 8000530:	e7a4      	b.n	800047c <__udivmoddi4+0x1f0>
 8000532:	4660      	mov	r0, ip
 8000534:	e7e9      	b.n	800050a <__udivmoddi4+0x27e>
 8000536:	4618      	mov	r0, r3
 8000538:	e795      	b.n	8000466 <__udivmoddi4+0x1da>
 800053a:	4667      	mov	r7, ip
 800053c:	e7d1      	b.n	80004e2 <__udivmoddi4+0x256>
 800053e:	4681      	mov	r9, r0
 8000540:	e77c      	b.n	800043c <__udivmoddi4+0x1b0>
 8000542:	3802      	subs	r0, #2
 8000544:	442c      	add	r4, r5
 8000546:	e747      	b.n	80003d8 <__udivmoddi4+0x14c>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	442b      	add	r3, r5
 800054e:	e72f      	b.n	80003b0 <__udivmoddi4+0x124>
 8000550:	4638      	mov	r0, r7
 8000552:	e708      	b.n	8000366 <__udivmoddi4+0xda>
 8000554:	4637      	mov	r7, r6
 8000556:	e6e9      	b.n	800032c <__udivmoddi4+0xa0>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <commands>:
#include "commands.h"
#include <string.h>
#include <stdlib.h>

command_t commands(uint8_t* command, buffer_t* measbuff)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09e      	sub	sp, #120	; 0x78
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
	command_t comm = {"", 0};
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2260      	movs	r2, #96	; 0x60
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f8d4 	bl	8004722 <memset>
 800057a:	2300      	movs	r3, #0
 800057c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	if(strcmp(command, "D1") == 0)
 8000580:	4943      	ldr	r1, [pc, #268]	; (8000690 <commands+0x134>)
 8000582:	68b8      	ldr	r0, [r7, #8]
 8000584:	f7ff fe58 	bl	8000238 <strcmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d114      	bne.n	80005b8 <commands+0x5c>
	{
		itoa(getOldestElement(measbuff),  comm.TX_payload, COMM_LEN);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 fb83 	bl	8000c9a <getOldestElement>
 8000594:	4603      	mov	r3, r0
 8000596:	4618      	mov	r0, r3
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	220a      	movs	r2, #10
 800059e:	4619      	mov	r1, r3
 80005a0:	f004 f8b2 	bl	8004708 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe4f 	bl	800024c <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005b6:	e05f      	b.n	8000678 <commands+0x11c>
	}
	else if(strcmp(command, "D2") == 0)
 80005b8:	4936      	ldr	r1, [pc, #216]	; (8000694 <commands+0x138>)
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f7ff fe3c 	bl	8000238 <strcmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d114      	bne.n	80005f0 <commands+0x94>
	{
		itoa(getLastElement(measbuff), comm.TX_payload, COMM_LEN);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fb4e 	bl	8000c68 <getLastElement>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	220a      	movs	r2, #10
 80005d6:	4619      	mov	r1, r3
 80005d8:	f004 f896 	bl	8004708 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe33 	bl	800024c <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005ee:	e043      	b.n	8000678 <commands+0x11c>
	}
	else if(command[0] == 'I')
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b49      	cmp	r3, #73	; 0x49
 80005f6:	d11c      	bne.n	8000632 <commands+0xd6>
	{
		itoa(getElementByIdx(measbuff, atoi(command+1)), comm.TX_payload, COMM_LEN);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f843 	bl	8004688 <atoi>
 8000602:	4603      	mov	r3, r0
 8000604:	b29b      	uxth	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fb5f 	bl	8000ccc <getElementByIdx>
 800060e:	4603      	mov	r3, r0
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	220a      	movs	r2, #10
 8000618:	4619      	mov	r1, r3
 800061a:	f004 f875 	bl	8004708 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe12 	bl	800024c <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29b      	uxth	r3, r3
 800062c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000630:	e022      	b.n	8000678 <commands+0x11c>
	}
	else if(strcmp(command, "CLR") == 0)
 8000632:	4919      	ldr	r1, [pc, #100]	; (8000698 <commands+0x13c>)
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f7ff fdff 	bl	8000238 <strcmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10f      	bne.n	8000660 <commands+0x104>
	{
		bufferClear(measbuff);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 fc1e 	bl	8000e82 <bufferClear>
		comm.len = (uint16_t)strlen("cleared");
 8000646:	2307      	movs	r3, #7
 8000648:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "cleared", comm.len);
 800064c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000650:	461a      	mov	r2, r3
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4911      	ldr	r1, [pc, #68]	; (800069c <commands+0x140>)
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f857 	bl	800470c <memcpy>
 800065e:	e00b      	b.n	8000678 <commands+0x11c>
	}
	else
	{
		comm.len = (uint16_t)strlen("unknown");
 8000660:	2307      	movs	r3, #7
 8000662:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "unknown", comm.len);
 8000666:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800066a:	461a      	mov	r2, r3
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	490b      	ldr	r1, [pc, #44]	; (80006a0 <commands+0x144>)
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f84a 	bl	800470c <memcpy>
	}

	return comm;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2266      	movs	r2, #102	; 0x66
 8000682:	4619      	mov	r1, r3
 8000684:	f004 f842 	bl	800470c <memcpy>
}
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	3778      	adds	r7, #120	; 0x78
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	0800492c 	.word	0x0800492c
 8000694:	08004930 	.word	0x08004930
 8000698:	08004934 	.word	0x08004934
 800069c:	08004938 	.word	0x08004938
 80006a0:	08004940 	.word	0x08004940

080006a4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b68      	ldr	r3, [pc, #416]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a67      	ldr	r2, [pc, #412]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b65      	ldr	r3, [pc, #404]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a61      	ldr	r2, [pc, #388]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b5c      	ldr	r3, [pc, #368]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a5b      	ldr	r2, [pc, #364]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b59      	ldr	r3, [pc, #356]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b56      	ldr	r3, [pc, #344]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a55      	ldr	r2, [pc, #340]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b53      	ldr	r3, [pc, #332]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <MX_GPIO_Init+0x1b8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b47      	ldr	r3, [pc, #284]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000750:	4843      	ldr	r0, [pc, #268]	; (8000860 <MX_GPIO_Init+0x1bc>)
 8000752:	f001 faa9 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	4842      	ldr	r0, [pc, #264]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800075c:	f001 faa4 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	483c      	ldr	r0, [pc, #240]	; (8000868 <MX_GPIO_Init+0x1c4>)
 8000778:	f001 f8ec 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800077c:	2332      	movs	r3, #50	; 0x32
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4834      	ldr	r0, [pc, #208]	; (8000868 <MX_GPIO_Init+0x1c4>)
 8000798:	f001 f8dc 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800079c:	2386      	movs	r3, #134	; 0x86
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ac:	230b      	movs	r3, #11
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	482d      	ldr	r0, [pc, #180]	; (800086c <MX_GPIO_Init+0x1c8>)
 80007b8:	f001 f8cc 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_GPIO_Init+0x1bc>)
 80007d6:	f001 f8bd 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x1bc>)
 80007f8:	f001 f8ac 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <MX_GPIO_Init+0x1c0>)
 8000814:	f001 f89e 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800082c:	f001 f892 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000830:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000842:	230b      	movs	r3, #11
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800084e:	f001 f881 	bl	8001954 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400
 8000864:	40021800 	.word	0x40021800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b0f1      	sub	sp, #452	; 0x1c4
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fcb4 	bl	80011e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8b1 	bl	80009e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff11 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000882:	f000 fb9d 	bl	8000fc0 <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
  bufferInit(&measbuff); //fill measurement buffer with dummy data
 8000886:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800088a:	4618      	mov	r0, r3
 800088c:	f000 face 	bl	8000e2c <bufferInit>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000896:	e01c      	b.n	80008d2 <main+0x62>
  {
	  bufferAddElement(&measbuff, (i+1234)*(i%1548));
 8000898:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800089c:	f203 41d2 	addw	r1, r3, #1234	; 0x4d2
 80008a0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80008a4:	0893      	lsrs	r3, r2, #2
 80008a6:	4847      	ldr	r0, [pc, #284]	; (80009c4 <main+0x154>)
 80008a8:	fba0 0303 	umull	r0, r3, r0, r3
 80008ac:	09db      	lsrs	r3, r3, #7
 80008ae:	f240 600c 	movw	r0, #1548	; 0x60c
 80008b2:	fb00 f303 	mul.w	r3, r0, r3
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	fb03 f201 	mul.w	r2, r3, r1
 80008bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fa4a 	bl	8000d5c <bufferAddElement>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 80008c8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008cc:	3301      	adds	r3, #1
 80008ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80008d2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008d6:	2b45      	cmp	r3, #69	; 0x45
 80008d8:	d9de      	bls.n	8000898 <main+0x28>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t addr = 0x08010010;
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <main+0x158>)
 80008dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

  if(HAL_OK == HAL_FLASH_Unlock())
 80008e0:	f000 fedc 	bl	800169c <HAL_FLASH_Unlock>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d129      	bne.n	800093e <main+0xce>
  {
	 //HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ptr, 0x00000000);
	  int i = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  char* n = "Hello flash memory!!!";
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <main+0x15c>)
 80008f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  for(;i < strlen(n); ++i)
 80008f6:	e017      	b.n	8000928 <main+0xb8>
	  {
		  //FLASH_Erase_Sector(FLASH_SECTOR_20, FLASH_VOLTAGE_RANGE_3);
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, n[i]);
 80008f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80008fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000900:	18d1      	adds	r1, r2, r3
 8000902:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000906:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f04f 0400 	mov.w	r4, #0
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fe63 	bl	80015e4 <HAL_FLASH_Program>
	  for(;i < strlen(n); ++i)
 800091e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000922:	3301      	adds	r3, #1
 8000924:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000928:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 800092c:	f7ff fc8e 	bl	800024c <strlen>
 8000930:	4602      	mov	r2, r0
 8000932:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000936:	429a      	cmp	r2, r3
 8000938:	d8de      	bhi.n	80008f8 <main+0x88>
	  }

	  HAL_FLASH_Lock();
 800093a:	f000 fed1 	bl	80016e0 <HAL_FLASH_Lock>
  }

  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RX.c, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	4923      	ldr	r1, [pc, #140]	; (80009d0 <main+0x160>)
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0x164>)
 8000944:	f002 fbb4 	bl	80030b0 <HAL_UART_Receive_IT>


  while(1)
  {
	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <main+0x168>)
 800094a:	7d1b      	ldrb	r3, [r3, #20]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b01      	cmp	r3, #1
 8000950:	d1fa      	bne.n	8000948 <main+0xd8>
	{
		myFrame = prarseRxBuffer();
 8000952:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000956:	463b      	mov	r3, r7
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8f7 	bl	8000b4c <prarseRxBuffer>
 800095e:	463a      	mov	r2, r7
 8000960:	4623      	mov	r3, r4
 8000962:	4614      	mov	r4, r2
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	6861      	ldr	r1, [r4, #4]
 8000968:	68a2      	ldr	r2, [r4, #8]
 800096a:	c307      	stmia	r3!, {r0, r1, r2}
 800096c:	89a2      	ldrh	r2, [r4, #12]
 800096e:	7ba1      	ldrb	r1, [r4, #14]
 8000970:	801a      	strh	r2, [r3, #0]
 8000972:	460a      	mov	r2, r1
 8000974:	709a      	strb	r2, [r3, #2]
		if(myFrame.frameOK)
 8000976:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d01a      	beq.n	80009b6 <main+0x146>
		{
			command_t co = commands(myFrame.command, &measbuff);
 8000980:	f107 0014 	add.w	r0, r7, #20
 8000984:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000988:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800098c:	3304      	adds	r3, #4
 800098e:	4619      	mov	r1, r3
 8000990:	f7ff fde4 	bl	800055c <commands>
			HAL_UART_Transmit_IT(&huart3, co.TX_payload, co.len);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x164>)
 80009a4:	f002 fb16 	bl	8002fd4 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart3, '/n', 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f642 716e 	movw	r1, #12142	; 0x2f6e
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <main+0x164>)
 80009b0:	f002 fb10 	bl	8002fd4 <HAL_UART_Transmit_IT>
 80009b4:	e7c8      	b.n	8000948 <main+0xd8>
		}
		else
		{
			HAL_UART_Transmit_IT(&huart3, (const uint8_t*)"frame Error\n", strlen("frame Error\n"));
 80009b6:	220c      	movs	r2, #12
 80009b8:	4908      	ldr	r1, [pc, #32]	; (80009dc <main+0x16c>)
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <main+0x164>)
 80009bc:	f002 fb0a 	bl	8002fd4 <HAL_UART_Transmit_IT>
	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 80009c0:	e7c2      	b.n	8000948 <main+0xd8>
 80009c2:	bf00      	nop
 80009c4:	54abfd5b 	.word	0x54abfd5b
 80009c8:	08010010 	.word	0x08010010
 80009cc:	08004948 	.word	0x08004948
 80009d0:	2000020d 	.word	0x2000020d
 80009d4:	20000210 	.word	0x20000210
 80009d8:	200001f8 	.word	0x200001f8
 80009dc:	08004960 	.word	0x08004960

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0b8      	sub	sp, #224	; 0xe0
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009ea:	2234      	movs	r2, #52	; 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fe97 	bl	8004722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2290      	movs	r2, #144	; 0x90
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 fe88 	bl	8004722 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a12:	f001 f963 	bl	8001cdc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <SystemClock_Config+0x120>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a39      	ldr	r2, [pc, #228]	; (8000b00 <SystemClock_Config+0x120>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <SystemClock_Config+0x120>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <SystemClock_Config+0x124>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <SystemClock_Config+0x124>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <SystemClock_Config+0x124>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a6c:	2360      	movs	r3, #96	; 0x60
 8000a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f98a 	bl	8001d9c <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a8e:	f000 f83d 	bl	8000b0c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a92:	f001 f933 	bl	8001cfc <HAL_PWREx_EnableOverDrive>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a9c:	f000 f836 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fc16 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000ad2:	f000 f81b 	bl	8000b0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <SystemClock_Config+0x128>)
 8000ad8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fdfd 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000af4:	f000 f80a 	bl	8000b0c <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	37e0      	adds	r7, #224	; 0xe0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000
 8000b08:	00200100 	.word	0x00200100

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <RXbufferClear>:
#include "protocol.h"
#include "stdlib.h"

void RXbufferClear(uint8_t* buff, int size) //memset
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
	while (size)
 8000b24:	e008      	b.n	8000b38 <RXbufferClear+0x1e>
	{
		*buff = '\0';
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
		size--;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	603b      	str	r3, [r7, #0]
		buff++;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3301      	adds	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
	while (size)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f3      	bne.n	8000b26 <RXbufferClear+0xc>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <prarseRxBuffer>:
//wystepowania znaków $ oraz #, tzn ramka posiada prawidłowy format: $_________#
//              "$       5            7             05                    12345         255             #
//               ^       ^            ^             ^                     ^             ^               ^
//      znak poczatku,  adres zroda,  adres celu,  ilość danych w ramce,  dane ramki, suma konrolna   znak konca ramki
framecontent prarseRxBuffer()
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b08d      	sub	sp, #52	; 0x34
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	framecontent RxFrame;
	uint8_t l_checksum = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t tempstring[COMMAND_LEN] = "";
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	809a      	strh	r2, [r3, #4]
	RxFrame.frameOK = false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	763b      	strb	r3, [r7, #24]
	if(*RX.RX_Buffer == '$')
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <prarseRxBuffer+0x114>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b24      	cmp	r3, #36	; 0x24
 8000b74:	d161      	bne.n	8000c3a <prarseRxBuffer+0xee>
	{
		RxFrame.src_address = RX.RX_Buffer[1] - 48;
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <prarseRxBuffer+0x114>)
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3b30      	subs	r3, #48	; 0x30
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	767b      	strb	r3, [r7, #25]
		RxFrame.dst_address = RX.RX_Buffer[2] - 48;
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <prarseRxBuffer+0x114>)
 8000b84:	789b      	ldrb	r3, [r3, #2]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3b30      	subs	r3, #48	; 0x30
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	76bb      	strb	r3, [r7, #26]
		memcpy(tempstring, (const char*)&RX.RX_Buffer[3], 2);
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <prarseRxBuffer+0x114>)
 8000b90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	81bb      	strh	r3, [r7, #12]
		RxFrame.data_count = atoi((const char*)tempstring);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 fd73 	bl	8004688 <atoi>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	76fb      	strb	r3, [r7, #27]
		if(RxFrame.data_count <= 10)
 8000ba8:	7efb      	ldrb	r3, [r7, #27]
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d845      	bhi.n	8000c3a <prarseRxBuffer+0xee>
		{
			RXbufferClear(tempstring, COMMAND_LEN);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	210a      	movs	r1, #10
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffb0 	bl	8000b1a <RXbufferClear>
			RXbufferClear(RxFrame.command, COMMAND_LEN);
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffa9 	bl	8000b1a <RXbufferClear>
			memcpy(RxFrame.command, (const char*)&RX.RX_Buffer[5], RxFrame.data_count);
 8000bc8:	7efb      	ldrb	r3, [r7, #27]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	4924      	ldr	r1, [pc, #144]	; (8000c64 <prarseRxBuffer+0x118>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fd99 	bl	800470c <memcpy>
			memcpy(tempstring, (const char*)&RX.RX_Buffer[5] + RxFrame.data_count, 3);
 8000bda:	7efb      	ldrb	r3, [r7, #27]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <prarseRxBuffer+0x118>)
 8000be0:	18d1      	adds	r1, r2, r3
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2203      	movs	r2, #3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fd8f 	bl	800470c <memcpy>
			RxFrame.checksum = atoi((const char*)tempstring);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fd48 	bl	8004688 <atoi>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c04:	e00c      	b.n	8000c20 <prarseRxBuffer+0xd4>
			{
				l_checksum += RX.RX_Buffer[5 + offset];
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	3305      	adds	r3, #5
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <prarseRxBuffer+0x114>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c14:	4413      	add	r3, r2
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c20:	7efb      	ldrb	r3, [r7, #27]
 8000c22:	461a      	mov	r2, r3
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	4293      	cmp	r3, r2
 8000c28:	dbed      	blt.n	8000c06 <prarseRxBuffer+0xba>
			}
			if (l_checksum == RxFrame.checksum)
 8000c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c2e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d101      	bne.n	8000c3a <prarseRxBuffer+0xee>
			{
				RxFrame.frameOK = true;
 8000c36:	2301      	movs	r3, #1
 8000c38:	763b      	strb	r3, [r7, #24]
			}
		}
	}
	RX.RX_Frame_Cplt = 0;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <prarseRxBuffer+0x114>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	751a      	strb	r2, [r3, #20]
	return RxFrame;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	461c      	mov	r4, r3
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c4a:	6020      	str	r0, [r4, #0]
 8000c4c:	6061      	str	r1, [r4, #4]
 8000c4e:	60a2      	str	r2, [r4, #8]
 8000c50:	881a      	ldrh	r2, [r3, #0]
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	81a2      	strh	r2, [r4, #12]
 8000c56:	73a3      	strb	r3, [r4, #14]
}
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	3734      	adds	r7, #52	; 0x34
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	200001f8 	.word	0x200001f8
 8000c64:	200001fd 	.word	0x200001fd

08000c68 <getLastElement>:
#include <inttypes.h>
#include "ringbuff.h"
#include "stdlib.h"

uint32_t getLastElement(buffer_t* buff)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <getLastElement+0x24>
	{
		ret = *buff->begin_handler;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <getOldestElement>:

uint32_t getOldestElement(buffer_t* buff)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <getOldestElement+0x24>
	{
		ret = *buff->end_handler;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <getElementByIdx>:

uint32_t getElementByIdx(buffer_t* buff, uint16_t idx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
	uint32_t ret = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	uint32_t temp_adr = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
	if (idx < RING_BUF_SIZE &&
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	2b45      	cmp	r3, #69	; 0x45
 8000ce4:	d833      	bhi.n	8000d4e <getElementByIdx+0x82>
		buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
	if (idx < RING_BUF_SIZE &&
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d02b      	beq.n	8000d4e <getElementByIdx+0x82>
	{
		if ((buff->end_handler + idx) >= (buff->elements + RING_BUF_SIZE))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	441a      	add	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3308      	adds	r3, #8
 8000d04:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d319      	bcc.n	8000d40 <getElementByIdx+0x74>
		{
			temp_adr = (uint32_t)(buff->end_handler + idx) % (uint32_t)(buff->elements + RING_BUF_SIZE - 1);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8000d1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d22:	fb02 f201 	mul.w	r2, r2, r1
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
			ret = *(uint32_t*)(buff->elements + (temp_adr / 4) - 1);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f103 0208 	add.w	r2, r3, #8
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	3b04      	subs	r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e006      	b.n	8000d4e <getElementByIdx+0x82>
		}
		else
		{
			ret = *(buff->end_handler + idx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	return ret;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <bufferAddElement>:


void bufferAddElement(buffer_t* buff, uint32_t element)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	if (BUFF_NOT_OVF == buff->flags.buffer_overflow_flag)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d12c      	bne.n	8000dd0 <bufferAddElement+0x74>
	{
		if (BUFF_EMPTY == buff->flags.clr_flag)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10b      	bne.n	8000d9e <bufferAddElement+0x42>
		{
			*(buff->begin_handler) = element;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
			buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
		{
			buff->end_handler = buff->elements;
		}
		*(buff->begin_handler) = element;
	}
}
 8000d9c:	e040      	b.n	8000e20 <bufferAddElement+0xc4>
			buff->begin_handler++;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1d1a      	adds	r2, r3, #4
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
			*(buff->begin_handler) = element;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	601a      	str	r2, [r3, #0]
			if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE - 1))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3308      	adds	r3, #8
 8000db8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d32f      	bcc.n	8000e20 <bufferAddElement+0xc4>
				buff->flags.buffer_overflow_flag = BUFF_OVF;
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
}
 8000dce:	e027      	b.n	8000e20 <bufferAddElement+0xc4>
		buff->end_handler++;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	1d1a      	adds	r2, r3, #4
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
		buff->begin_handler++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	601a      	str	r2, [r3, #0]
		if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d304      	bcc.n	8000dfe <bufferAddElement+0xa2>
			buff->begin_handler = buff->elements;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f103 0208 	add.w	r2, r3, #8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
		if (buff->end_handler >= buff->elements + (RING_BUF_SIZE))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3308      	adds	r3, #8
 8000e06:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d304      	bcc.n	8000e18 <bufferAddElement+0xbc>
			buff->end_handler = buff->elements;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f103 0208 	add.w	r2, r3, #8
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
		*(buff->begin_handler) = element;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <bufferInit>:

uint8_t bufferInit(buffer_t* buff)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

	buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	buff->flags.buffer_overflow_flag = BUFF_NOT_OVF;
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e4c:	f36f 0341 	bfc	r3, #1, #1
 8000e50:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	if (OK == bufferClear(buff))
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f814 	bl	8000e82 <bufferClear>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10b      	bne.n	8000e78 <bufferInit+0x4c>
	{
		buff->begin_handler = buff->elements;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f103 0208 	add.w	r2, r3, #8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
		buff->end_handler = buff->elements;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f103 0208 	add.w	r2, r3, #8
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	605a      	str	r2, [r3, #4]

		ret = OK;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <bufferClear>:

uint8_t bufferClear(buffer_t* buff)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b085      	sub	sp, #20
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	if (BUFF_NOT_EMPTY == buff->flags.clr_flag)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01f      	beq.n	8000ede <bufferClear+0x5c>
	{
		uint16_t idx = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	81bb      	strh	r3, [r7, #12]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	81bb      	strh	r3, [r7, #12]
 8000ea6:	e008      	b.n	8000eba <bufferClear+0x38>
		{
			buff->elements[idx] = 0;
 8000ea8:	89ba      	ldrh	r2, [r7, #12]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3202      	adds	r2, #2
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000eb4:	89bb      	ldrh	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	81bb      	strh	r3, [r7, #12]
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	2b45      	cmp	r3, #69	; 0x45
 8000ebe:	d9f3      	bls.n	8000ea8 <bufferClear+0x26>
		}
		buff->begin_handler = NULL;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
		buff->end_handler = NULL;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]

		buff->flags.clr_flag = BUFF_EMPTY;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000ed2:	f36f 0300 	bfc	r3, #0, #1
 8000ed6:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120

		ret = OK;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f96c 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <USART3_IRQHandler+0x10>)
 8000f8e:	f002 f8dd 	bl	800314c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000210 	.word	0x20000210

08000f9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <MX_USART3_UART_Init+0x5c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8001004:	f001 ff98 	bl	8002f38 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800100e:	f7ff fd7d 	bl	8000b0c <Error_Handler>
  }

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000210 	.word	0x20000210
 800101c:	40004800 	.word	0x40004800

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_UART_MspInit+0x8c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d130      	bne.n	80010a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x90>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001084:	2307      	movs	r3, #7
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_UART_MspInit+0x94>)
 8001090:	f000 fc60 	bl	8001954 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2027      	movs	r0, #39	; 0x27
 800109a:	f000 f9da 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800109e:	2027      	movs	r0, #39	; 0x27
 80010a0:	f000 f9f3 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40004800 	.word	0x40004800
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020c00 	.word	0x40020c00

080010b8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	//char tmp_char = c;
	//'$', '5', '7', '0', '2', 'D', '5', '1', '2', '1', '#'
	if (huart1->Instance == USART3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <HAL_UART_RxCpltCallback+0xc8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d156      	bne.n	8001178 <HAL_UART_RxCpltCallback+0xc0>
	{
		if(RX.RX_Buff_Idx > RX_BUFF_SIZE - 1)
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010cc:	7cdb      	ldrb	r3, [r3, #19]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d902      	bls.n	80010da <HAL_UART_RxCpltCallback+0x22>
		{
			RX.RX_Buff_Idx = 0;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	74da      	strb	r2, [r3, #19]
		}
		if (RX.c == '$')
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010dc:	7d5b      	ldrb	r3, [r3, #21]
 80010de:	2b24      	cmp	r3, #36	; 0x24
 80010e0:	d11e      	bne.n	8001120 <HAL_UART_RxCpltCallback+0x68>
		{
			RX.RX_Frame_Cplt = 0;
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	751a      	strb	r2, [r3, #20]
			RX.RX_Buff_Idx = 0;
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	74da      	strb	r2, [r3, #19]
			RXbufferClear(RX.RX_Buffer, RX_BUFF_SIZE);
 80010ee:	2113      	movs	r1, #19
 80010f0:	4824      	ldr	r0, [pc, #144]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010f2:	f7ff fd12 	bl	8000b1a <RXbufferClear>
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 80010f8:	7cdb      	ldrb	r3, [r3, #19]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001100:	7d59      	ldrb	r1, [r3, #21]
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001104:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx++;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001108:	7cdb      	ldrb	r3, [r3, #19]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001112:	74da      	strb	r2, [r3, #19]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	491c      	ldr	r1, [pc, #112]	; (8001188 <HAL_UART_RxCpltCallback+0xd0>)
 8001118:	481c      	ldr	r0, [pc, #112]	; (800118c <HAL_UART_RxCpltCallback+0xd4>)
 800111a:	f001 ffc9 	bl	80030b0 <HAL_UART_Receive_IT>
			return;
 800111e:	e02b      	b.n	8001178 <HAL_UART_RxCpltCallback+0xc0>
		}
		else if (RX.c == '#')
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001122:	7d5b      	ldrb	r3, [r3, #21]
 8001124:	2b23      	cmp	r3, #35	; 0x23
 8001126:	d113      	bne.n	8001150 <HAL_UART_RxCpltCallback+0x98>
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 800112a:	7cdb      	ldrb	r3, [r3, #19]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001132:	7d59      	ldrb	r1, [r3, #21]
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001136:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx = 0;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 800113a:	2200      	movs	r2, #0
 800113c:	74da      	strb	r2, [r3, #19]
			RX.RX_Frame_Cplt = 1;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001140:	2201      	movs	r2, #1
 8001142:	751a      	strb	r2, [r3, #20]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 8001144:	2201      	movs	r2, #1
 8001146:	4910      	ldr	r1, [pc, #64]	; (8001188 <HAL_UART_RxCpltCallback+0xd0>)
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <HAL_UART_RxCpltCallback+0xd4>)
 800114a:	f001 ffb1 	bl	80030b0 <HAL_UART_Receive_IT>
			return;
 800114e:	e013      	b.n	8001178 <HAL_UART_RxCpltCallback+0xc0>
		}
		else
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001152:	7cdb      	ldrb	r3, [r3, #19]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 800115a:	7d59      	ldrb	r1, [r3, #21]
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	5499      	strb	r1, [r3, r2]
		}
		RX.RX_Buff_Idx++;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 8001162:	7cdb      	ldrb	r3, [r3, #19]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_UART_RxCpltCallback+0xcc>)
 800116c:	74da      	strb	r2, [r3, #19]
		HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	4905      	ldr	r1, [pc, #20]	; (8001188 <HAL_UART_RxCpltCallback+0xd0>)
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <HAL_UART_RxCpltCallback+0xd4>)
 8001174:	f001 ff9c 	bl	80030b0 <HAL_UART_Receive_IT>
	}
}
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004800 	.word	0x40004800
 8001184:	200001f8 	.word	0x200001f8
 8001188:	2000020d 	.word	0x2000020d
 800118c:	20000210 	.word	0x20000210

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001196:	490e      	ldr	r1, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ac:	4c0b      	ldr	r4, [pc, #44]	; (80011dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ba:	f7ff feef 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f003 fa67 	bl	8004690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fb55 	bl	8000870 <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80011d4:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 80011d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80011dc:	200002b4 	.word	0x200002b4

080011e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>

080011e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f928 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f805 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff fe7b 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f943 	bl	80014a6 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f90b 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000294 	.word	0x20000294

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000294 	.word	0x20000294

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	05fa0000 	.word	0x05fa0000

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff3e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff feda 	bl	8001284 <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d008      	beq.n	80014f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e052      	b.n	8001596 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0216 	bic.w	r2, r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800150e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <HAL_DMA_Abort+0x62>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001540:	e013      	b.n	800156a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001542:	f7ff fe9f 	bl	8001284 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b05      	cmp	r3, #5
 800154e:	d90c      	bls.n	800156a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2220      	movs	r2, #32
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2203      	movs	r2, #3
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e015      	b.n	8001596 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e4      	bne.n	8001542 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	223f      	movs	r2, #63	; 0x3f
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d004      	beq.n	80015bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e00c      	b.n	80015d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2205      	movs	r2, #5
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_FLASH_Program+0xb0>)
 80015f8:	7d1b      	ldrb	r3, [r3, #20]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_FLASH_Program+0x1e>
 80015fe:	2302      	movs	r3, #2
 8001600:	e043      	b.n	800168a <HAL_FLASH_Program+0xa6>
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_FLASH_Program+0xb0>)
 8001604:	2201      	movs	r2, #1
 8001606:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001608:	f24c 3050 	movw	r0, #50000	; 0xc350
 800160c:	f000 f878 	bl	8001700 <FLASH_WaitForLastOperation>
 8001610:	4603      	mov	r3, r0
 8001612:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d133      	bne.n	8001682 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d823      	bhi.n	8001668 <HAL_FLASH_Program+0x84>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <HAL_FLASH_Program+0x44>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001639 	.word	0x08001639
 800162c:	08001645 	.word	0x08001645
 8001630:	08001651 	.word	0x08001651
 8001634:	0800165d 	.word	0x0800165d
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001638:	783b      	ldrb	r3, [r7, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f000 f91b 	bl	8001878 <FLASH_Program_Byte>
        break;
 8001642:	e012      	b.n	800166a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001644:	883b      	ldrh	r3, [r7, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	68b8      	ldr	r0, [r7, #8]
 800164a:	f000 f8ef 	bl	800182c <FLASH_Program_HalfWord>
        break;
 800164e:	e00c      	b.n	800166a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f000 f8c5 	bl	80017e4 <FLASH_Program_Word>
        break;
 800165a:	e006      	b.n	800166a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800165c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f000 f88d 	bl	8001780 <FLASH_Program_DoubleWord>
        break;
 8001666:	e000      	b.n	800166a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001668:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800166a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800166e:	f000 f847 	bl	8001700 <FLASH_WaitForLastOperation>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_FLASH_Program+0xb4>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_FLASH_Program+0xb4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_FLASH_Program+0xb0>)
 8001684:	2200      	movs	r2, #0
 8001686:	751a      	strb	r2, [r3, #20]

  return status;
 8001688:	7dfb      	ldrb	r3, [r7, #23]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000298 	.word	0x20000298
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_FLASH_Unlock+0x38>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da0b      	bge.n	80016c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_FLASH_Unlock+0x38>)
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_FLASH_Unlock+0x3c>)
 80016b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_FLASH_Unlock+0x38>)
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_FLASH_Unlock+0x40>)
 80016b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_FLASH_Unlock+0x38>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da01      	bge.n	80016c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40023c00 	.word	0x40023c00
 80016d8:	45670123 	.word	0x45670123
 80016dc:	cdef89ab 	.word	0xcdef89ab

080016e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_FLASH_Lock+0x1c>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_FLASH_Lock+0x1c>)
 80016ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40023c00 	.word	0x40023c00

08001700 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <FLASH_WaitForLastOperation+0x78>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001712:	f7ff fdb7 	bl	8001284 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001718:	e010      	b.n	800173c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d00c      	beq.n	800173c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <FLASH_WaitForLastOperation+0x38>
 8001728:	f7ff fdac 	bl	8001284 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	d201      	bcs.n	800173c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e019      	b.n	8001770 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <FLASH_WaitForLastOperation+0x7c>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e8      	bne.n	800171a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <FLASH_WaitForLastOperation+0x7c>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001754:	f000 f8b4 	bl	80018c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e009      	b.n	8001770 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <FLASH_WaitForLastOperation+0x7c>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <FLASH_WaitForLastOperation+0x7c>)
 800176a:	2201      	movs	r2, #1
 800176c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
  
}  
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000298 	.word	0x20000298
 800177c:	40023c00 	.word	0x40023c00

08001780 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001780:	b490      	push	{r4, r7}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 8001792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001796:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 800179e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <FLASH_Program_DoubleWord+0x60>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80017b6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80017ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f04f 0400 	mov.w	r4, #0
 80017c6:	0013      	movs	r3, r2
 80017c8:	2400      	movs	r4, #0
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	3204      	adds	r2, #4
 80017ce:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017d0:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc90      	pop	{r4, r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <FLASH_Program_Word+0x44>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <FLASH_Program_Word+0x44>)
 80017f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <FLASH_Program_Word+0x44>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <FLASH_Program_Word+0x44>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <FLASH_Program_Word+0x44>)
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <FLASH_Program_Word+0x44>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40023c00 	.word	0x40023c00

0800182c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 800183e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001842:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <FLASH_Program_HalfWord+0x48>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <FLASH_Program_Byte+0x44>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <FLASH_Program_Byte+0x44>)
 800188a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <FLASH_Program_Byte+0x44>)
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <FLASH_Program_Byte+0x44>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <FLASH_Program_Byte+0x44>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <FLASH_Program_Byte+0x44>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <FLASH_SetErrorCode+0x8c>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <FLASH_SetErrorCode+0x90>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <FLASH_SetErrorCode+0x90>)
 80018da:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <FLASH_SetErrorCode+0x8c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <FLASH_SetErrorCode+0x90>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <FLASH_SetErrorCode+0x90>)
 80018f2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <FLASH_SetErrorCode+0x8c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <FLASH_SetErrorCode+0x90>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <FLASH_SetErrorCode+0x90>)
 800190a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <FLASH_SetErrorCode+0x8c>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <FLASH_SetErrorCode+0x90>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <FLASH_SetErrorCode+0x90>)
 8001922:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <FLASH_SetErrorCode+0x8c>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <FLASH_SetErrorCode+0x90>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <FLASH_SetErrorCode+0x90>)
 800193a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <FLASH_SetErrorCode+0x8c>)
 800193e:	22f2      	movs	r2, #242	; 0xf2
 8001940:	60da      	str	r2, [r3, #12]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023c00 	.word	0x40023c00
 8001950:	20000298 	.word	0x20000298

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e175      	b.n	8001c60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8164 	bne.w	8001c5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x56>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80be 	beq.w	8001c5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_GPIO_Init+0x320>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <HAL_GPIO_Init+0x320>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_GPIO_Init+0x320>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a57      	ldr	r2, [pc, #348]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d037      	beq.n	8001b92 <HAL_GPIO_Init+0x23e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <HAL_GPIO_Init+0x32c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0x23a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a55      	ldr	r2, [pc, #340]	; (8001c84 <HAL_GPIO_Init+0x330>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x236>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x232>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a53      	ldr	r2, [pc, #332]	; (8001c8c <HAL_GPIO_Init+0x338>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x22e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x33c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x22a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x340>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_GPIO_Init+0x344>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x348>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x34c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	e012      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e010      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00e      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e00c      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e00a      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ba4:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f ae86 	bls.w	8001974 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3724      	adds	r7, #36	; 0x24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800
 8001c98:	40021c00 	.word	0x40021c00
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40022400 	.word	0x40022400
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40007000 	.word	0x40007000

08001cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2a:	f7ff faab 	bl	8001284 <HAL_GetTick>
 8001d2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d30:	e009      	b.n	8001d46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d32:	f7ff faa7 	bl	8001284 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d40:	d901      	bls.n	8001d46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e022      	b.n	8001d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d1ee      	bne.n	8001d32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d60:	f7ff fa90 	bl	8001284 <HAL_GetTick>
 8001d64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d66:	e009      	b.n	8001d7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d68:	f7ff fa8c 	bl	8001284 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d76:	d901      	bls.n	8001d7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e007      	b.n	8001d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d88:	d1ee      	bne.n	8001d68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e29b      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc0:	4b96      	ldr	r3, [pc, #600]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dcc:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d112      	bne.n	8001dfe <HAL_RCC_OscConfig+0x62>
 8001dd8:	4b90      	ldr	r3, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d06c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x130>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d168      	bne.n	8001ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e275      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7a>
 8001e08:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a83      	ldr	r2, [pc, #524]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e02e      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x9c>
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7b      	ldr	r2, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a75      	ldr	r2, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a72      	ldr	r2, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xd8>
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6b      	ldr	r2, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fa02 	bl	8001284 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9fe 	bl	8001284 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e229      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f9ee 	bl	8001284 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f9ea 	bl	8001284 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e215      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b57      	ldr	r3, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x110>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d069      	beq.n	8001fae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eda:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x190>
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1e9      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	493d      	ldr	r1, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e040      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f9a0 	bl	8001284 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f99c 	bl	8001284 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1c7      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4929      	ldr	r1, [pc, #164]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f97c 	bl	8001284 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff f978 	bl	8001284 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1a3      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d038      	beq.n	800202c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff f959 	bl	8001284 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f955 	bl	8001284 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e180      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x23a>
 8001ff4:	e01a      	b.n	800202c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f93f 	bl	8001284 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200a:	f7ff f93b 	bl	8001284 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d903      	bls.n	8002020 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e166      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
 800201c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ee      	bne.n	800200a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a4 	beq.w	8002182 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b8c      	ldr	r3, [pc, #560]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a88      	ldr	r2, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	4b83      	ldr	r3, [pc, #524]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800206e:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7f      	ldr	r2, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f903 	bl	8001284 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff f8ff 	bl	8001284 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e12a      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4d4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x31a>
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a6f      	ldr	r2, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x33c>
 80020be:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a67      	ldr	r2, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e01c      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_OscConfig+0x35e>
 80020e0:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a61      	ldr	r2, [pc, #388]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	e00b      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff f8b3 	bl	8001284 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff f8af 	bl	8001284 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0d8      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCC_OscConfig+0x386>
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff f89d 	bl	8001284 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff f899 	bl	8001284 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0c2      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80ae 	beq.w	80022e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d06d      	beq.n	8002274 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d14b      	bne.n	8002238 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a31      	ldr	r2, [pc, #196]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f86a 	bl	8001284 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f866 	bl	8001284 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e091      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff f838 	bl	8001284 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff f834 	bl	8001284 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e05f      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x47c>
 8002236:	e057      	b.n	80022e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f81e 	bl	8001284 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff f81a 	bl	8001284 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e045      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x4d0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x4b0>
 800226a:	e03d      	b.n	80022e8 <HAL_RCC_OscConfig+0x54c>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x558>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d030      	beq.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d129      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d122      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d119      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 020f 	bic.w	r2, r3, #15
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe ff4a 	bl	8001284 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe ff46 	bl	8001284 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 020f 	bic.w	r2, r3, #15
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4601      	mov	r1, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	fa21 f303 	lsr.w	r3, r1, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1d0>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fea6 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08004970 	.word	0x08004970
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d007      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x32>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d008      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x38>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80b4 	bne.w	8002664 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024fe:	60bb      	str	r3, [r7, #8]
      break;
 8002500:	e0b3      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002504:	60bb      	str	r3, [r7, #8]
      break;
 8002506:	e0b0      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b5a      	ldr	r3, [pc, #360]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002510:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04a      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	f240 11ff 	movw	r1, #511	; 0x1ff
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	ea03 0501 	and.w	r5, r3, r1
 8002534:	ea04 0602 	and.w	r6, r4, r2
 8002538:	4629      	mov	r1, r5
 800253a:	4632      	mov	r2, r6
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	0154      	lsls	r4, r2, #5
 8002546:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800254a:	014b      	lsls	r3, r1, #5
 800254c:	4619      	mov	r1, r3
 800254e:	4622      	mov	r2, r4
 8002550:	1b49      	subs	r1, r1, r5
 8002552:	eb62 0206 	sbc.w	r2, r2, r6
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	0194      	lsls	r4, r2, #6
 8002560:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002564:	018b      	lsls	r3, r1, #6
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	eb64 0402 	sbc.w	r4, r4, r2
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	00e2      	lsls	r2, r4, #3
 8002576:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800257a:	00d9      	lsls	r1, r3, #3
 800257c:	460b      	mov	r3, r1
 800257e:	4614      	mov	r4, r2
 8002580:	195b      	adds	r3, r3, r5
 8002582:	eb44 0406 	adc.w	r4, r4, r6
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	0262      	lsls	r2, r4, #9
 8002590:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002594:	0259      	lsls	r1, r3, #9
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	4618      	mov	r0, r3
 800259c:	4621      	mov	r1, r4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f04f 0400 	mov.w	r4, #0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	f7fd fe58 	bl	800025c <__aeabi_uldivmod>
 80025ac:	4603      	mov	r3, r0
 80025ae:	460c      	mov	r4, r1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e049      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	ea03 0501 	and.w	r5, r3, r1
 80025ca:	ea04 0602 	and.w	r6, r4, r2
 80025ce:	4629      	mov	r1, r5
 80025d0:	4632      	mov	r2, r6
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	0154      	lsls	r4, r2, #5
 80025dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e0:	014b      	lsls	r3, r1, #5
 80025e2:	4619      	mov	r1, r3
 80025e4:	4622      	mov	r2, r4
 80025e6:	1b49      	subs	r1, r1, r5
 80025e8:	eb62 0206 	sbc.w	r2, r2, r6
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	0194      	lsls	r4, r2, #6
 80025f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	1a5b      	subs	r3, r3, r1
 80025fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002610:	00d9      	lsls	r1, r3, #3
 8002612:	460b      	mov	r3, r1
 8002614:	4614      	mov	r4, r2
 8002616:	195b      	adds	r3, r3, r5
 8002618:	eb44 0406 	adc.w	r4, r4, r6
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	02a2      	lsls	r2, r4, #10
 8002626:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800262a:	0299      	lsls	r1, r3, #10
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	4618      	mov	r0, r3
 8002632:	4621      	mov	r1, r4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f04f 0400 	mov.w	r4, #0
 800263a:	461a      	mov	r2, r3
 800263c:	4623      	mov	r3, r4
 800263e:	f7fd fe0d 	bl	800025c <__aeabi_uldivmod>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	3301      	adds	r3, #1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	60bb      	str	r3, [r7, #8]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002666:	60bb      	str	r3, [r7, #8]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	68bb      	ldr	r3, [r7, #8]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	00f42400 	.word	0x00f42400
 800267c:	007a1200 	.word	0x007a1200

08002680 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4601      	mov	r1, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08004980 	.word	0x08004980

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08004980 	.word	0x08004980

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002710:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a68      	ldr	r2, [pc, #416]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	4964      	ldr	r1, [pc, #400]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d017      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	4959      	ldr	r1, [pc, #356]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800277e:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	494a      	ldr	r1, [pc, #296]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d101      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 808b 	beq.w	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6413      	str	r3, [r2, #64]	; 0x40
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fd48 	bl	8001284 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fd44 	bl	8001284 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e38f      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d035      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d02e      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d114      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fd0c 	bl	8001284 <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe fd08 	bl	8001284 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e351      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800289e:	d111      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	4901      	ldr	r1, [pc, #4]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	0ffffcff 	.word	0x0ffffcff
 80028c4:	4bb3      	ldr	r3, [pc, #716]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4ab2      	ldr	r2, [pc, #712]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028ce:	6093      	str	r3, [r2, #8]
 80028d0:	4bb0      	ldr	r3, [pc, #704]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	49ad      	ldr	r1, [pc, #692]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028ee:	4ba9      	ldr	r3, [pc, #676]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f4:	4aa7      	ldr	r2, [pc, #668]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028fe:	4ba5      	ldr	r3, [pc, #660]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	49a2      	ldr	r1, [pc, #648]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291c:	4b9d      	ldr	r3, [pc, #628]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800292a:	499a      	ldr	r1, [pc, #616]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293e:	4b95      	ldr	r3, [pc, #596]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294c:	4991      	ldr	r1, [pc, #580]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002960:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296e:	4989      	ldr	r1, [pc, #548]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002982:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4980      	ldr	r1, [pc, #512]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a4:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4978      	ldr	r1, [pc, #480]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f023 020c 	bic.w	r2, r3, #12
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d4:	496f      	ldr	r1, [pc, #444]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4967      	ldr	r1, [pc, #412]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	495e      	ldr	r1, [pc, #376]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a2c:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	4956      	ldr	r1, [pc, #344]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a4e:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	494d      	ldr	r1, [pc, #308]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	4945      	ldr	r1, [pc, #276]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	493c      	ldr	r1, [pc, #240]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac2:	4934      	ldr	r1, [pc, #208]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d011      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae4:	492b      	ldr	r1, [pc, #172]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	491b      	ldr	r1, [pc, #108]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b48:	4912      	ldr	r1, [pc, #72]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00b      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6c:	4909      	ldr	r1, [pc, #36]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	e002      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	4986      	ldr	r1, [pc, #536]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbc:	497d      	ldr	r1, [pc, #500]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d006      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80d6 	beq.w	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd8:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a75      	ldr	r2, [pc, #468]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe fb4e 	bl	8001284 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bec:	f7fe fb4a 	bl	8001284 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e195      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d021      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11d      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c32:	0e1b      	lsrs	r3, r3, #24
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	019a      	lsls	r2, r3, #6
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	071b      	lsls	r3, r3, #28
 8002c52:	4958      	ldr	r1, [pc, #352]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02e      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c84:	d129      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c86:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c94:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	0f1b      	lsrs	r3, r3, #28
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	019a      	lsls	r2, r3, #6
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	493e      	ldr	r1, [pc, #248]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	f023 021f 	bic.w	r2, r3, #31
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	4938      	ldr	r1, [pc, #224]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01d      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ce6:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfa:	0f1b      	lsrs	r3, r3, #28
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	019a      	lsls	r2, r3, #6
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	071b      	lsls	r3, r3, #28
 8002d1a:	4926      	ldr	r1, [pc, #152]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d011      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	019a      	lsls	r2, r3, #6
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	491a      	ldr	r1, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fa91 	bl	8001284 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d66:	f7fe fa8d 	bl	8001284 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0d8      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 80ce 	bne.w	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d98:	f7fe fa74 	bl	8001284 <HAL_GetTick>
 8002d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002da0:	f7fe fa70 	bl	8001284 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d904      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0bb      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d0ec      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d12a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dee:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dfc:	4b4d      	ldr	r3, [pc, #308]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	0f1b      	lsrs	r3, r3, #28
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	019a      	lsls	r2, r3, #6
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	4944      	ldr	r1, [pc, #272]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e2a:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	493d      	ldr	r1, [pc, #244]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d022      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e58:	d11d      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	0e1b      	lsrs	r3, r3, #24
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	0f1b      	lsrs	r3, r3, #28
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	019a      	lsls	r2, r3, #6
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	071b      	lsls	r3, r3, #28
 8002e8e:	4929      	ldr	r1, [pc, #164]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	0e1b      	lsrs	r3, r3, #24
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	019a      	lsls	r2, r3, #6
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	071b      	lsls	r3, r3, #28
 8002ed6:	4917      	ldr	r1, [pc, #92]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4911      	ldr	r1, [pc, #68]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fe f9c0 	bl	8001284 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f08:	f7fe f9bc 	bl	8001284 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e007      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f26:	d1ef      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800

08002f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e040      	b.n	8002fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f860 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fbf2 	bl	8003760 <UART_SetConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e022      	b.n	8002fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fe46 	bl	8003c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fecd 	bl	8003d64 <UART_CheckIdleState>
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b08b      	sub	sp, #44	; 0x2c
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d156      	bne.n	8003098 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_UART_Transmit_IT+0x22>
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e04f      	b.n	800309a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit_IT+0x34>
 8003004:	2302      	movs	r3, #2
 8003006:	e048      	b.n	800309a <HAL_UART_Transmit_IT+0xc6>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2221      	movs	r2, #33	; 0x21
 8003038:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	d107      	bne.n	8003054 <HAL_UART_Transmit_IT+0x80>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_UART_Transmit_IT+0xd4>)
 8003050:	669a      	str	r2, [r3, #104]	; 0x68
 8003052:	e002      	b.n	800305a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a15      	ldr	r2, [pc, #84]	; (80030ac <HAL_UART_Transmit_IT+0xd8>)
 8003058:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	613b      	str	r3, [r7, #16]
   return(result);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	69f9      	ldr	r1, [r7, #28]
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	61bb      	str	r3, [r7, #24]
   return(result);
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e6      	bne.n	8003062 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	372c      	adds	r7, #44	; 0x2c
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	080042bd 	.word	0x080042bd
 80030ac:	08004207 	.word	0x08004207

080030b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d13d      	bne.n	8003142 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_UART_Receive_IT+0x22>
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e036      	b.n	8003144 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Receive_IT+0x34>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e02f      	b.n	8003144 <HAL_UART_Receive_IT+0x94>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d018      	beq.n	8003132 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	613b      	str	r3, [r7, #16]
   return(result);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	69f9      	ldr	r1, [r7, #28]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	61bb      	str	r3, [r7, #24]
   return(result);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e6      	bne.n	8003100 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	461a      	mov	r2, r3
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 ff21 	bl	8003f80 <UART_Start_Receive_IT>
 800313e:	4603      	mov	r3, r0
 8003140:	e000      	b.n	8003144 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3728      	adds	r7, #40	; 0x28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b0ba      	sub	sp, #232	; 0xe8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003172:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003176:	f640 030f 	movw	r3, #2063	; 0x80f
 800317a:	4013      	ands	r3, r2
 800317c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00f      	beq.n	80031b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 82a5 	beq.w	80036f4 <HAL_UART_IRQHandler+0x5a8>
      {
        huart->RxISR(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
      }
      return;
 80031b2:	e29f      	b.n	80036f4 <HAL_UART_IRQHandler+0x5a8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8117 	beq.w	80033ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031ce:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_UART_IRQHandler+0x298>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 810a 	beq.w	80033ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d011      	beq.n	8003208 <HAL_UART_IRQHandler+0xbc>
 80031e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d011      	beq.n	8003238 <HAL_UART_IRQHandler+0xec>
 8003214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2202      	movs	r2, #2
 8003226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d011      	beq.n	8003268 <HAL_UART_IRQHandler+0x11c>
 8003244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2204      	movs	r2, #4
 8003256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	f043 0202 	orr.w	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d017      	beq.n	80032a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003284:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2208      	movs	r2, #8
 8003292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	f043 0208 	orr.w	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_UART_IRQHandler+0x18a>
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 820b 	beq.w	80036f8 <HAL_UART_IRQHandler+0x5ac>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d04f      	beq.n	80033ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fef0 	bl	8004114 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d141      	bne.n	80033c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800336e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800337a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d9      	bne.n	8003342 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	2b00      	cmp	r3, #0
 8003394:	d013      	beq.n	80033be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <HAL_UART_IRQHandler+0x29c>)
 800339c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f8fb 	bl	800159e <HAL_DMA_Abort_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d017      	beq.n	80033de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	e00f      	b.n	80033de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9ae 	bl	8003720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00b      	b.n	80033de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9aa 	bl	8003720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e007      	b.n	80033de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9a6 	bl	8003720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033dc:	e18c      	b.n	80036f8 <HAL_UART_IRQHandler+0x5ac>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033de:	bf00      	nop
    return;
 80033e0:	e18a      	b.n	80036f8 <HAL_UART_IRQHandler+0x5ac>
 80033e2:	bf00      	nop
 80033e4:	04000120 	.word	0x04000120
 80033e8:	080041db 	.word	0x080041db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 8144 	bne.w	800367e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 813d 	beq.w	800367e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8136 	beq.w	800367e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	f040 80b2 	bne.w	800358e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003436:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 815e 	beq.w	80036fc <HAL_UART_IRQHandler+0x5b0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344a:	429a      	cmp	r2, r3
 800344c:	f080 8156 	bcs.w	80036fc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	f000 8085 	beq.w	8003572 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800347c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003496:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800349e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1da      	bne.n	8003468 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3308      	adds	r3, #8
 80034d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e1      	bne.n	80034b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3308      	adds	r3, #8
 80034f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3308      	adds	r3, #8
 800350e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e3      	bne.n	80034ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	f023 0310 	bic.w	r3, r3, #16
 8003546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003554:	65bb      	str	r3, [r7, #88]	; 0x58
 8003556:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800355a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e4      	bne.n	8003532 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd ffa6 	bl	80014be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800357e:	b29b      	uxth	r3, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8d4 	bl	8003734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800358c:	e0b6      	b.n	80036fc <HAL_UART_IRQHandler+0x5b0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800359a:	b29b      	uxth	r3, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80a8 	beq.w	8003700 <HAL_UART_IRQHandler+0x5b4>
          && (nb_rx_data > 0U))
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a3 	beq.w	8003700 <HAL_UART_IRQHandler+0x5b4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
 80035de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e4      	bne.n	80035ba <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3308      	adds	r3, #8
 8003610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003614:	633a      	str	r2, [r7, #48]	; 0x30
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e3      	bne.n	80035f0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
   return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	617b      	str	r3, [r7, #20]
   return(result);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e4      	bne.n	800363a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f85c 	bl	8003734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800367c:	e040      	b.n	8003700 <HAL_UART_IRQHandler+0x5b4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00e      	beq.n	80036a8 <HAL_UART_IRQHandler+0x55c>
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800369e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f853 	bl	800374c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036a6:	e02e      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01d      	beq.n	8003704 <HAL_UART_IRQHandler+0x5b8>
    {
      huart->TxISR(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
    }
    return;
 80036d0:	e018      	b.n	8003704 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_UART_IRQHandler+0x5ba>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_UART_IRQHandler+0x5ba>
  {
    UART_EndTransmit_IT(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fe46 	bl	800437c <UART_EndTransmit_IT>
    return;
 80036f0:	bf00      	nop
 80036f2:	e008      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
      return;
 80036f4:	bf00      	nop
 80036f6:	e006      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
    return;
 80036f8:	bf00      	nop
 80036fa:	e004      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
      return;
 80036fc:	bf00      	nop
 80036fe:	e002      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
      return;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_UART_IRQHandler+0x5ba>
    return;
 8003704:	bf00      	nop
  }

}
 8003706:	37e8      	adds	r7, #232	; 0xe8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4bb1      	ldr	r3, [pc, #708]	; (8003a50 <UART_SetConfig+0x2f0>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	430b      	orrs	r3, r1
 8003796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a9f      	ldr	r2, [pc, #636]	; (8003a54 <UART_SetConfig+0x2f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d121      	bne.n	8003820 <UART_SetConfig+0xc0>
 80037dc:	4b9e      	ldr	r3, [pc, #632]	; (8003a58 <UART_SetConfig+0x2f8>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d816      	bhi.n	8003818 <UART_SetConfig+0xb8>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x90>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	0800380d 	.word	0x0800380d
 80037f8:	08003807 	.word	0x08003807
 80037fc:	08003813 	.word	0x08003813
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e151      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e14e      	b.n	8003aaa <UART_SetConfig+0x34a>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e14b      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e148      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	bf00      	nop
 800381e:	e144      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a8d      	ldr	r2, [pc, #564]	; (8003a5c <UART_SetConfig+0x2fc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d134      	bne.n	8003894 <UART_SetConfig+0x134>
 800382a:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <UART_SetConfig+0x2f8>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d829      	bhi.n	800388c <UART_SetConfig+0x12c>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <UART_SetConfig+0xe0>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003875 	.word	0x08003875
 8003844:	0800388d 	.word	0x0800388d
 8003848:	0800388d 	.word	0x0800388d
 800384c:	0800388d 	.word	0x0800388d
 8003850:	08003881 	.word	0x08003881
 8003854:	0800388d 	.word	0x0800388d
 8003858:	0800388d 	.word	0x0800388d
 800385c:	0800388d 	.word	0x0800388d
 8003860:	0800387b 	.word	0x0800387b
 8003864:	0800388d 	.word	0x0800388d
 8003868:	0800388d 	.word	0x0800388d
 800386c:	0800388d 	.word	0x0800388d
 8003870:	08003887 	.word	0x08003887
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e117      	b.n	8003aaa <UART_SetConfig+0x34a>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e114      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e111      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e10e      	b.n	8003aaa <UART_SetConfig+0x34a>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	bf00      	nop
 8003892:	e10a      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	; (8003a60 <UART_SetConfig+0x300>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d120      	bne.n	80038e0 <UART_SetConfig+0x180>
 800389e:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <UART_SetConfig+0x2f8>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d00f      	beq.n	80038cc <UART_SetConfig+0x16c>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d802      	bhi.n	80038b6 <UART_SetConfig+0x156>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <UART_SetConfig+0x160>
 80038b4:	e010      	b.n	80038d8 <UART_SetConfig+0x178>
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d005      	beq.n	80038c6 <UART_SetConfig+0x166>
 80038ba:	2b30      	cmp	r3, #48	; 0x30
 80038bc:	d009      	beq.n	80038d2 <UART_SetConfig+0x172>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x178>
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e0f1      	b.n	8003aaa <UART_SetConfig+0x34a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e0ee      	b.n	8003aaa <UART_SetConfig+0x34a>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0eb      	b.n	8003aaa <UART_SetConfig+0x34a>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e0e8      	b.n	8003aaa <UART_SetConfig+0x34a>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	bf00      	nop
 80038de:	e0e4      	b.n	8003aaa <UART_SetConfig+0x34a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5f      	ldr	r2, [pc, #380]	; (8003a64 <UART_SetConfig+0x304>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d120      	bne.n	800392c <UART_SetConfig+0x1cc>
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <UART_SetConfig+0x2f8>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d00f      	beq.n	8003918 <UART_SetConfig+0x1b8>
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d802      	bhi.n	8003902 <UART_SetConfig+0x1a2>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <UART_SetConfig+0x1ac>
 8003900:	e010      	b.n	8003924 <UART_SetConfig+0x1c4>
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d005      	beq.n	8003912 <UART_SetConfig+0x1b2>
 8003906:	2bc0      	cmp	r3, #192	; 0xc0
 8003908:	d009      	beq.n	800391e <UART_SetConfig+0x1be>
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x1c4>
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e0cb      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003912:	2302      	movs	r3, #2
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e0c8      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e0c5      	b.n	8003aaa <UART_SetConfig+0x34a>
 800391e:	2308      	movs	r3, #8
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e0c2      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003924:	2310      	movs	r3, #16
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	bf00      	nop
 800392a:	e0be      	b.n	8003aaa <UART_SetConfig+0x34a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <UART_SetConfig+0x308>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d124      	bne.n	8003980 <UART_SetConfig+0x220>
 8003936:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <UART_SetConfig+0x2f8>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003944:	d012      	beq.n	800396c <UART_SetConfig+0x20c>
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d802      	bhi.n	8003952 <UART_SetConfig+0x1f2>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <UART_SetConfig+0x200>
 8003950:	e012      	b.n	8003978 <UART_SetConfig+0x218>
 8003952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003956:	d006      	beq.n	8003966 <UART_SetConfig+0x206>
 8003958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395c:	d009      	beq.n	8003972 <UART_SetConfig+0x212>
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x218>
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e0a1      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e09e      	b.n	8003aaa <UART_SetConfig+0x34a>
 800396c:	2304      	movs	r3, #4
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e09b      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003972:	2308      	movs	r3, #8
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e098      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003978:	2310      	movs	r3, #16
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	bf00      	nop
 800397e:	e094      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a39      	ldr	r2, [pc, #228]	; (8003a6c <UART_SetConfig+0x30c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d124      	bne.n	80039d4 <UART_SetConfig+0x274>
 800398a:	4b33      	ldr	r3, [pc, #204]	; (8003a58 <UART_SetConfig+0x2f8>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d012      	beq.n	80039c0 <UART_SetConfig+0x260>
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d802      	bhi.n	80039a6 <UART_SetConfig+0x246>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <UART_SetConfig+0x254>
 80039a4:	e012      	b.n	80039cc <UART_SetConfig+0x26c>
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039aa:	d006      	beq.n	80039ba <UART_SetConfig+0x25a>
 80039ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039b0:	d009      	beq.n	80039c6 <UART_SetConfig+0x266>
 80039b2:	e00b      	b.n	80039cc <UART_SetConfig+0x26c>
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e077      	b.n	8003aaa <UART_SetConfig+0x34a>
 80039ba:	2302      	movs	r3, #2
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e074      	b.n	8003aaa <UART_SetConfig+0x34a>
 80039c0:	2304      	movs	r3, #4
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e071      	b.n	8003aaa <UART_SetConfig+0x34a>
 80039c6:	2308      	movs	r3, #8
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e06e      	b.n	8003aaa <UART_SetConfig+0x34a>
 80039cc:	2310      	movs	r3, #16
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	bf00      	nop
 80039d2:	e06a      	b.n	8003aaa <UART_SetConfig+0x34a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a25      	ldr	r2, [pc, #148]	; (8003a70 <UART_SetConfig+0x310>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d124      	bne.n	8003a28 <UART_SetConfig+0x2c8>
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <UART_SetConfig+0x2f8>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ec:	d012      	beq.n	8003a14 <UART_SetConfig+0x2b4>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d802      	bhi.n	80039fa <UART_SetConfig+0x29a>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <UART_SetConfig+0x2a8>
 80039f8:	e012      	b.n	8003a20 <UART_SetConfig+0x2c0>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fe:	d006      	beq.n	8003a0e <UART_SetConfig+0x2ae>
 8003a00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a04:	d009      	beq.n	8003a1a <UART_SetConfig+0x2ba>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x2c0>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e04d      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e04a      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e047      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e044      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	bf00      	nop
 8003a26:	e040      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <UART_SetConfig+0x314>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d139      	bne.n	8003aa6 <UART_SetConfig+0x346>
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <UART_SetConfig+0x2f8>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a40:	d027      	beq.n	8003a92 <UART_SetConfig+0x332>
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d817      	bhi.n	8003a78 <UART_SetConfig+0x318>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <UART_SetConfig+0x326>
 8003a4c:	e027      	b.n	8003a9e <UART_SetConfig+0x33e>
 8003a4e:	bf00      	nop
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40004800 	.word	0x40004800
 8003a64:	40004c00 	.word	0x40004c00
 8003a68:	40005000 	.word	0x40005000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	40007800 	.word	0x40007800
 8003a74:	40007c00 	.word	0x40007c00
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	d006      	beq.n	8003a8c <UART_SetConfig+0x32c>
 8003a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a82:	d009      	beq.n	8003a98 <UART_SetConfig+0x338>
 8003a84:	e00b      	b.n	8003a9e <UART_SetConfig+0x33e>
 8003a86:	2300      	movs	r3, #0
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e00e      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e00b      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a92:	2304      	movs	r3, #4
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e008      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e005      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	bf00      	nop
 8003aa4:	e001      	b.n	8003aaa <UART_SetConfig+0x34a>
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab2:	d15a      	bne.n	8003b6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ab4:	7ffb      	ldrb	r3, [r7, #31]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d827      	bhi.n	8003b0a <UART_SetConfig+0x3aa>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0x360>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ae5 	.word	0x08003ae5
 8003ac4:	08003aed 	.word	0x08003aed
 8003ac8:	08003af5 	.word	0x08003af5
 8003acc:	08003b0b 	.word	0x08003b0b
 8003ad0:	08003afb 	.word	0x08003afb
 8003ad4:	08003b0b 	.word	0x08003b0b
 8003ad8:	08003b0b 	.word	0x08003b0b
 8003adc:	08003b0b 	.word	0x08003b0b
 8003ae0:	08003b03 	.word	0x08003b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7fe fdd8 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	61b8      	str	r0, [r7, #24]
        break;
 8003aea:	e013      	b.n	8003b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aec:	f7fe fde8 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003af0:	61b8      	str	r0, [r7, #24]
        break;
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af4:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <UART_SetConfig+0x4bc>)
 8003af6:	61bb      	str	r3, [r7, #24]
        break;
 8003af8:	e00c      	b.n	8003b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003afa:	f7fe fce9 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8003afe:	61b8      	str	r0, [r7, #24]
        break;
 8003b00:	e008      	b.n	8003b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e004      	b.n	8003b14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77bb      	strb	r3, [r7, #30]
        break;
 8003b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d074      	beq.n	8003c04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	005a      	lsls	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	d916      	bls.n	8003b64 <UART_SetConfig+0x404>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d212      	bcs.n	8003b64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f023 030f 	bic.w	r3, r3, #15
 8003b46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	89fa      	ldrh	r2, [r7, #14]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e04f      	b.n	8003c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77bb      	strb	r3, [r7, #30]
 8003b68:	e04c      	b.n	8003c04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d828      	bhi.n	8003bc2 <UART_SetConfig+0x462>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x418>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003bc3 	.word	0x08003bc3
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003bc3 	.word	0x08003bc3
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bc3 	.word	0x08003bc3
 8003b98:	08003bbb 	.word	0x08003bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe fd7c 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	61b8      	str	r0, [r7, #24]
        break;
 8003ba2:	e013      	b.n	8003bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe fd8c 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	61b8      	str	r0, [r7, #24]
        break;
 8003baa:	e00f      	b.n	8003bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <UART_SetConfig+0x4bc>)
 8003bae:	61bb      	str	r3, [r7, #24]
        break;
 8003bb0:	e00c      	b.n	8003bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fc8d 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8003bb6:	61b8      	str	r0, [r7, #24]
        break;
 8003bb8:	e008      	b.n	8003bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e004      	b.n	8003bcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bca:	bf00      	nop
    }

    if (pclk != 0U)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085a      	lsrs	r2, r3, #1
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d909      	bls.n	8003c00 <UART_SetConfig+0x4a0>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d205      	bcs.n	8003c00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e001      	b.n	8003c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	00f42400 	.word	0x00f42400

08003c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1e:	d10a      	bne.n	8003d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d74:	f7fd fa86 	bl	8001284 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d10e      	bne.n	8003da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f82d 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e023      	b.n	8003dee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d10e      	bne.n	8003dd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f817 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00d      	b.n	8003dee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b09c      	sub	sp, #112	; 0x70
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	e0a5      	b.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	f000 80a1 	beq.w	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd fa37 	bl	8001284 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13e      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e6      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e067      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d04f      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d147      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ecc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f20:	623a      	str	r2, [r7, #32]
 8003f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69f9      	ldr	r1, [r7, #28]
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e010      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	f43f af4a 	beq.w	8003e08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3770      	adds	r7, #112	; 0x70
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b097      	sub	sp, #92	; 0x5c
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d10e      	bne.n	8003fd2 <UART_Start_Receive_IT+0x52>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <UART_Start_Receive_IT+0x48>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fc6:	e02d      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fd0:	e028      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <UART_Start_Receive_IT+0x76>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <UART_Start_Receive_IT+0x6c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fea:	e01b      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	227f      	movs	r2, #127	; 0x7f
 8003ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ff4:	e016      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ffe:	d10d      	bne.n	800401c <UART_Start_Receive_IT+0x9c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <UART_Start_Receive_IT+0x92>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	227f      	movs	r2, #127	; 0x7f
 800400c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004010:	e008      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	223f      	movs	r2, #63	; 0x3f
 8004016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401a:	e003      	b.n	8004024 <UART_Start_Receive_IT+0xa4>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2222      	movs	r2, #34	; 0x22
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	657b      	str	r3, [r7, #84]	; 0x54
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004052:	64ba      	str	r2, [r7, #72]	; 0x48
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d107      	bne.n	8004080 <UART_Start_Receive_IT+0x100>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a24      	ldr	r2, [pc, #144]	; (800410c <UART_Start_Receive_IT+0x18c>)
 800407c:	665a      	str	r2, [r3, #100]	; 0x64
 800407e:	e002      	b.n	8004086 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a23      	ldr	r2, [pc, #140]	; (8004110 <UART_Start_Receive_IT+0x190>)
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d019      	beq.n	80040ca <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
 80040b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_Start_Receive_IT+0x116>
 80040c8:	e018      	b.n	80040fc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f043 0320 	orr.w	r3, r3, #32
 80040de:	653b      	str	r3, [r7, #80]	; 0x50
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	375c      	adds	r7, #92	; 0x5c
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0800452d 	.word	0x0800452d
 8004110:	080043d1 	.word	0x080043d1

08004114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b095      	sub	sp, #84	; 0x54
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
 800413c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	61fb      	str	r3, [r7, #28]
   return(result);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	64bb      	str	r3, [r7, #72]	; 0x48
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e5      	bne.n	800414e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	2b01      	cmp	r3, #1
 8004188:	d118      	bne.n	80041bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60bb      	str	r3, [r7, #8]
   return(result);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f023 0310 	bic.w	r3, r3, #16
 800419e:	647b      	str	r3, [r7, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	613b      	str	r3, [r7, #16]
   return(result);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041ce:	bf00      	nop
 80041d0:	3754      	adds	r7, #84	; 0x54
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff fa91 	bl	8003720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004206:	b480      	push	{r7}
 8004208:	b08f      	sub	sp, #60	; 0x3c
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004212:	2b21      	cmp	r3, #33	; 0x21
 8004214:	d14c      	bne.n	80042b0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d132      	bne.n	8004288 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	60bb      	str	r3, [r7, #8]
   return(result);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004286:	e013      	b.n	80042b0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042b0:	bf00      	nop
 80042b2:	373c      	adds	r7, #60	; 0x3c
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b091      	sub	sp, #68	; 0x44
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c8:	2b21      	cmp	r3, #33	; 0x21
 80042ca:	d151      	bne.n	8004370 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d132      	bne.n	800433e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	623b      	str	r3, [r7, #32]
   return(result);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
 80042f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e6      	bne.n	80042d8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	617b      	str	r3, [r7, #20]
   return(result);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800433c:	e018      	b.n	8004370 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004358:	1c9a      	adds	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004370:	bf00      	nop
 8004372:	3744      	adds	r7, #68	; 0x44
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60bb      	str	r3, [r7, #8]
   return(result);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	613b      	str	r3, [r7, #16]
   return(result);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff f9a2 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b096      	sub	sp, #88	; 0x58
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e6:	2b22      	cmp	r3, #34	; 0x22
 80043e8:	f040 8094 	bne.w	8004514 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80043fa:	b2d9      	uxtb	r1, r3
 80043fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	400a      	ands	r2, r1
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d177      	bne.n	8004524 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004452:	647b      	str	r3, [r7, #68]	; 0x44
 8004454:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e6      	bne.n	8004434 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	623b      	str	r3, [r7, #32]
   return(result);
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004486:	633a      	str	r2, [r7, #48]	; 0x30
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d12e      	bne.n	800450c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	69b9      	ldr	r1, [r7, #24]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	617b      	str	r3, [r7, #20]
   return(result);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e6      	bne.n	80044b4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d103      	bne.n	80044fc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff f915 	bl	8003734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800450a:	e00b      	b.n	8004524 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc fdd3 	bl	80010b8 <HAL_UART_RxCpltCallback>
}
 8004512:	e007      	b.n	8004524 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	3758      	adds	r7, #88	; 0x58
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b096      	sub	sp, #88	; 0x58
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800453a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004542:	2b22      	cmp	r3, #34	; 0x22
 8004544:	f040 8094 	bne.w	8004670 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004558:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800455c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004560:	4013      	ands	r3, r2
 8004562:	b29a      	uxth	r2, r3
 8004564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004566:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d177      	bne.n	8004680 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
 80045b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e6      	bne.n	8004590 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3308      	adds	r3, #8
 80045e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	2b01      	cmp	r3, #1
 8004608:	d12e      	bne.n	8004668 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	60bb      	str	r3, [r7, #8]
   return(result);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f023 0310 	bic.w	r3, r3, #16
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	613b      	str	r3, [r7, #16]
   return(result);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e6      	bne.n	8004610 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b10      	cmp	r3, #16
 800464e:	d103      	bne.n	8004658 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2210      	movs	r2, #16
 8004656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff f867 	bl	8003734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004666:	e00b      	b.n	8004680 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fd25 	bl	80010b8 <HAL_UART_RxCpltCallback>
}
 800466e:	e007      	b.n	8004680 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	619a      	str	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	3758      	adds	r7, #88	; 0x58
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <atoi>:
 8004688:	220a      	movs	r2, #10
 800468a:	2100      	movs	r1, #0
 800468c:	f000 b8cc 	b.w	8004828 <strtol>

08004690 <__libc_init_array>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4e0d      	ldr	r6, [pc, #52]	; (80046c8 <__libc_init_array+0x38>)
 8004694:	4c0d      	ldr	r4, [pc, #52]	; (80046cc <__libc_init_array+0x3c>)
 8004696:	1ba4      	subs	r4, r4, r6
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	2500      	movs	r5, #0
 800469c:	42a5      	cmp	r5, r4
 800469e:	d109      	bne.n	80046b4 <__libc_init_array+0x24>
 80046a0:	4e0b      	ldr	r6, [pc, #44]	; (80046d0 <__libc_init_array+0x40>)
 80046a2:	4c0c      	ldr	r4, [pc, #48]	; (80046d4 <__libc_init_array+0x44>)
 80046a4:	f000 f936 	bl	8004914 <_init>
 80046a8:	1ba4      	subs	r4, r4, r6
 80046aa:	10a4      	asrs	r4, r4, #2
 80046ac:	2500      	movs	r5, #0
 80046ae:	42a5      	cmp	r5, r4
 80046b0:	d105      	bne.n	80046be <__libc_init_array+0x2e>
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b8:	4798      	blx	r3
 80046ba:	3501      	adds	r5, #1
 80046bc:	e7ee      	b.n	800469c <__libc_init_array+0xc>
 80046be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c2:	4798      	blx	r3
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7f2      	b.n	80046ae <__libc_init_array+0x1e>
 80046c8:	08004ac0 	.word	0x08004ac0
 80046cc:	08004ac0 	.word	0x08004ac0
 80046d0:	08004ac0 	.word	0x08004ac0
 80046d4:	08004ac4 	.word	0x08004ac4

080046d8 <__itoa>:
 80046d8:	1e93      	subs	r3, r2, #2
 80046da:	2b22      	cmp	r3, #34	; 0x22
 80046dc:	b510      	push	{r4, lr}
 80046de:	460c      	mov	r4, r1
 80046e0:	d904      	bls.n	80046ec <__itoa+0x14>
 80046e2:	2300      	movs	r3, #0
 80046e4:	700b      	strb	r3, [r1, #0]
 80046e6:	461c      	mov	r4, r3
 80046e8:	4620      	mov	r0, r4
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	2a0a      	cmp	r2, #10
 80046ee:	d109      	bne.n	8004704 <__itoa+0x2c>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	da07      	bge.n	8004704 <__itoa+0x2c>
 80046f4:	232d      	movs	r3, #45	; 0x2d
 80046f6:	700b      	strb	r3, [r1, #0]
 80046f8:	4240      	negs	r0, r0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4421      	add	r1, r4
 80046fe:	f000 f8a9 	bl	8004854 <__utoa>
 8004702:	e7f1      	b.n	80046e8 <__itoa+0x10>
 8004704:	2100      	movs	r1, #0
 8004706:	e7f9      	b.n	80046fc <__itoa+0x24>

08004708 <itoa>:
 8004708:	f7ff bfe6 	b.w	80046d8 <__itoa>

0800470c <memcpy>:
 800470c:	b510      	push	{r4, lr}
 800470e:	1e43      	subs	r3, r0, #1
 8004710:	440a      	add	r2, r1
 8004712:	4291      	cmp	r1, r2
 8004714:	d100      	bne.n	8004718 <memcpy+0xc>
 8004716:	bd10      	pop	{r4, pc}
 8004718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004720:	e7f7      	b.n	8004712 <memcpy+0x6>

08004722 <memset>:
 8004722:	4402      	add	r2, r0
 8004724:	4603      	mov	r3, r0
 8004726:	4293      	cmp	r3, r2
 8004728:	d100      	bne.n	800472c <memset+0xa>
 800472a:	4770      	bx	lr
 800472c:	f803 1b01 	strb.w	r1, [r3], #1
 8004730:	e7f9      	b.n	8004726 <memset+0x4>

08004732 <_strtol_l.isra.0>:
 8004732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004736:	4680      	mov	r8, r0
 8004738:	4689      	mov	r9, r1
 800473a:	4692      	mov	sl, r2
 800473c:	461e      	mov	r6, r3
 800473e:	460f      	mov	r7, r1
 8004740:	463d      	mov	r5, r7
 8004742:	9808      	ldr	r0, [sp, #32]
 8004744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004748:	f000 f8c2 	bl	80048d0 <__locale_ctype_ptr_l>
 800474c:	4420      	add	r0, r4
 800474e:	7843      	ldrb	r3, [r0, #1]
 8004750:	f013 0308 	ands.w	r3, r3, #8
 8004754:	d132      	bne.n	80047bc <_strtol_l.isra.0+0x8a>
 8004756:	2c2d      	cmp	r4, #45	; 0x2d
 8004758:	d132      	bne.n	80047c0 <_strtol_l.isra.0+0x8e>
 800475a:	787c      	ldrb	r4, [r7, #1]
 800475c:	1cbd      	adds	r5, r7, #2
 800475e:	2201      	movs	r2, #1
 8004760:	2e00      	cmp	r6, #0
 8004762:	d05d      	beq.n	8004820 <_strtol_l.isra.0+0xee>
 8004764:	2e10      	cmp	r6, #16
 8004766:	d109      	bne.n	800477c <_strtol_l.isra.0+0x4a>
 8004768:	2c30      	cmp	r4, #48	; 0x30
 800476a:	d107      	bne.n	800477c <_strtol_l.isra.0+0x4a>
 800476c:	782b      	ldrb	r3, [r5, #0]
 800476e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004772:	2b58      	cmp	r3, #88	; 0x58
 8004774:	d14f      	bne.n	8004816 <_strtol_l.isra.0+0xe4>
 8004776:	786c      	ldrb	r4, [r5, #1]
 8004778:	2610      	movs	r6, #16
 800477a:	3502      	adds	r5, #2
 800477c:	2a00      	cmp	r2, #0
 800477e:	bf14      	ite	ne
 8004780:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004784:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004788:	2700      	movs	r7, #0
 800478a:	fbb1 fcf6 	udiv	ip, r1, r6
 800478e:	4638      	mov	r0, r7
 8004790:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004794:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004798:	2b09      	cmp	r3, #9
 800479a:	d817      	bhi.n	80047cc <_strtol_l.isra.0+0x9a>
 800479c:	461c      	mov	r4, r3
 800479e:	42a6      	cmp	r6, r4
 80047a0:	dd23      	ble.n	80047ea <_strtol_l.isra.0+0xb8>
 80047a2:	1c7b      	adds	r3, r7, #1
 80047a4:	d007      	beq.n	80047b6 <_strtol_l.isra.0+0x84>
 80047a6:	4584      	cmp	ip, r0
 80047a8:	d31c      	bcc.n	80047e4 <_strtol_l.isra.0+0xb2>
 80047aa:	d101      	bne.n	80047b0 <_strtol_l.isra.0+0x7e>
 80047ac:	45a6      	cmp	lr, r4
 80047ae:	db19      	blt.n	80047e4 <_strtol_l.isra.0+0xb2>
 80047b0:	fb00 4006 	mla	r0, r0, r6, r4
 80047b4:	2701      	movs	r7, #1
 80047b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047ba:	e7eb      	b.n	8004794 <_strtol_l.isra.0+0x62>
 80047bc:	462f      	mov	r7, r5
 80047be:	e7bf      	b.n	8004740 <_strtol_l.isra.0+0xe>
 80047c0:	2c2b      	cmp	r4, #43	; 0x2b
 80047c2:	bf04      	itt	eq
 80047c4:	1cbd      	addeq	r5, r7, #2
 80047c6:	787c      	ldrbeq	r4, [r7, #1]
 80047c8:	461a      	mov	r2, r3
 80047ca:	e7c9      	b.n	8004760 <_strtol_l.isra.0+0x2e>
 80047cc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80047d0:	2b19      	cmp	r3, #25
 80047d2:	d801      	bhi.n	80047d8 <_strtol_l.isra.0+0xa6>
 80047d4:	3c37      	subs	r4, #55	; 0x37
 80047d6:	e7e2      	b.n	800479e <_strtol_l.isra.0+0x6c>
 80047d8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80047dc:	2b19      	cmp	r3, #25
 80047de:	d804      	bhi.n	80047ea <_strtol_l.isra.0+0xb8>
 80047e0:	3c57      	subs	r4, #87	; 0x57
 80047e2:	e7dc      	b.n	800479e <_strtol_l.isra.0+0x6c>
 80047e4:	f04f 37ff 	mov.w	r7, #4294967295
 80047e8:	e7e5      	b.n	80047b6 <_strtol_l.isra.0+0x84>
 80047ea:	1c7b      	adds	r3, r7, #1
 80047ec:	d108      	bne.n	8004800 <_strtol_l.isra.0+0xce>
 80047ee:	2322      	movs	r3, #34	; 0x22
 80047f0:	f8c8 3000 	str.w	r3, [r8]
 80047f4:	4608      	mov	r0, r1
 80047f6:	f1ba 0f00 	cmp.w	sl, #0
 80047fa:	d107      	bne.n	800480c <_strtol_l.isra.0+0xda>
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	b102      	cbz	r2, 8004804 <_strtol_l.isra.0+0xd2>
 8004802:	4240      	negs	r0, r0
 8004804:	f1ba 0f00 	cmp.w	sl, #0
 8004808:	d0f8      	beq.n	80047fc <_strtol_l.isra.0+0xca>
 800480a:	b10f      	cbz	r7, 8004810 <_strtol_l.isra.0+0xde>
 800480c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004810:	f8ca 9000 	str.w	r9, [sl]
 8004814:	e7f2      	b.n	80047fc <_strtol_l.isra.0+0xca>
 8004816:	2430      	movs	r4, #48	; 0x30
 8004818:	2e00      	cmp	r6, #0
 800481a:	d1af      	bne.n	800477c <_strtol_l.isra.0+0x4a>
 800481c:	2608      	movs	r6, #8
 800481e:	e7ad      	b.n	800477c <_strtol_l.isra.0+0x4a>
 8004820:	2c30      	cmp	r4, #48	; 0x30
 8004822:	d0a3      	beq.n	800476c <_strtol_l.isra.0+0x3a>
 8004824:	260a      	movs	r6, #10
 8004826:	e7a9      	b.n	800477c <_strtol_l.isra.0+0x4a>

08004828 <strtol>:
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <strtol+0x24>)
 800482a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	4d08      	ldr	r5, [pc, #32]	; (8004850 <strtol+0x28>)
 8004830:	6a23      	ldr	r3, [r4, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf08      	it	eq
 8004836:	462b      	moveq	r3, r5
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	460a      	mov	r2, r1
 800483e:	4601      	mov	r1, r0
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff ff76 	bl	8004732 <_strtol_l.isra.0>
 8004846:	b003      	add	sp, #12
 8004848:	bd30      	pop	{r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c
 8004850:	20000070 	.word	0x20000070

08004854 <__utoa>:
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <__utoa+0x78>)
 8004858:	b08b      	sub	sp, #44	; 0x2c
 800485a:	4605      	mov	r5, r0
 800485c:	460c      	mov	r4, r1
 800485e:	466e      	mov	r6, sp
 8004860:	f103 0c20 	add.w	ip, r3, #32
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	4637      	mov	r7, r6
 800486a:	c703      	stmia	r7!, {r0, r1}
 800486c:	3308      	adds	r3, #8
 800486e:	4563      	cmp	r3, ip
 8004870:	463e      	mov	r6, r7
 8004872:	d1f7      	bne.n	8004864 <__utoa+0x10>
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	791b      	ldrb	r3, [r3, #4]
 8004878:	713b      	strb	r3, [r7, #4]
 800487a:	1e93      	subs	r3, r2, #2
 800487c:	2b22      	cmp	r3, #34	; 0x22
 800487e:	6038      	str	r0, [r7, #0]
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	d904      	bls.n	8004890 <__utoa+0x3c>
 8004886:	7023      	strb	r3, [r4, #0]
 8004888:	461c      	mov	r4, r3
 800488a:	4620      	mov	r0, r4
 800488c:	b00b      	add	sp, #44	; 0x2c
 800488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004890:	1e66      	subs	r6, r4, #1
 8004892:	fbb5 f0f2 	udiv	r0, r5, r2
 8004896:	af0a      	add	r7, sp, #40	; 0x28
 8004898:	fb02 5510 	mls	r5, r2, r0, r5
 800489c:	443d      	add	r5, r7
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80048a4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80048a8:	4605      	mov	r5, r0
 80048aa:	b968      	cbnz	r0, 80048c8 <__utoa+0x74>
 80048ac:	5460      	strb	r0, [r4, r1]
 80048ae:	4423      	add	r3, r4
 80048b0:	4622      	mov	r2, r4
 80048b2:	1b19      	subs	r1, r3, r4
 80048b4:	1b10      	subs	r0, r2, r4
 80048b6:	4281      	cmp	r1, r0
 80048b8:	dde7      	ble.n	800488a <__utoa+0x36>
 80048ba:	7811      	ldrb	r1, [r2, #0]
 80048bc:	7818      	ldrb	r0, [r3, #0]
 80048be:	f802 0b01 	strb.w	r0, [r2], #1
 80048c2:	f803 1901 	strb.w	r1, [r3], #-1
 80048c6:	e7f4      	b.n	80048b2 <__utoa+0x5e>
 80048c8:	460b      	mov	r3, r1
 80048ca:	e7e2      	b.n	8004892 <__utoa+0x3e>
 80048cc:	08004988 	.word	0x08004988

080048d0 <__locale_ctype_ptr_l>:
 80048d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80048d4:	4770      	bx	lr

080048d6 <__ascii_mbtowc>:
 80048d6:	b082      	sub	sp, #8
 80048d8:	b901      	cbnz	r1, 80048dc <__ascii_mbtowc+0x6>
 80048da:	a901      	add	r1, sp, #4
 80048dc:	b142      	cbz	r2, 80048f0 <__ascii_mbtowc+0x1a>
 80048de:	b14b      	cbz	r3, 80048f4 <__ascii_mbtowc+0x1e>
 80048e0:	7813      	ldrb	r3, [r2, #0]
 80048e2:	600b      	str	r3, [r1, #0]
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	1c10      	adds	r0, r2, #0
 80048e8:	bf18      	it	ne
 80048ea:	2001      	movne	r0, #1
 80048ec:	b002      	add	sp, #8
 80048ee:	4770      	bx	lr
 80048f0:	4610      	mov	r0, r2
 80048f2:	e7fb      	b.n	80048ec <__ascii_mbtowc+0x16>
 80048f4:	f06f 0001 	mvn.w	r0, #1
 80048f8:	e7f8      	b.n	80048ec <__ascii_mbtowc+0x16>

080048fa <__ascii_wctomb>:
 80048fa:	b149      	cbz	r1, 8004910 <__ascii_wctomb+0x16>
 80048fc:	2aff      	cmp	r2, #255	; 0xff
 80048fe:	bf85      	ittet	hi
 8004900:	238a      	movhi	r3, #138	; 0x8a
 8004902:	6003      	strhi	r3, [r0, #0]
 8004904:	700a      	strbls	r2, [r1, #0]
 8004906:	f04f 30ff 	movhi.w	r0, #4294967295
 800490a:	bf98      	it	ls
 800490c:	2001      	movls	r0, #1
 800490e:	4770      	bx	lr
 8004910:	4608      	mov	r0, r1
 8004912:	4770      	bx	lr

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
