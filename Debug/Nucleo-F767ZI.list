
Nucleo-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005464  08005464  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800546c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200001dc  08005648  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08005648  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135cb  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc5  00000000  00000000  000337d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e9e  00000000  00000000  00037c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f694  00000000  00000000  00060b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4588  00000000  00000000  000701ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003618  00000000  00000000  001647c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001dc 	.word	0x200001dc
 8000214:	00000000 	.word	0x00000000
 8000218:	080052c4 	.word	0x080052c4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e0 	.word	0x200001e0
 8000234:	080052c4 	.word	0x080052c4

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b972 	b.w	8000558 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9e08      	ldr	r6, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	4688      	mov	r8, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14b      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029a:	428a      	cmp	r2, r1
 800029c:	4615      	mov	r5, r2
 800029e:	d967      	bls.n	8000370 <__udivmoddi4+0xe4>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0720 	rsb	r7, r2, #32
 80002aa:	fa01 f302 	lsl.w	r3, r1, r2
 80002ae:	fa20 f707 	lsr.w	r7, r0, r7
 80002b2:	4095      	lsls	r5, r2
 80002b4:	ea47 0803 	orr.w	r8, r7, r3
 80002b8:	4094      	lsls	r4, r2
 80002ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002c4:	fa1f fc85 	uxth.w	ip, r5
 80002c8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d0:	fb07 f10c 	mul.w	r1, r7, ip
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x60>
 80002d8:	18eb      	adds	r3, r5, r3
 80002da:	f107 30ff 	add.w	r0, r7, #4294967295
 80002de:	f080 811b 	bcs.w	8000518 <__udivmoddi4+0x28c>
 80002e2:	4299      	cmp	r1, r3
 80002e4:	f240 8118 	bls.w	8000518 <__udivmoddi4+0x28c>
 80002e8:	3f02      	subs	r7, #2
 80002ea:	442b      	add	r3, r5
 80002ec:	1a5b      	subs	r3, r3, r1
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000300:	45a4      	cmp	ip, r4
 8000302:	d909      	bls.n	8000318 <__udivmoddi4+0x8c>
 8000304:	192c      	adds	r4, r5, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	f080 8107 	bcs.w	800051c <__udivmoddi4+0x290>
 800030e:	45a4      	cmp	ip, r4
 8000310:	f240 8104 	bls.w	800051c <__udivmoddi4+0x290>
 8000314:	3802      	subs	r0, #2
 8000316:	442c      	add	r4, r5
 8000318:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	2700      	movs	r7, #0
 8000322:	b11e      	cbz	r6, 800032c <__udivmoddi4+0xa0>
 8000324:	40d4      	lsrs	r4, r2
 8000326:	2300      	movs	r3, #0
 8000328:	e9c6 4300 	strd	r4, r3, [r6]
 800032c:	4639      	mov	r1, r7
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0xbe>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80eb 	beq.w	8000512 <__udivmoddi4+0x286>
 800033c:	2700      	movs	r7, #0
 800033e:	e9c6 0100 	strd	r0, r1, [r6]
 8000342:	4638      	mov	r0, r7
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f783 	clz	r7, r3
 800034e:	2f00      	cmp	r7, #0
 8000350:	d147      	bne.n	80003e2 <__udivmoddi4+0x156>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xd0>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80fa 	bhi.w	8000550 <__udivmoddi4+0x2c4>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0303 	sbc.w	r3, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4698      	mov	r8, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d0e0      	beq.n	800032c <__udivmoddi4+0xa0>
 800036a:	e9c6 4800 	strd	r4, r8, [r6]
 800036e:	e7dd      	b.n	800032c <__udivmoddi4+0xa0>
 8000370:	b902      	cbnz	r2, 8000374 <__udivmoddi4+0xe8>
 8000372:	deff      	udf	#255	; 0xff
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	2a00      	cmp	r2, #0
 800037a:	f040 808f 	bne.w	800049c <__udivmoddi4+0x210>
 800037e:	1b49      	subs	r1, r1, r5
 8000380:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000384:	fa1f f885 	uxth.w	r8, r5
 8000388:	2701      	movs	r7, #1
 800038a:	fbb1 fcfe 	udiv	ip, r1, lr
 800038e:	0c23      	lsrs	r3, r4, #16
 8000390:	fb0e 111c 	mls	r1, lr, ip, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb08 f10c 	mul.w	r1, r8, ip
 800039c:	4299      	cmp	r1, r3
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x124>
 80003a0:	18eb      	adds	r3, r5, r3
 80003a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x122>
 80003a8:	4299      	cmp	r1, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2bc>
 80003ae:	4684      	mov	ip, r0
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	b2a3      	uxth	r3, r4
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c0:	fb08 f800 	mul.w	r8, r8, r0
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x14c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x14a>
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	f200 80b6 	bhi.w	8000542 <__udivmoddi4+0x2b6>
 80003d6:	4618      	mov	r0, r3
 80003d8:	eba4 0408 	sub.w	r4, r4, r8
 80003dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e0:	e79f      	b.n	8000322 <__udivmoddi4+0x96>
 80003e2:	f1c7 0c20 	rsb	ip, r7, #32
 80003e6:	40bb      	lsls	r3, r7
 80003e8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003ec:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f0:	fa01 f407 	lsl.w	r4, r1, r7
 80003f4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003f8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003fc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000400:	4325      	orrs	r5, r4
 8000402:	fbb3 f9f8 	udiv	r9, r3, r8
 8000406:	0c2c      	lsrs	r4, r5, #16
 8000408:	fb08 3319 	mls	r3, r8, r9, r3
 800040c:	fa1f fa8e 	uxth.w	sl, lr
 8000410:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000414:	fb09 f40a 	mul.w	r4, r9, sl
 8000418:	429c      	cmp	r4, r3
 800041a:	fa02 f207 	lsl.w	r2, r2, r7
 800041e:	fa00 f107 	lsl.w	r1, r0, r7
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b0>
 8000424:	eb1e 0303 	adds.w	r3, lr, r3
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	f080 8087 	bcs.w	800053e <__udivmoddi4+0x2b2>
 8000430:	429c      	cmp	r4, r3
 8000432:	f240 8084 	bls.w	800053e <__udivmoddi4+0x2b2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4473      	add	r3, lr
 800043c:	1b1b      	subs	r3, r3, r4
 800043e:	b2ad      	uxth	r5, r5
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3310 	mls	r3, r8, r0, r3
 8000448:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800044c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000450:	45a2      	cmp	sl, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1da>
 8000454:	eb1e 0404 	adds.w	r4, lr, r4
 8000458:	f100 33ff 	add.w	r3, r0, #4294967295
 800045c:	d26b      	bcs.n	8000536 <__udivmoddi4+0x2aa>
 800045e:	45a2      	cmp	sl, r4
 8000460:	d969      	bls.n	8000536 <__udivmoddi4+0x2aa>
 8000462:	3802      	subs	r0, #2
 8000464:	4474      	add	r4, lr
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	eba4 040a 	sub.w	r4, r4, sl
 8000472:	454c      	cmp	r4, r9
 8000474:	46c2      	mov	sl, r8
 8000476:	464b      	mov	r3, r9
 8000478:	d354      	bcc.n	8000524 <__udivmoddi4+0x298>
 800047a:	d051      	beq.n	8000520 <__udivmoddi4+0x294>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d069      	beq.n	8000554 <__udivmoddi4+0x2c8>
 8000480:	ebb1 050a 	subs.w	r5, r1, sl
 8000484:	eb64 0403 	sbc.w	r4, r4, r3
 8000488:	fa04 fc0c 	lsl.w	ip, r4, ip
 800048c:	40fd      	lsrs	r5, r7
 800048e:	40fc      	lsrs	r4, r7
 8000490:	ea4c 0505 	orr.w	r5, ip, r5
 8000494:	e9c6 5400 	strd	r5, r4, [r6]
 8000498:	2700      	movs	r7, #0
 800049a:	e747      	b.n	800032c <__udivmoddi4+0xa0>
 800049c:	f1c2 0320 	rsb	r3, r2, #32
 80004a0:	fa20 f703 	lsr.w	r7, r0, r3
 80004a4:	4095      	lsls	r5, r2
 80004a6:	fa01 f002 	lsl.w	r0, r1, r2
 80004aa:	fa21 f303 	lsr.w	r3, r1, r3
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	4338      	orrs	r0, r7
 80004b4:	0c01      	lsrs	r1, r0, #16
 80004b6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ba:	fa1f f885 	uxth.w	r8, r5
 80004be:	fb0e 3317 	mls	r3, lr, r7, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb07 f308 	mul.w	r3, r7, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	fa04 f402 	lsl.w	r4, r4, r2
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x256>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004d8:	d22f      	bcs.n	800053a <__udivmoddi4+0x2ae>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d92d      	bls.n	800053a <__udivmoddi4+0x2ae>
 80004de:	3f02      	subs	r7, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	1acb      	subs	r3, r1, r3
 80004e4:	b281      	uxth	r1, r0
 80004e6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ea:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f2:	fb00 f308 	mul.w	r3, r0, r8
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x27e>
 80004fa:	1869      	adds	r1, r5, r1
 80004fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000500:	d217      	bcs.n	8000532 <__udivmoddi4+0x2a6>
 8000502:	428b      	cmp	r3, r1
 8000504:	d915      	bls.n	8000532 <__udivmoddi4+0x2a6>
 8000506:	3802      	subs	r0, #2
 8000508:	4429      	add	r1, r5
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000510:	e73b      	b.n	800038a <__udivmoddi4+0xfe>
 8000512:	4637      	mov	r7, r6
 8000514:	4630      	mov	r0, r6
 8000516:	e709      	b.n	800032c <__udivmoddi4+0xa0>
 8000518:	4607      	mov	r7, r0
 800051a:	e6e7      	b.n	80002ec <__udivmoddi4+0x60>
 800051c:	4618      	mov	r0, r3
 800051e:	e6fb      	b.n	8000318 <__udivmoddi4+0x8c>
 8000520:	4541      	cmp	r1, r8
 8000522:	d2ab      	bcs.n	800047c <__udivmoddi4+0x1f0>
 8000524:	ebb8 0a02 	subs.w	sl, r8, r2
 8000528:	eb69 020e 	sbc.w	r2, r9, lr
 800052c:	3801      	subs	r0, #1
 800052e:	4613      	mov	r3, r2
 8000530:	e7a4      	b.n	800047c <__udivmoddi4+0x1f0>
 8000532:	4660      	mov	r0, ip
 8000534:	e7e9      	b.n	800050a <__udivmoddi4+0x27e>
 8000536:	4618      	mov	r0, r3
 8000538:	e795      	b.n	8000466 <__udivmoddi4+0x1da>
 800053a:	4667      	mov	r7, ip
 800053c:	e7d1      	b.n	80004e2 <__udivmoddi4+0x256>
 800053e:	4681      	mov	r9, r0
 8000540:	e77c      	b.n	800043c <__udivmoddi4+0x1b0>
 8000542:	3802      	subs	r0, #2
 8000544:	442c      	add	r4, r5
 8000546:	e747      	b.n	80003d8 <__udivmoddi4+0x14c>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	442b      	add	r3, r5
 800054e:	e72f      	b.n	80003b0 <__udivmoddi4+0x124>
 8000550:	4638      	mov	r0, r7
 8000552:	e708      	b.n	8000366 <__udivmoddi4+0xda>
 8000554:	4637      	mov	r7, r6
 8000556:	e6e9      	b.n	800032c <__udivmoddi4+0xa0>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <commands>:
#include "commands.h"
#include <string.h>
#include <stdlib.h>

command_t commands(uint8_t* command, buffer_t* measbuff)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09e      	sub	sp, #120	; 0x78
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
	command_t comm = {"", 0};
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2260      	movs	r2, #96	; 0x60
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 fdac 	bl	80050d2 <memset>
 800057a:	2300      	movs	r3, #0
 800057c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	if(strcmp(command, "D1") == 0)
 8000580:	4943      	ldr	r1, [pc, #268]	; (8000690 <commands+0x134>)
 8000582:	68b8      	ldr	r0, [r7, #8]
 8000584:	f7ff fe58 	bl	8000238 <strcmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d114      	bne.n	80005b8 <commands+0x5c>
	{
		itoa(getOldestElement(measbuff),  comm.TX_payload, COMM_LEN);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 fb79 	bl	8000c86 <getOldestElement>
 8000594:	4603      	mov	r3, r0
 8000596:	4618      	mov	r0, r3
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	220a      	movs	r2, #10
 800059e:	4619      	mov	r1, r3
 80005a0:	f004 fd8a 	bl	80050b8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe4f 	bl	800024c <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005b6:	e05f      	b.n	8000678 <commands+0x11c>
	}
	else if(strcmp(command, "D2") == 0)
 80005b8:	4936      	ldr	r1, [pc, #216]	; (8000694 <commands+0x138>)
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f7ff fe3c 	bl	8000238 <strcmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d114      	bne.n	80005f0 <commands+0x94>
	{
		itoa(getLastElement(measbuff), comm.TX_payload, COMM_LEN);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fb44 	bl	8000c54 <getLastElement>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	220a      	movs	r2, #10
 80005d6:	4619      	mov	r1, r3
 80005d8:	f004 fd6e 	bl	80050b8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe33 	bl	800024c <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80005ee:	e043      	b.n	8000678 <commands+0x11c>
	}
	else if(command[0] == 'I')
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b49      	cmp	r3, #73	; 0x49
 80005f6:	d11c      	bne.n	8000632 <commands+0xd6>
	{
		itoa(getElementByIdx(measbuff, atoi(command+1)), comm.TX_payload, COMM_LEN);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fd1b 	bl	8005038 <atoi>
 8000602:	4603      	mov	r3, r0
 8000604:	b29b      	uxth	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fb55 	bl	8000cb8 <getElementByIdx>
 800060e:	4603      	mov	r3, r0
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	220a      	movs	r2, #10
 8000618:	4619      	mov	r1, r3
 800061a:	f004 fd4d 	bl	80050b8 <itoa>
		comm.len = (uint16_t)strlen(comm.TX_payload);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe12 	bl	800024c <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29b      	uxth	r3, r3
 800062c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000630:	e022      	b.n	8000678 <commands+0x11c>
	}
	else if(strcmp(command, "CLR") == 0)
 8000632:	4919      	ldr	r1, [pc, #100]	; (8000698 <commands+0x13c>)
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f7ff fdff 	bl	8000238 <strcmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10f      	bne.n	8000660 <commands+0x104>
	{
		bufferClear(measbuff);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 fc14 	bl	8000e6e <bufferClear>
		comm.len = (uint16_t)strlen("cleared");
 8000646:	2307      	movs	r3, #7
 8000648:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "cleared", comm.len);
 800064c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000650:	461a      	mov	r2, r3
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4911      	ldr	r1, [pc, #68]	; (800069c <commands+0x140>)
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fd2f 	bl	80050bc <memcpy>
 800065e:	e00b      	b.n	8000678 <commands+0x11c>
	}
	else
	{
		comm.len = (uint16_t)strlen("unknown");
 8000660:	2307      	movs	r3, #7
 8000662:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		memcpy(comm.TX_payload, "unknown", comm.len);
 8000666:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800066a:	461a      	mov	r2, r3
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	490b      	ldr	r1, [pc, #44]	; (80006a0 <commands+0x144>)
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fd22 	bl	80050bc <memcpy>
	}

	return comm;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4618      	mov	r0, r3
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2266      	movs	r2, #102	; 0x66
 8000682:	4619      	mov	r1, r3
 8000684:	f004 fd1a 	bl	80050bc <memcpy>
}
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	3778      	adds	r7, #120	; 0x78
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080052dc 	.word	0x080052dc
 8000694:	080052e0 	.word	0x080052e0
 8000698:	080052e4 	.word	0x080052e4
 800069c:	080052e8 	.word	0x080052e8
 80006a0:	080052f0 	.word	0x080052f0

080006a4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b68      	ldr	r3, [pc, #416]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a67      	ldr	r2, [pc, #412]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b65      	ldr	r3, [pc, #404]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a61      	ldr	r2, [pc, #388]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b5c      	ldr	r3, [pc, #368]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a5b      	ldr	r2, [pc, #364]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b59      	ldr	r3, [pc, #356]	; (800085c <MX_GPIO_Init+0x1b8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b56      	ldr	r3, [pc, #344]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a55      	ldr	r2, [pc, #340]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b53      	ldr	r3, [pc, #332]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <MX_GPIO_Init+0x1b8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b47      	ldr	r3, [pc, #284]	; (800085c <MX_GPIO_Init+0x1b8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000750:	4843      	ldr	r0, [pc, #268]	; (8000860 <MX_GPIO_Init+0x1bc>)
 8000752:	f001 fb4b 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	4842      	ldr	r0, [pc, #264]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800075c:	f001 fb46 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	483c      	ldr	r0, [pc, #240]	; (8000868 <MX_GPIO_Init+0x1c4>)
 8000778:	f001 f98e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800077c:	2332      	movs	r3, #50	; 0x32
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4834      	ldr	r0, [pc, #208]	; (8000868 <MX_GPIO_Init+0x1c4>)
 8000798:	f001 f97e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800079c:	2386      	movs	r3, #134	; 0x86
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ac:	230b      	movs	r3, #11
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	482d      	ldr	r0, [pc, #180]	; (800086c <MX_GPIO_Init+0x1c8>)
 80007b8:	f001 f96e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_GPIO_Init+0x1bc>)
 80007d6:	f001 f95f 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x1bc>)
 80007f8:	f001 f94e 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <MX_GPIO_Init+0x1c0>)
 8000814:	f001 f940 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800082c:	f001 f934 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000830:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000842:	230b      	movs	r3, #11
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_GPIO_Init+0x1c0>)
 800084e:	f001 f923 	bl	8001a98 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400
 8000864:	40021800 	.word	0x40021800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b0f1      	sub	sp, #452	; 0x1c4
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fd34 	bl	80012e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8a7 	bl	80009cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff11 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000882:	f000 fb93 	bl	8000fac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000886:	f000 fc79 	bl	800117c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  bufferInit(&measbuff); //fill measurement buffer with dummy data
 800088a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fac2 	bl	8000e18 <bufferInit>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800089a:	e01c      	b.n	80008d6 <main+0x66>
  {
	  bufferAddElement(&measbuff, (i+1234)*(i%1548));
 800089c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008a0:	f203 41d2 	addw	r1, r3, #1234	; 0x4d2
 80008a4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80008a8:	0893      	lsrs	r3, r2, #2
 80008aa:	4841      	ldr	r0, [pc, #260]	; (80009b0 <main+0x140>)
 80008ac:	fba0 0303 	umull	r0, r3, r0, r3
 80008b0:	09db      	lsrs	r3, r3, #7
 80008b2:	f240 600c 	movw	r0, #1548	; 0x60c
 80008b6:	fb00 f303 	mul.w	r3, r0, r3
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	fb03 f201 	mul.w	r2, r3, r1
 80008c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fa3e 	bl	8000d48 <bufferAddElement>
  for(uint32_t i = 0; i < RING_BUF_SIZE; ++i)
 80008cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008d0:	3301      	adds	r3, #1
 80008d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80008d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80008da:	2b45      	cmp	r3, #69	; 0x45
 80008dc:	d9de      	bls.n	800089c <main+0x2c>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t addr = 0x08010010;
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <main+0x144>)
 80008e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  if(HAL_OK == HAL_FLASH_Unlock())
 80008e4:	f000 ff7c 	bl	80017e0 <HAL_FLASH_Unlock>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d124      	bne.n	8000938 <main+0xc8>
  {
	 //HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ptr, 0x00000000);
	  int i = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  char* n = "Hello world!";
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <main+0x148>)
 80008f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  for(;i < 13; ++i)
 80008fa:	e017      	b.n	800092c <main+0xbc>
	  {
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, n[i]);
 80008fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000900:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000904:	18d1      	adds	r1, r2, r3
 8000906:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800090a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f04f 0400 	mov.w	r4, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4623      	mov	r3, r4
 800091c:	2000      	movs	r0, #0
 800091e:	f000 ff03 	bl	8001728 <HAL_FLASH_Program>
	  for(;i < 13; ++i)
 8000922:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000926:	3301      	adds	r3, #1
 8000928:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800092c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000930:	2b0c      	cmp	r3, #12
 8000932:	dde3      	ble.n	80008fc <main+0x8c>
	  }

	  HAL_FLASH_Lock();
 8000934:	f000 ff76 	bl	8001824 <HAL_FLASH_Lock>

  }

  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RX.c, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	4920      	ldr	r1, [pc, #128]	; (80009bc <main+0x14c>)
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <main+0x150>)
 800093e:	f002 fda1 	bl	8003484 <HAL_UART_Receive_IT>


  while(1)
  {

	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <main+0x154>)
 8000944:	7d1b      	ldrb	r3, [r3, #20]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d1fa      	bne.n	8000942 <main+0xd2>
	{
		myFrame = prarseRxBuffer();
 800094c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000950:	463b      	mov	r3, r7
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f8f0 	bl	8000b38 <prarseRxBuffer>
 8000958:	463a      	mov	r2, r7
 800095a:	4623      	mov	r3, r4
 800095c:	4614      	mov	r4, r2
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	6861      	ldr	r1, [r4, #4]
 8000962:	68a2      	ldr	r2, [r4, #8]
 8000964:	c307      	stmia	r3!, {r0, r1, r2}
 8000966:	89a2      	ldrh	r2, [r4, #12]
 8000968:	7ba1      	ldrb	r1, [r4, #14]
 800096a:	801a      	strh	r2, [r3, #0]
 800096c:	460a      	mov	r2, r1
 800096e:	709a      	strb	r2, [r3, #2]
		if(myFrame.frameOK)
 8000970:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d014      	beq.n	80009a4 <main+0x134>
		{
			command_t co = commands(myFrame.command, &measbuff);
 800097a:	f107 0014 	add.w	r0, r7, #20
 800097e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000982:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000986:	3304      	adds	r3, #4
 8000988:	4619      	mov	r1, r3
 800098a:	f7ff fde7 	bl	800055c <commands>
			HAL_UART_Transmit_IT(&huart3, co.TX_payload, co.len);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <main+0x150>)
 800099e:	f002 fd03 	bl	80033a8 <HAL_UART_Transmit_IT>
 80009a2:	e7ce      	b.n	8000942 <main+0xd2>
		}
		else
		{
			HAL_UART_Transmit_IT(&huart3, (const uint8_t*)"frame Error", strlen("frame Error"));
 80009a4:	220b      	movs	r2, #11
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <main+0x158>)
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <main+0x150>)
 80009aa:	f002 fcfd 	bl	80033a8 <HAL_UART_Transmit_IT>
	if (RX.RX_Frame_Cplt == 1) //nastapilo zakonczenie nadawania ramki
 80009ae:	e7c8      	b.n	8000942 <main+0xd2>
 80009b0:	54abfd5b 	.word	0x54abfd5b
 80009b4:	08010010 	.word	0x08010010
 80009b8:	080052f8 	.word	0x080052f8
 80009bc:	2000020d 	.word	0x2000020d
 80009c0:	20000210 	.word	0x20000210
 80009c4:	200001f8 	.word	0x200001f8
 80009c8:	08005308 	.word	0x08005308

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0b8      	sub	sp, #224	; 0xe0
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fb79 	bl	80050d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2290      	movs	r2, #144	; 0x90
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 fb6a 	bl	80050d2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009fe:	f001 fb57 	bl	80020b0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <SystemClock_Config+0x120>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a39      	ldr	r2, [pc, #228]	; (8000aec <SystemClock_Config+0x120>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <SystemClock_Config+0x120>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a1a:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <SystemClock_Config+0x124>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a22:	4a33      	ldr	r2, [pc, #204]	; (8000af0 <SystemClock_Config+0x124>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <SystemClock_Config+0x124>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a58:	2360      	movs	r3, #96	; 0x60
 8000a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb7e 	bl	8002170 <HAL_RCC_OscConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a7a:	f000 f83d 	bl	8000af8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a7e:	f001 fb27 	bl	80020d0 <HAL_PWREx_EnableOverDrive>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a88:	f000 f836 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fe0a 	bl	80026cc <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000abe:	f000 f81b 	bl	8000af8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <SystemClock_Config+0x128>)
 8000ac4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 fff1 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000ae0:	f000 f80a 	bl	8000af8 <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	37e0      	adds	r7, #224	; 0xe0
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000
 8000af4:	00200100 	.word	0x00200100

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <RXbufferClear>:
#include "protocol.h"
#include "stdlib.h"

void RXbufferClear(uint8_t* buff, int size) //memset
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
	while (size)
 8000b10:	e008      	b.n	8000b24 <RXbufferClear+0x1e>
	{
		*buff = '\0';
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		size--;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	603b      	str	r3, [r7, #0]
		buff++;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
	while (size)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f3      	bne.n	8000b12 <RXbufferClear+0xc>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <prarseRxBuffer>:
//wystepowania znaków $ oraz #, tzn ramka posiada prawidłowy format: $_________#
//              "$       5            7             05                    12345         255             #
//               ^       ^            ^             ^                     ^             ^               ^
//      znak poczatku,  adres zroda,  adres celu,  ilość danych w ramce,  dane ramki, suma konrolna   znak konca ramki
framecontent prarseRxBuffer()
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b08d      	sub	sp, #52	; 0x34
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	framecontent RxFrame;
	uint8_t l_checksum = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t tempstring[COMMAND_LEN] = "";
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	809a      	strh	r2, [r3, #4]
	RxFrame.frameOK = false;
 8000b54:	2300      	movs	r3, #0
 8000b56:	763b      	strb	r3, [r7, #24]
	if(*RX.RX_Buffer == '$')
 8000b58:	4b3c      	ldr	r3, [pc, #240]	; (8000c4c <prarseRxBuffer+0x114>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b24      	cmp	r3, #36	; 0x24
 8000b60:	d161      	bne.n	8000c26 <prarseRxBuffer+0xee>
	{
		RxFrame.src_address = RX.RX_Buffer[1] - 48;
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <prarseRxBuffer+0x114>)
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	3b30      	subs	r3, #48	; 0x30
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	767b      	strb	r3, [r7, #25]
		RxFrame.dst_address = RX.RX_Buffer[2] - 48;
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <prarseRxBuffer+0x114>)
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	3b30      	subs	r3, #48	; 0x30
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	76bb      	strb	r3, [r7, #26]
		memcpy(tempstring, (const char*)&RX.RX_Buffer[3], 2);
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <prarseRxBuffer+0x114>)
 8000b7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	81bb      	strh	r3, [r7, #12]
		RxFrame.data_count = atoi((const char*)tempstring);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 fa55 	bl	8005038 <atoi>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	76fb      	strb	r3, [r7, #27]
		if(RxFrame.data_count <= 10)
 8000b94:	7efb      	ldrb	r3, [r7, #27]
 8000b96:	2b0a      	cmp	r3, #10
 8000b98:	d845      	bhi.n	8000c26 <prarseRxBuffer+0xee>
		{
			RXbufferClear(tempstring, COMMAND_LEN);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	210a      	movs	r1, #10
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffb0 	bl	8000b06 <RXbufferClear>
			RXbufferClear(RxFrame.command, COMMAND_LEN);
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	3304      	adds	r3, #4
 8000bac:	210a      	movs	r1, #10
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffa9 	bl	8000b06 <RXbufferClear>
			memcpy(RxFrame.command, (const char*)&RX.RX_Buffer[5], RxFrame.data_count);
 8000bb4:	7efb      	ldrb	r3, [r7, #27]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	4924      	ldr	r1, [pc, #144]	; (8000c50 <prarseRxBuffer+0x118>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fa7b 	bl	80050bc <memcpy>
			memcpy(tempstring, (const char*)&RX.RX_Buffer[5] + RxFrame.data_count, 3);
 8000bc6:	7efb      	ldrb	r3, [r7, #27]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <prarseRxBuffer+0x118>)
 8000bcc:	18d1      	adds	r1, r2, r3
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fa71 	bl	80050bc <memcpy>
			RxFrame.checksum = atoi((const char*)tempstring);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fa2a 	bl	8005038 <atoi>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf0:	e00c      	b.n	8000c0c <prarseRxBuffer+0xd4>
			{
				l_checksum += RX.RX_Buffer[5 + offset];
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	3305      	adds	r3, #5
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <prarseRxBuffer+0x114>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c00:	4413      	add	r3, r2
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (int offset = 0; offset < RxFrame.data_count; ++offset)
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c0c:	7efb      	ldrb	r3, [r7, #27]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	4293      	cmp	r3, r2
 8000c14:	dbed      	blt.n	8000bf2 <prarseRxBuffer+0xba>
			}
			if (l_checksum == RxFrame.checksum)
 8000c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d101      	bne.n	8000c26 <prarseRxBuffer+0xee>
			{
				RxFrame.frameOK = true;
 8000c22:	2301      	movs	r3, #1
 8000c24:	763b      	strb	r3, [r7, #24]
			}
		}
	}
	RX.RX_Frame_Cplt = 0;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <prarseRxBuffer+0x114>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	751a      	strb	r2, [r3, #20]
	return RxFrame;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	461c      	mov	r4, r3
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c36:	6020      	str	r0, [r4, #0]
 8000c38:	6061      	str	r1, [r4, #4]
 8000c3a:	60a2      	str	r2, [r4, #8]
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	81a2      	strh	r2, [r4, #12]
 8000c42:	73a3      	strb	r3, [r4, #14]
}
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	3734      	adds	r7, #52	; 0x34
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	200001f8 	.word	0x200001f8
 8000c50:	200001fd 	.word	0x200001fd

08000c54 <getLastElement>:
#include <inttypes.h>
#include "ringbuff.h"
#include "stdlib.h"

uint32_t getLastElement(buffer_t* buff)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <getLastElement+0x24>
	{
		ret = *buff->begin_handler;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <getOldestElement>:

uint32_t getOldestElement(buffer_t* buff)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
	if (buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <getOldestElement+0x24>
	{
		ret = *buff->end_handler;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <getElementByIdx>:

uint32_t getElementByIdx(buffer_t* buff, uint16_t idx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
	uint32_t ret = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
	uint32_t temp_adr = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
	if (idx < RING_BUF_SIZE &&
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	2b45      	cmp	r3, #69	; 0x45
 8000cd0:	d833      	bhi.n	8000d3a <getElementByIdx+0x82>
		buff->flags.clr_flag == BUFF_NOT_EMPTY)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
	if (idx < RING_BUF_SIZE &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d02b      	beq.n	8000d3a <getElementByIdx+0x82>
	{
		if ((buff->end_handler + idx) >= (buff->elements + RING_BUF_SIZE))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	441a      	add	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d319      	bcc.n	8000d2c <getElementByIdx+0x74>
		{
			temp_adr = (uint32_t)(buff->end_handler + idx) % (uint32_t)(buff->elements + RING_BUF_SIZE - 1);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8000d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d0e:	fb02 f201 	mul.w	r2, r2, r1
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
			ret = *(uint32_t*)(buff->elements + (temp_adr / 4) - 1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0208 	add.w	r2, r3, #8
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	3b04      	subs	r3, #4
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e006      	b.n	8000d3a <getElementByIdx+0x82>
		}
		else
		{
			ret = *(buff->end_handler + idx);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
		}
	}
	return ret;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <bufferAddElement>:


void bufferAddElement(buffer_t* buff, uint32_t element)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	if (BUFF_NOT_OVF == buff->flags.buffer_overflow_flag)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d12c      	bne.n	8000dbc <bufferAddElement+0x74>
	{
		if (BUFF_EMPTY == buff->flags.clr_flag)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10b      	bne.n	8000d8a <bufferAddElement+0x42>
		{
			*(buff->begin_handler) = element;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	601a      	str	r2, [r3, #0]
			buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
		{
			buff->end_handler = buff->elements;
		}
		*(buff->begin_handler) = element;
	}
}
 8000d88:	e040      	b.n	8000e0c <bufferAddElement+0xc4>
			buff->begin_handler++;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1d1a      	adds	r2, r3, #4
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	601a      	str	r2, [r3, #0]
			*(buff->begin_handler) = element;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	601a      	str	r2, [r3, #0]
			if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE - 1))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3308      	adds	r3, #8
 8000da4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d32f      	bcc.n	8000e0c <bufferAddElement+0xc4>
				buff->flags.buffer_overflow_flag = BUFF_OVF;
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
}
 8000dba:	e027      	b.n	8000e0c <bufferAddElement+0xc4>
		buff->end_handler++;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
		buff->begin_handler++;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	601a      	str	r2, [r3, #0]
		if (buff->begin_handler >= buff->elements + (RING_BUF_SIZE))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d304      	bcc.n	8000dea <bufferAddElement+0xa2>
			buff->begin_handler = buff->elements;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f103 0208 	add.w	r2, r3, #8
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
		if (buff->end_handler >= buff->elements + (RING_BUF_SIZE))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3308      	adds	r3, #8
 8000df2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d304      	bcc.n	8000e04 <bufferAddElement+0xbc>
			buff->end_handler = buff->elements;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f103 0208 	add.w	r2, r3, #8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	605a      	str	r2, [r3, #4]
		*(buff->begin_handler) = element;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <bufferInit>:

uint8_t bufferInit(buffer_t* buff)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

	buff->flags.clr_flag = BUFF_NOT_EMPTY;
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	buff->flags.buffer_overflow_flag = BUFF_NOT_OVF;
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000e38:	f36f 0341 	bfc	r3, #1, #1
 8000e3c:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
	if (OK == bufferClear(buff))
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f814 	bl	8000e6e <bufferClear>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10b      	bne.n	8000e64 <bufferInit+0x4c>
	{
		buff->begin_handler = buff->elements;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f103 0208 	add.w	r2, r3, #8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
		buff->end_handler = buff->elements;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f103 0208 	add.w	r2, r3, #8
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]

		ret = OK;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <bufferClear>:

uint8_t bufferClear(buffer_t* buff)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	uint8_t ret = NOK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
	if (BUFF_NOT_EMPTY == buff->flags.clr_flag)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01f      	beq.n	8000eca <bufferClear+0x5c>
	{
		uint16_t idx = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	81bb      	strh	r3, [r7, #12]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	81bb      	strh	r3, [r7, #12]
 8000e92:	e008      	b.n	8000ea6 <bufferClear+0x38>
		{
			buff->elements[idx] = 0;
 8000e94:	89ba      	ldrh	r2, [r7, #12]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3202      	adds	r2, #2
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (idx = 0; idx < RING_BUF_SIZE; ++idx)
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	81bb      	strh	r3, [r7, #12]
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	2b45      	cmp	r3, #69	; 0x45
 8000eaa:	d9f3      	bls.n	8000e94 <bufferClear+0x26>
		}
		buff->begin_handler = NULL;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
		buff->end_handler = NULL;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]

		buff->flags.clr_flag = BUFF_EMPTY;
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
 8000ebe:	f36f 0300 	bfc	r3, #0, #1
 8000ec2:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120

		ret = OK;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f9f6 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <USART3_IRQHandler+0x10>)
 8000f7a:	f002 fad1 	bl	8003520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000210 	.word	0x20000210

08000f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_USART3_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART3_UART_Init+0x58>)
 8000ff0:	f002 f98c 	bl	800330c <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f7ff fd7d 	bl	8000af8 <Error_Handler>
  }

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000210 	.word	0x20000210
 8001008:	40004800 	.word	0x40004800

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_UART_MspInit+0x8c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d130      	bne.n	8001090 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_UART_MspInit+0x90>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <HAL_UART_MspInit+0x90>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_UART_MspInit+0x90>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x90>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_UART_MspInit+0x90>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_UART_MspInit+0x90>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800105e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001070:	2307      	movs	r3, #7
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <HAL_UART_MspInit+0x94>)
 800107c:	f000 fd0c 	bl	8001a98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2027      	movs	r0, #39	; 0x27
 8001086:	f000 fa86 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800108a:	2027      	movs	r0, #39	; 0x27
 800108c:	f000 fa9f 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40004800 	.word	0x40004800
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	//char tmp_char = c;
	//'$', '5', '7', '0', '2', 'D', '5', '1', '2', '1', '#'
	if (huart1->Instance == USART3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_UART_RxCpltCallback+0xc8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d156      	bne.n	8001164 <HAL_UART_RxCpltCallback+0xc0>
	{
		if(RX.RX_Buff_Idx > RX_BUFF_SIZE - 1)
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010b8:	7cdb      	ldrb	r3, [r3, #19]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d902      	bls.n	80010c6 <HAL_UART_RxCpltCallback+0x22>
		{
			RX.RX_Buff_Idx = 0;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	74da      	strb	r2, [r3, #19]
		}
		if (RX.c == '$')
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010c8:	7d5b      	ldrb	r3, [r3, #21]
 80010ca:	2b24      	cmp	r3, #36	; 0x24
 80010cc:	d11e      	bne.n	800110c <HAL_UART_RxCpltCallback+0x68>
		{
			RX.RX_Frame_Cplt = 0;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	751a      	strb	r2, [r3, #20]
			RX.RX_Buff_Idx = 0;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	74da      	strb	r2, [r3, #19]
			RXbufferClear(RX.RX_Buffer, RX_BUFF_SIZE);
 80010da:	2113      	movs	r1, #19
 80010dc:	4824      	ldr	r0, [pc, #144]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010de:	f7ff fd12 	bl	8000b06 <RXbufferClear>
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010e4:	7cdb      	ldrb	r3, [r3, #19]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010ec:	7d59      	ldrb	r1, [r3, #21]
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010f0:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx++;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010f4:	7cdb      	ldrb	r3, [r3, #19]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 80010fe:	74da      	strb	r2, [r3, #19]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	491c      	ldr	r1, [pc, #112]	; (8001174 <HAL_UART_RxCpltCallback+0xd0>)
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <HAL_UART_RxCpltCallback+0xd4>)
 8001106:	f002 f9bd 	bl	8003484 <HAL_UART_Receive_IT>
			return;
 800110a:	e02b      	b.n	8001164 <HAL_UART_RxCpltCallback+0xc0>
		}
		else if (RX.c == '#')
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800110e:	7d5b      	ldrb	r3, [r3, #21]
 8001110:	2b23      	cmp	r3, #35	; 0x23
 8001112:	d113      	bne.n	800113c <HAL_UART_RxCpltCallback+0x98>
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 8001116:	7cdb      	ldrb	r3, [r3, #19]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800111e:	7d59      	ldrb	r1, [r3, #21]
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 8001122:	5499      	strb	r1, [r3, r2]
			RX.RX_Buff_Idx = 0;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 8001126:	2200      	movs	r2, #0
 8001128:	74da      	strb	r2, [r3, #19]
			RX.RX_Frame_Cplt = 1;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800112c:	2201      	movs	r2, #1
 800112e:	751a      	strb	r2, [r3, #20]
			HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	4910      	ldr	r1, [pc, #64]	; (8001174 <HAL_UART_RxCpltCallback+0xd0>)
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <HAL_UART_RxCpltCallback+0xd4>)
 8001136:	f002 f9a5 	bl	8003484 <HAL_UART_Receive_IT>
			return;
 800113a:	e013      	b.n	8001164 <HAL_UART_RxCpltCallback+0xc0>
		}
		else
		{
			RX.RX_Buffer[RX.RX_Buff_Idx] = RX.c;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800113e:	7cdb      	ldrb	r3, [r3, #19]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 8001146:	7d59      	ldrb	r1, [r3, #21]
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800114a:	5499      	strb	r1, [r3, r2]
		}
		RX.RX_Buff_Idx++;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 800114e:	7cdb      	ldrb	r3, [r3, #19]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	3301      	adds	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_UART_RxCpltCallback+0xcc>)
 8001158:	74da      	strb	r2, [r3, #19]
		HAL_UART_Receive_IT(&huart3, &RX.c, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <HAL_UART_RxCpltCallback+0xd0>)
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_UART_RxCpltCallback+0xd4>)
 8001160:	f002 f990 	bl	8003484 <HAL_UART_Receive_IT>
	}
}
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004800 	.word	0x40004800
 8001170:	200001f8 	.word	0x200001f8
 8001174:	2000020d 	.word	0x2000020d
 8001178:	20000210 	.word	0x20000210

0800117c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	2206      	movs	r2, #6
 800118c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001190:	2202      	movs	r2, #2
 8001192:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119c:	2202      	movs	r2, #2
 800119e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c0:	f000 fe2d 	bl	8001e1e <HAL_PCD_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011ca:	f7ff fc95 	bl	8000af8 <Error_Handler>
  }

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000294 	.word	0x20000294

080011d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f8:	d141      	bne.n	800127e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001212:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001224:	230a      	movs	r3, #10
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <HAL_PCD_MspInit+0xb4>)
 8001230:	f000 fc32 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <HAL_PCD_MspInit+0xb4>)
 800124a:	f000 fc25 	bl	8001a98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6353      	str	r3, [r2, #52]	; 0x34
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_PCD_MspInit+0xb0>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001296:	490e      	ldr	r1, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ac:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ba:	f7ff fe65 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f003 febf 	bl	8005040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff fad5 	bl	8000870 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80012d4:	0800546c 	.word	0x0800546c
  ldr r2, =_sbss
 80012d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80012dc:	200006b8 	.word	0x200006b8

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>

080012e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f94a 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f805 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f2:	f7ff fdf1 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f965 	bl	80015ea <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f92d 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	20000698 	.word	0x20000698

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000698 	.word	0x20000698

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_Delay+0x40>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffde 	bl	8001384 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0000 	.word	0x05fa0000

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff feb8 	bl	8001384 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d008      	beq.n	8001634 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e052      	b.n	80016da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0216 	bic.w	r2, r2, #22
 8001642:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001652:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <HAL_DMA_Abort+0x62>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0208 	bic.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	e013      	b.n	80016ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fe7d 	bl	8001384 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b05      	cmp	r3, #5
 8001692:	d90c      	bls.n	80016ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e015      	b.n	80016da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e4      	bne.n	8001686 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	223f      	movs	r2, #63	; 0x3f
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d004      	beq.n	8001700 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e00c      	b.n	800171a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2205      	movs	r2, #5
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_FLASH_Program+0xb0>)
 800173c:	7d1b      	ldrb	r3, [r3, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_FLASH_Program+0x1e>
 8001742:	2302      	movs	r3, #2
 8001744:	e043      	b.n	80017ce <HAL_FLASH_Program+0xa6>
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_FLASH_Program+0xb0>)
 8001748:	2201      	movs	r2, #1
 800174a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800174c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001750:	f000 f878 	bl	8001844 <FLASH_WaitForLastOperation>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d133      	bne.n	80017c6 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d823      	bhi.n	80017ac <HAL_FLASH_Program+0x84>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_FLASH_Program+0x44>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001789 	.word	0x08001789
 8001774:	08001795 	.word	0x08001795
 8001778:	080017a1 	.word	0x080017a1
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800177c:	783b      	ldrb	r3, [r7, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f000 f91b 	bl	80019bc <FLASH_Program_Byte>
        break;
 8001786:	e012      	b.n	80017ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001788:	883b      	ldrh	r3, [r7, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f000 f8ef 	bl	8001970 <FLASH_Program_HalfWord>
        break;
 8001792:	e00c      	b.n	80017ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	68b8      	ldr	r0, [r7, #8]
 800179a:	f000 f8c5 	bl	8001928 <FLASH_Program_Word>
        break;
 800179e:	e006      	b.n	80017ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80017a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f000 f88d 	bl	80018c4 <FLASH_Program_DoubleWord>
        break;
 80017aa:	e000      	b.n	80017ae <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80017ac:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017b2:	f000 f847 	bl	8001844 <FLASH_WaitForLastOperation>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_FLASH_Program+0xb4>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_FLASH_Program+0xb4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_FLASH_Program+0xb0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	751a      	strb	r2, [r3, #20]

  return status;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000069c 	.word	0x2000069c
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_FLASH_Unlock+0x38>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da0b      	bge.n	800180a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_FLASH_Unlock+0x38>)
 80017f4:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_FLASH_Unlock+0x3c>)
 80017f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_FLASH_Unlock+0x38>)
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_FLASH_Unlock+0x40>)
 80017fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_FLASH_Unlock+0x38>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da01      	bge.n	800180a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800180a:	79fb      	ldrb	r3, [r7, #7]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40023c00 	.word	0x40023c00
 800181c:	45670123 	.word	0x45670123
 8001820:	cdef89ab 	.word	0xcdef89ab

08001824 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_FLASH_Lock+0x1c>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_FLASH_Lock+0x1c>)
 800182e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001832:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40023c00 	.word	0x40023c00

08001844 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <FLASH_WaitForLastOperation+0x78>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001856:	f7ff fd95 	bl	8001384 <HAL_GetTick>
 800185a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800185c:	e010      	b.n	8001880 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d00c      	beq.n	8001880 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <FLASH_WaitForLastOperation+0x38>
 800186c:	f7ff fd8a 	bl	8001384 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d201      	bcs.n	8001880 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e019      	b.n	80018b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <FLASH_WaitForLastOperation+0x7c>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e8      	bne.n	800185e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <FLASH_WaitForLastOperation+0x7c>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001898:	f000 f8b4 	bl	8001a04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e009      	b.n	80018b4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <FLASH_WaitForLastOperation+0x7c>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <FLASH_WaitForLastOperation+0x7c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
  
}  
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000069c 	.word	0x2000069c
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018c4:	b490      	push	{r4, r7}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4a10      	ldr	r2, [pc, #64]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <FLASH_Program_DoubleWord+0x60>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018fa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80018fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	0013      	movs	r3, r2
 800190c:	2400      	movs	r4, #0
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	3204      	adds	r2, #4
 8001912:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001914:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bc90      	pop	{r4, r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <FLASH_Program_Word+0x44>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <FLASH_Program_Word+0x44>)
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <FLASH_Program_Word+0x44>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <FLASH_Program_Word+0x44>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <FLASH_Program_Word+0x44>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <FLASH_Program_Word+0x44>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40023c00 	.word	0x40023c00

08001970 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 8001982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <FLASH_Program_HalfWord+0x48>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <FLASH_Program_Byte+0x44>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f043 0320 	orr.w	r3, r3, #32
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a1e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a36:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <FLASH_SetErrorCode+0x90>)
 8001a7e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <FLASH_SetErrorCode+0x8c>)
 8001a82:	22f2      	movs	r2, #242	; 0xf2
 8001a84:	60da      	str	r2, [r3, #12]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40023c00 	.word	0x40023c00
 8001a94:	2000069c 	.word	0x2000069c

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e175      	b.n	8001da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8164 	bne.w	8001d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x56>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80be 	beq.w	8001d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a64      	ldr	r2, [pc, #400]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3a:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d037      	beq.n	8001cd6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x338>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x33c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x22a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x340>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x344>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x348>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x34c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e012      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e010      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce8:	4934      	ldr	r1, [pc, #208]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a33      	ldr	r2, [pc, #204]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae86 	bls.w	8001ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	; 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40021400 	.word	0x40021400
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40021c00 	.word	0x40021c00
 8001de0:	40022000 	.word	0x40022000
 8001de4:	40022400 	.word	0x40022400
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e20:	b08f      	sub	sp, #60	; 0x3c
 8001e22:	af0a      	add	r7, sp, #40	; 0x28
 8001e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e116      	b.n	800205e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff f9c4 	bl	80011d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fe4c 	bl	8004b0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	687e      	ldr	r6, [r7, #4]
 8001e7c:	466d      	mov	r5, sp
 8001e7e:	f106 0410 	add.w	r4, r6, #16
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e92:	1d33      	adds	r3, r6, #4
 8001e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e96:	6838      	ldr	r0, [r7, #0]
 8001e98:	f002 fde0 	bl	8004a5c <USB_CoreInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0d7      	b.n	800205e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fe3a 	bl	8004b2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e04a      	b.n	8001f56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	333d      	adds	r3, #61	; 0x3d
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333c      	adds	r3, #60	; 0x3c
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	b298      	uxth	r0, r3
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3342      	adds	r3, #66	; 0x42
 8001efc:	4602      	mov	r2, r0
 8001efe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333f      	adds	r3, #63	; 0x3f
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3344      	adds	r3, #68	; 0x44
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3348      	adds	r3, #72	; 0x48
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3350      	adds	r3, #80	; 0x50
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	3301      	adds	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3af      	bcc.n	8001ec0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e044      	b.n	8001ff0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	3301      	adds	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d3b5      	bcc.n	8001f66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	687e      	ldr	r6, [r7, #4]
 8002002:	466d      	mov	r5, sp
 8002004:	f106 0410 	add.w	r4, r6, #16
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002014:	e885 0003 	stmia.w	r5, {r0, r1}
 8002018:	1d33      	adds	r3, r6, #4
 800201a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f002 fdd3 	bl	8004bc8 <USB_DevInit>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e014      	b.n	800205e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f80b 	bl	8002068 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 ff8d 	bl	8004f76 <USB_DevDisconnect>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002068 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_PCDEx_ActivateLPM+0x44>)
 8002098:	4313      	orrs	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	10000003 	.word	0x10000003

080020b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40007000 	.word	0x40007000

080020d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_PWREx_EnableOverDrive+0x98>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fe:	f7ff f941 	bl	8001384 <HAL_GetTick>
 8002102:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002104:	e009      	b.n	800211a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002106:	f7ff f93d 	bl	8001384 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002114:	d901      	bls.n	800211a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e022      	b.n	8002160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d1ee      	bne.n	8002106 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002132:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff f926 	bl	8001384 <HAL_GetTick>
 8002138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800213a:	e009      	b.n	8002150 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800213c:	f7ff f922 	bl	8001384 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214a:	d901      	bls.n	8002150 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e007      	b.n	8002160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800215c:	d1ee      	bne.n	800213c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e29b      	b.n	80026be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8087 	beq.w	80022a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	4b96      	ldr	r3, [pc, #600]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00c      	beq.n	80021ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a0:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d112      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62>
 80021ac:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b8:	d10b      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ba:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d06c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x130>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d168      	bne.n	80022a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e275      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x7a>
 80021dc:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a83      	ldr	r2, [pc, #524]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e02e      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x9c>
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7b      	ldr	r2, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0xc0>
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff f898 	bl	8001384 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff f894 	bl	8001384 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e229      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f884 	bl	8001384 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f880 	bl	8001384 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e215      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x110>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d069      	beq.n	8002382 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d11c      	bne.n	8002300 <HAL_RCC_OscConfig+0x190>
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x17a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1e9      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	493d      	ldr	r1, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	e040      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff f836 	bl	8001384 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff f832 	bl	8001384 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1c7      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4929      	ldr	r1, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
 800234e:	e018      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f812 	bl	8001384 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff f80e 	bl	8001384 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1a3      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d038      	beq.n	8002400 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe ffef 	bl	8001384 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe ffeb 	bl	8001384 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e180      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x23a>
 80023c8:	e01a      	b.n	8002400 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe ffd5 	bl	8001384 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe ffd1 	bl	8001384 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d903      	bls.n	80023f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e166      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
 80023f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ee      	bne.n	80023de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a4 	beq.w	8002556 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a88      	ldr	r2, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002436:	4b83      	ldr	r3, [pc, #524]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002442:	4b80      	ldr	r3, [pc, #512]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7f      	ldr	r2, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe ff99 	bl	8001384 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe ff95 	bl	8001384 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e12a      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x31a>
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x33c>
 8002492:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x35e>
 80024b4:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a5e      	ldr	r2, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe ff49 	bl	8001384 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe ff45 	bl	8001384 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0d8      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x386>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe ff33 	bl	8001384 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe ff2f 	bl	8001384 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0c2      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80ae 	beq.w	80026bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d06d      	beq.n	8002648 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d14b      	bne.n	800260c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe ff00 	bl	8001384 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fefc 	bl	8001384 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e091      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	071b      	lsls	r3, r3, #28
 80025d2:	491b      	ldr	r1, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fece 	bl	8001384 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe feca 	bl	8001384 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e05f      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x47c>
 800260a:	e057      	b.n	80026bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe feb4 	bl	8001384 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe feb0 	bl	8001384 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e045      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x4b0>
 800263e:	e03d      	b.n	80026bc <HAL_RCC_OscConfig+0x54c>
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x558>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d030      	beq.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d129      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d122      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800267e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d119      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d10f      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d0      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 020f 	bic.w	r2, r3, #15
 80026fa:	4965      	ldr	r1, [pc, #404]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d040      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e073      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06b      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4936      	ldr	r1, [pc, #216]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fde0 	bl	8001384 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe fddc 	bl	8001384 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e053      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 020f 	bic.w	r2, r3, #15
 8002806:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1cc>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	fa21 f303 	lsr.w	r3, r1, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1d0>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fd3c 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08005314 	.word	0x08005314
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	2300      	movs	r3, #0
 80028b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d007      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x32>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d008      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x38>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80b4 	bne.w	8002a38 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b5e      	ldr	r3, [pc, #376]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028d2:	60bb      	str	r3, [r7, #8]
      break;
 80028d4:	e0b3      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d6:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028d8:	60bb      	str	r3, [r7, #8]
      break;
 80028da:	e0b0      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028dc:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04a      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	ea03 0501 	and.w	r5, r3, r1
 8002908:	ea04 0602 	and.w	r6, r4, r2
 800290c:	4629      	mov	r1, r5
 800290e:	4632      	mov	r2, r6
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0154      	lsls	r4, r2, #5
 800291a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800291e:	014b      	lsls	r3, r1, #5
 8002920:	4619      	mov	r1, r3
 8002922:	4622      	mov	r2, r4
 8002924:	1b49      	subs	r1, r1, r5
 8002926:	eb62 0206 	sbc.w	r2, r2, r6
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	0194      	lsls	r4, r2, #6
 8002934:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002938:	018b      	lsls	r3, r1, #6
 800293a:	1a5b      	subs	r3, r3, r1
 800293c:	eb64 0402 	sbc.w	r4, r4, r2
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	00e2      	lsls	r2, r4, #3
 800294a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800294e:	00d9      	lsls	r1, r3, #3
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	195b      	adds	r3, r3, r5
 8002956:	eb44 0406 	adc.w	r4, r4, r6
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	0262      	lsls	r2, r4, #9
 8002964:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002968:	0259      	lsls	r1, r3, #9
 800296a:	460b      	mov	r3, r1
 800296c:	4614      	mov	r4, r2
 800296e:	4618      	mov	r0, r3
 8002970:	4621      	mov	r1, r4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	461a      	mov	r2, r3
 800297a:	4623      	mov	r3, r4
 800297c:	f7fd fc6e 	bl	800025c <__aeabi_uldivmod>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e049      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	f04f 0400 	mov.w	r4, #0
 8002992:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	ea03 0501 	and.w	r5, r3, r1
 800299e:	ea04 0602 	and.w	r6, r4, r2
 80029a2:	4629      	mov	r1, r5
 80029a4:	4632      	mov	r2, r6
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	0154      	lsls	r4, r2, #5
 80029b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029b4:	014b      	lsls	r3, r1, #5
 80029b6:	4619      	mov	r1, r3
 80029b8:	4622      	mov	r2, r4
 80029ba:	1b49      	subs	r1, r1, r5
 80029bc:	eb62 0206 	sbc.w	r2, r2, r6
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	0194      	lsls	r4, r2, #6
 80029ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ce:	018b      	lsls	r3, r1, #6
 80029d0:	1a5b      	subs	r3, r3, r1
 80029d2:	eb64 0402 	sbc.w	r4, r4, r2
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	00e2      	lsls	r2, r4, #3
 80029e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029e4:	00d9      	lsls	r1, r3, #3
 80029e6:	460b      	mov	r3, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	195b      	adds	r3, r3, r5
 80029ec:	eb44 0406 	adc.w	r4, r4, r6
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	02a2      	lsls	r2, r4, #10
 80029fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029fe:	0299      	lsls	r1, r3, #10
 8002a00:	460b      	mov	r3, r1
 8002a02:	4614      	mov	r4, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	4621      	mov	r1, r4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	f7fd fc23 	bl	800025c <__aeabi_uldivmod>
 8002a16:	4603      	mov	r3, r0
 8002a18:	460c      	mov	r4, r1
 8002a1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	60bb      	str	r3, [r7, #8]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a3a:	60bb      	str	r3, [r7, #8]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4601      	mov	r1, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08005324 	.word	0x08005324

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a98:	f7ff ffdc 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0b5b      	lsrs	r3, r3, #13
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08005324 	.word	0x08005324

08002abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	4964      	ldr	r1, [pc, #400]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	4959      	ldr	r1, [pc, #356]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d017      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b52:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	494a      	ldr	r1, [pc, #296]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808b 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fbde 	bl	8001384 <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe fbda 	bl	8001384 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e38f      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d035      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d02e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d114      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fba2 	bl	8001384 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe fb9e 	bl	8001384 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e351      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c72:	d111      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	4901      	ldr	r1, [pc, #4]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
 8002c94:	0ffffcff 	.word	0x0ffffcff
 8002c98:	4bb3      	ldr	r3, [pc, #716]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4ab2      	ldr	r2, [pc, #712]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	4bb0      	ldr	r3, [pc, #704]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	49ad      	ldr	r1, [pc, #692]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc2:	4ba9      	ldr	r3, [pc, #676]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	4aa7      	ldr	r2, [pc, #668]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd2:	4ba5      	ldr	r3, [pc, #660]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	49a2      	ldr	r1, [pc, #648]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b9d      	ldr	r3, [pc, #628]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfe:	499a      	ldr	r1, [pc, #616]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d12:	4b95      	ldr	r3, [pc, #596]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	4991      	ldr	r1, [pc, #580]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d34:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d42:	4989      	ldr	r1, [pc, #548]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d56:	4b84      	ldr	r3, [pc, #528]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4980      	ldr	r1, [pc, #512]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d78:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4978      	ldr	r1, [pc, #480]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	f023 020c 	bic.w	r2, r3, #12
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	496f      	ldr	r1, [pc, #444]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4967      	ldr	r1, [pc, #412]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	495e      	ldr	r1, [pc, #376]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	4956      	ldr	r1, [pc, #344]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e22:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e44:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	4945      	ldr	r1, [pc, #276]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e66:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	493c      	ldr	r1, [pc, #240]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	4934      	ldr	r1, [pc, #208]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	492b      	ldr	r1, [pc, #172]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	4912      	ldr	r1, [pc, #72]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	e002      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	4986      	ldr	r1, [pc, #536]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f80:	4b81      	ldr	r3, [pc, #516]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	497d      	ldr	r1, [pc, #500]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d006      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80d6 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fac:	4b76      	ldr	r3, [pc, #472]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a75      	ldr	r2, [pc, #468]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb8:	f7fe f9e4 	bl	8001384 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc0:	f7fe f9e0 	bl	8001384 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e195      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d021      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4958      	ldr	r1, [pc, #352]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003058:	d129      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305a:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	493e      	ldr	r1, [pc, #248]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f023 021f 	bic.w	r2, r3, #31
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4938      	ldr	r1, [pc, #224]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4926      	ldr	r1, [pc, #152]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d011      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491a      	ldr	r1, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fe f927 	bl	8001384 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313a:	f7fe f923 	bl	8001384 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0d8      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80ce 	bne.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe f90a 	bl	8001384 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003174:	f7fe f906 	bl	8001384 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d904      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0bb      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800318c:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d0ec      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c2:	4b51      	ldr	r3, [pc, #324]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	0f1b      	lsrs	r3, r3, #28
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	019a      	lsls	r2, r3, #6
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d022      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322c:	d11d      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322e:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0f1b      	lsrs	r3, r3, #28
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	019a      	lsls	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4929      	ldr	r1, [pc, #164]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4917      	ldr	r1, [pc, #92]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4911      	ldr	r1, [pc, #68]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fe f856 	bl	8001384 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032dc:	f7fe f852 	bl	8001384 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e007      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fa:	d1ef      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e040      	b.n	80033a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fe6c 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fbf2 	bl	8003b34 <UART_SetConfig>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fe46 	bl	8003ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fecd 	bl	8004138 <UART_CheckIdleState>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b08b      	sub	sp, #44	; 0x2c
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d156      	bne.n	800346c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_UART_Transmit_IT+0x22>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e04f      	b.n	800346e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_UART_Transmit_IT+0x34>
 80033d8:	2302      	movs	r3, #2
 80033da:	e048      	b.n	800346e <HAL_UART_Transmit_IT+0xc6>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2221      	movs	r2, #33	; 0x21
 800340c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d107      	bne.n	8003428 <HAL_UART_Transmit_IT+0x80>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_UART_Transmit_IT+0xd4>)
 8003424:	669a      	str	r2, [r3, #104]	; 0x68
 8003426:	e002      	b.n	800342e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <HAL_UART_Transmit_IT+0xd8>)
 800342c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	613b      	str	r3, [r7, #16]
   return(result);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	6a3a      	ldr	r2, [r7, #32]
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	61bb      	str	r3, [r7, #24]
   return(result);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	372c      	adds	r7, #44	; 0x2c
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	08004691 	.word	0x08004691
 8003480:	080045db 	.word	0x080045db

08003484 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003496:	2b20      	cmp	r3, #32
 8003498:	d13d      	bne.n	8003516 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_UART_Receive_IT+0x22>
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e036      	b.n	8003518 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Receive_IT+0x34>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e02f      	b.n	8003518 <HAL_UART_Receive_IT+0x94>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d018      	beq.n	8003506 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	613b      	str	r3, [r7, #16]
   return(result);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69f9      	ldr	r1, [r7, #28]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	461a      	mov	r2, r3
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 ff21 	bl	8004354 <UART_Start_Receive_IT>
 8003512:	4603      	mov	r3, r0
 8003514:	e000      	b.n	8003518 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0ba      	sub	sp, #232	; 0xe8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800354a:	f640 030f 	movw	r3, #2063	; 0x80f
 800354e:	4013      	ands	r3, r2
 8003550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00f      	beq.n	8003588 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 82a5 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x5a8>
      {
        huart->RxISR(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
      }
      return;
 8003586:	e29f      	b.n	8003ac8 <HAL_UART_IRQHandler+0x5a8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8117 	beq.w	80037c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800359e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035a2:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_UART_IRQHandler+0x298>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 810a 	beq.w	80037c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d011      	beq.n	80035dc <HAL_UART_IRQHandler+0xbc>
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d011      	beq.n	800360c <HAL_UART_IRQHandler+0xec>
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2202      	movs	r2, #2
 80035fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <HAL_UART_IRQHandler+0x11c>
 8003618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2204      	movs	r2, #4
 800362a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800363c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d017      	beq.n	8003678 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366e:	f043 0208 	orr.w	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <HAL_UART_IRQHandler+0x18a>
 8003684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 820b 	beq.w	8003acc <HAL_UART_IRQHandler+0x5ac>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04f      	beq.n	80037a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fef0 	bl	80044e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d141      	bne.n	800379a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3308      	adds	r3, #8
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800372c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800374e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1d9      	bne.n	8003716 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	2b00      	cmp	r3, #0
 8003768:	d013      	beq.n	8003792 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <HAL_UART_IRQHandler+0x29c>)
 8003770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd ffb3 	bl	80016e2 <HAL_DMA_Abort_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d017      	beq.n	80037b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e00f      	b.n	80037b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9ae 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00b      	b.n	80037b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9aa 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e007      	b.n	80037b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9a6 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037b0:	e18c      	b.n	8003acc <HAL_UART_IRQHandler+0x5ac>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b2:	bf00      	nop
    return;
 80037b4:	e18a      	b.n	8003acc <HAL_UART_IRQHandler+0x5ac>
 80037b6:	bf00      	nop
 80037b8:	04000120 	.word	0x04000120
 80037bc:	080045af 	.word	0x080045af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 8144 	bne.w	8003a52 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 813d 	beq.w	8003a52 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8136 	beq.w	8003a52 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2210      	movs	r2, #16
 80037ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	f040 80b2 	bne.w	8003962 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 815e 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800381a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800381e:	429a      	cmp	r2, r3
 8003820:	f080 8156 	bcs.w	8003ad0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003838:	f000 8085 	beq.w	8003946 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800386a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1da      	bne.n	800383c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e1      	bne.n	8003886 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003916:	f023 0310 	bic.w	r3, r3, #16
 800391a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003928:	65bb      	str	r3, [r7, #88]	; 0x58
 800392a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800392e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e4      	bne.n	8003906 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fe5e 	bl	8001602 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003952:	b29b      	uxth	r3, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	b29b      	uxth	r3, r3
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8d4 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003960:	e0b6      	b.n	8003ad0 <HAL_UART_IRQHandler+0x5b0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800396e:	b29b      	uxth	r3, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a8 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x5b4>
          && (nb_rx_data > 0U))
 8003984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80a3 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x5b4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
 80039b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e4      	bne.n	800398e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	623b      	str	r3, [r7, #32]
   return(result);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039e8:	633a      	str	r2, [r7, #48]	; 0x30
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e3      	bne.n	80039c4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	69b9      	ldr	r1, [r7, #24]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e4      	bne.n	8003a0e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f85c 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a50:	e040      	b.n	8003ad4 <HAL_UART_IRQHandler+0x5b4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <HAL_UART_IRQHandler+0x55c>
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f853 	bl	8003b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a7a:	e02e      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00e      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01d      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x5b8>
    {
      huart->TxISR(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
    }
    return;
 8003aa4:	e018      	b.n	8003ad8 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_UART_IRQHandler+0x5ba>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_UART_IRQHandler+0x5ba>
  {
    UART_EndTransmit_IT(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fe46 	bl	8004750 <UART_EndTransmit_IT>
    return;
 8003ac4:	bf00      	nop
 8003ac6:	e008      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
      return;
 8003ac8:	bf00      	nop
 8003aca:	e006      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
    return;
 8003acc:	bf00      	nop
 8003ace:	e004      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
      return;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
      return;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <HAL_UART_IRQHandler+0x5ba>
    return;
 8003ad8:	bf00      	nop
  }

}
 8003ada:	37e8      	adds	r7, #232	; 0xe8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4bb1      	ldr	r3, [pc, #708]	; (8003e24 <UART_SetConfig+0x2f0>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a9f      	ldr	r2, [pc, #636]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d121      	bne.n	8003bf4 <UART_SetConfig+0xc0>
 8003bb0:	4b9e      	ldr	r3, [pc, #632]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d816      	bhi.n	8003bec <UART_SetConfig+0xb8>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x90>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be1 	.word	0x08003be1
 8003bcc:	08003bdb 	.word	0x08003bdb
 8003bd0:	08003be7 	.word	0x08003be7
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e151      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e14e      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e14b      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e148      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	bf00      	nop
 8003bf2:	e144      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a8d      	ldr	r2, [pc, #564]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d134      	bne.n	8003c68 <UART_SetConfig+0x134>
 8003bfe:	4b8b      	ldr	r3, [pc, #556]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d829      	bhi.n	8003c60 <UART_SetConfig+0x12c>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0xe0>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c61 	.word	0x08003c61
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c55 	.word	0x08003c55
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c4f 	.word	0x08003c4f
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003c5b 	.word	0x08003c5b
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e117      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e114      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c54:	2304      	movs	r3, #4
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e111      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e10e      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c60:	2310      	movs	r3, #16
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	bf00      	nop
 8003c66:	e10a      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a71      	ldr	r2, [pc, #452]	; (8003e34 <UART_SetConfig+0x300>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d120      	bne.n	8003cb4 <UART_SetConfig+0x180>
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d00f      	beq.n	8003ca0 <UART_SetConfig+0x16c>
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d802      	bhi.n	8003c8a <UART_SetConfig+0x156>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <UART_SetConfig+0x160>
 8003c88:	e010      	b.n	8003cac <UART_SetConfig+0x178>
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d005      	beq.n	8003c9a <UART_SetConfig+0x166>
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	d009      	beq.n	8003ca6 <UART_SetConfig+0x172>
 8003c92:	e00b      	b.n	8003cac <UART_SetConfig+0x178>
 8003c94:	2300      	movs	r3, #0
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0f1      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e0ee      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e0eb      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e0e8      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003cac:	2310      	movs	r3, #16
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	bf00      	nop
 8003cb2:	e0e4      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5f      	ldr	r2, [pc, #380]	; (8003e38 <UART_SetConfig+0x304>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d120      	bne.n	8003d00 <UART_SetConfig+0x1cc>
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d00f      	beq.n	8003cec <UART_SetConfig+0x1b8>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d802      	bhi.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <UART_SetConfig+0x1ac>
 8003cd4:	e010      	b.n	8003cf8 <UART_SetConfig+0x1c4>
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d005      	beq.n	8003ce6 <UART_SetConfig+0x1b2>
 8003cda:	2bc0      	cmp	r3, #192	; 0xc0
 8003cdc:	d009      	beq.n	8003cf2 <UART_SetConfig+0x1be>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x1c4>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e0cb      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e0c8      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e0c5      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e0c2      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	bf00      	nop
 8003cfe:	e0be      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <UART_SetConfig+0x308>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d124      	bne.n	8003d54 <UART_SetConfig+0x220>
 8003d0a:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d012      	beq.n	8003d40 <UART_SetConfig+0x20c>
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d802      	bhi.n	8003d26 <UART_SetConfig+0x1f2>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <UART_SetConfig+0x200>
 8003d24:	e012      	b.n	8003d4c <UART_SetConfig+0x218>
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d006      	beq.n	8003d3a <UART_SetConfig+0x206>
 8003d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d30:	d009      	beq.n	8003d46 <UART_SetConfig+0x212>
 8003d32:	e00b      	b.n	8003d4c <UART_SetConfig+0x218>
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e0a1      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e09e      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d40:	2304      	movs	r3, #4
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e09b      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d46:	2308      	movs	r3, #8
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e098      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	bf00      	nop
 8003d52:	e094      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <UART_SetConfig+0x30c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d124      	bne.n	8003da8 <UART_SetConfig+0x274>
 8003d5e:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d012      	beq.n	8003d94 <UART_SetConfig+0x260>
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d802      	bhi.n	8003d7a <UART_SetConfig+0x246>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <UART_SetConfig+0x254>
 8003d78:	e012      	b.n	8003da0 <UART_SetConfig+0x26c>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d006      	beq.n	8003d8e <UART_SetConfig+0x25a>
 8003d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d84:	d009      	beq.n	8003d9a <UART_SetConfig+0x266>
 8003d86:	e00b      	b.n	8003da0 <UART_SetConfig+0x26c>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e077      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e074      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d94:	2304      	movs	r3, #4
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e071      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e06e      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003da0:	2310      	movs	r3, #16
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	bf00      	nop
 8003da6:	e06a      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <UART_SetConfig+0x310>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d124      	bne.n	8003dfc <UART_SetConfig+0x2c8>
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d012      	beq.n	8003de8 <UART_SetConfig+0x2b4>
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d802      	bhi.n	8003dce <UART_SetConfig+0x29a>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <UART_SetConfig+0x2a8>
 8003dcc:	e012      	b.n	8003df4 <UART_SetConfig+0x2c0>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	d006      	beq.n	8003de2 <UART_SetConfig+0x2ae>
 8003dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd8:	d009      	beq.n	8003dee <UART_SetConfig+0x2ba>
 8003dda:	e00b      	b.n	8003df4 <UART_SetConfig+0x2c0>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e04d      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e04a      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e047      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e044      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	bf00      	nop
 8003dfa:	e040      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a11      	ldr	r2, [pc, #68]	; (8003e48 <UART_SetConfig+0x314>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d139      	bne.n	8003e7a <UART_SetConfig+0x346>
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e14:	d027      	beq.n	8003e66 <UART_SetConfig+0x332>
 8003e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1a:	d817      	bhi.n	8003e4c <UART_SetConfig+0x318>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01c      	beq.n	8003e5a <UART_SetConfig+0x326>
 8003e20:	e027      	b.n	8003e72 <UART_SetConfig+0x33e>
 8003e22:	bf00      	nop
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40004400 	.word	0x40004400
 8003e34:	40004800 	.word	0x40004800
 8003e38:	40004c00 	.word	0x40004c00
 8003e3c:	40005000 	.word	0x40005000
 8003e40:	40011400 	.word	0x40011400
 8003e44:	40007800 	.word	0x40007800
 8003e48:	40007c00 	.word	0x40007c00
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d006      	beq.n	8003e60 <UART_SetConfig+0x32c>
 8003e52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e56:	d009      	beq.n	8003e6c <UART_SetConfig+0x338>
 8003e58:	e00b      	b.n	8003e72 <UART_SetConfig+0x33e>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e00e      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003e60:	2302      	movs	r3, #2
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e00b      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003e66:	2304      	movs	r3, #4
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e008      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e005      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003e72:	2310      	movs	r3, #16
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	bf00      	nop
 8003e78:	e001      	b.n	8003e7e <UART_SetConfig+0x34a>
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d15a      	bne.n	8003f3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d827      	bhi.n	8003ede <UART_SetConfig+0x3aa>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x360>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003edf 	.word	0x08003edf
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003edf 	.word	0x08003edf
 8003eb4:	08003ed7 	.word	0x08003ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fdd8 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003ebc:	61b8      	str	r0, [r7, #24]
        break;
 8003ebe:	e013      	b.n	8003ee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7fe fde8 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003ec4:	61b8      	str	r0, [r7, #24]
        break;
 8003ec6:	e00f      	b.n	8003ee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec8:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <UART_SetConfig+0x4bc>)
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e00c      	b.n	8003ee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ece:	f7fe fce9 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8003ed2:	61b8      	str	r0, [r7, #24]
        break;
 8003ed4:	e008      	b.n	8003ee8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eda:	61bb      	str	r3, [r7, #24]
        break;
 8003edc:	e004      	b.n	8003ee8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ee6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d074      	beq.n	8003fd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	005a      	lsls	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d916      	bls.n	8003f38 <UART_SetConfig+0x404>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d212      	bcs.n	8003f38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f023 030f 	bic.w	r3, r3, #15
 8003f1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	89fa      	ldrh	r2, [r7, #14]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e04f      	b.n	8003fd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77bb      	strb	r3, [r7, #30]
 8003f3c:	e04c      	b.n	8003fd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d828      	bhi.n	8003f96 <UART_SetConfig+0x462>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x418>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe fd7c 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003f74:	61b8      	str	r0, [r7, #24]
        break;
 8003f76:	e013      	b.n	8003fa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7fe fd8c 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	61b8      	str	r0, [r7, #24]
        break;
 8003f7e:	e00f      	b.n	8003fa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <UART_SetConfig+0x4bc>)
 8003f82:	61bb      	str	r3, [r7, #24]
        break;
 8003f84:	e00c      	b.n	8003fa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f86:	f7fe fc8d 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8003f8a:	61b8      	str	r0, [r7, #24]
        break;
 8003f8c:	e008      	b.n	8003fa0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61bb      	str	r3, [r7, #24]
        break;
 8003f94:	e004      	b.n	8003fa0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d018      	beq.n	8003fd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085a      	lsrs	r2, r3, #1
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	441a      	add	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d909      	bls.n	8003fd4 <UART_SetConfig+0x4a0>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d205      	bcs.n	8003fd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	e001      	b.n	8003fd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fe4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	00f42400 	.word	0x00f42400

08003ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01a      	beq.n	800410a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f2:	d10a      	bne.n	800410a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004148:	f7fd f91c 	bl	8001384 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10e      	bne.n	800417a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f82d 	bl	80041ca <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e023      	b.n	80041c2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d10e      	bne.n	80041a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f817 	bl	80041ca <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e00d      	b.n	80041c2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b09c      	sub	sp, #112	; 0x70
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041da:	e0a5      	b.n	8004328 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	f000 80a1 	beq.w	8004328 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fd f8cd 	bl	8001384 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <UART_WaitOnFlagUntilTimeout+0x32>
 80041f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d13e      	bne.n	800427a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800420a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004210:	667b      	str	r3, [r7, #100]	; 0x64
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800421c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e6      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	663b      	str	r3, [r7, #96]	; 0x60
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800424e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800425c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e067      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d04f      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004296:	d147      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
 80042c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	613b      	str	r3, [r7, #16]
   return(result);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042f4:	623a      	str	r2, [r7, #32]
 80042f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	69f9      	ldr	r1, [r7, #28]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	61bb      	str	r3, [r7, #24]
   return(result);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e010      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	429a      	cmp	r2, r3
 8004344:	f43f af4a 	beq.w	80041dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3770      	adds	r7, #112	; 0x70
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004354:	b480      	push	{r7}
 8004356:	b097      	sub	sp, #92	; 0x5c
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d10e      	bne.n	80043a6 <UART_Start_Receive_IT+0x52>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <UART_Start_Receive_IT+0x48>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004396:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800439a:	e02d      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043a4:	e028      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <UART_Start_Receive_IT+0x76>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <UART_Start_Receive_IT+0x6c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	22ff      	movs	r2, #255	; 0xff
 80043ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043be:	e01b      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	227f      	movs	r2, #127	; 0x7f
 80043c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c8:	e016      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10d      	bne.n	80043f0 <UART_Start_Receive_IT+0x9c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <UART_Start_Receive_IT+0x92>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	227f      	movs	r2, #127	; 0x7f
 80043e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e4:	e008      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	223f      	movs	r2, #63	; 0x3f
 80043ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ee:	e003      	b.n	80043f8 <UART_Start_Receive_IT+0xa4>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2222      	movs	r2, #34	; 0x22
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	657b      	str	r3, [r7, #84]	; 0x54
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004426:	64ba      	str	r2, [r7, #72]	; 0x48
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800442c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	d107      	bne.n	8004454 <UART_Start_Receive_IT+0x100>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <UART_Start_Receive_IT+0x18c>)
 8004450:	665a      	str	r2, [r3, #100]	; 0x64
 8004452:	e002      	b.n	800445a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <UART_Start_Receive_IT+0x190>)
 8004458:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d019      	beq.n	800449e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
 800448a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_Start_Receive_IT+0x116>
 800449c:	e018      	b.n	80044d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	613b      	str	r3, [r7, #16]
   return(result);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	653b      	str	r3, [r7, #80]	; 0x50
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	375c      	adds	r7, #92	; 0x5c
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	08004901 	.word	0x08004901
 80044e4:	080047a5 	.word	0x080047a5

080044e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b095      	sub	sp, #84	; 0x54
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
 8004510:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e6      	bne.n	80044f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3308      	adds	r3, #8
 8004528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	61fb      	str	r3, [r7, #28]
   return(result);
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	2b01      	cmp	r3, #1
 800455c:	d118      	bne.n	8004590 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60bb      	str	r3, [r7, #8]
   return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	647b      	str	r3, [r7, #68]	; 0x44
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045a2:	bf00      	nop
 80045a4:	3754      	adds	r7, #84	; 0x54
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fa91 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045da:	b480      	push	{r7}
 80045dc:	b08f      	sub	sp, #60	; 0x3c
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d14c      	bne.n	8004684 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d132      	bne.n	800465c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	61fb      	str	r3, [r7, #28]
   return(result);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004616:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60bb      	str	r3, [r7, #8]
   return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	613b      	str	r3, [r7, #16]
   return(result);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e6      	bne.n	8004628 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800465a:	e013      	b.n	8004684 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004684:	bf00      	nop
 8004686:	373c      	adds	r7, #60	; 0x3c
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b091      	sub	sp, #68	; 0x44
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469c:	2b21      	cmp	r3, #33	; 0x21
 800469e:	d151      	bne.n	8004744 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d132      	bne.n	8004712 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
 80046cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004710:	e018      	b.n	8004744 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004744:	bf00      	nop
 8004746:	3744      	adds	r7, #68	; 0x44
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	60bb      	str	r3, [r7, #8]
   return(result);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	613b      	str	r3, [r7, #16]
   return(result);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e6      	bne.n	8004758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff f9a2 	bl	8003ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479c:	bf00      	nop
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b096      	sub	sp, #88	; 0x58
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	f040 8094 	bne.w	80048e8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80047ce:	b2d9      	uxtb	r1, r3
 80047d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	400a      	ands	r2, r1
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d177      	bne.n	80048f8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481c:	653b      	str	r3, [r7, #80]	; 0x50
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004826:	647b      	str	r3, [r7, #68]	; 0x44
 8004828:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800482c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e6      	bne.n	8004808 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	623b      	str	r3, [r7, #32]
   return(result);
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485a:	633a      	str	r2, [r7, #48]	; 0x30
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487e:	2b01      	cmp	r3, #1
 8004880:	d12e      	bne.n	80048e0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	60fb      	str	r3, [r7, #12]
   return(result);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f023 0310 	bic.w	r3, r3, #16
 800489c:	64bb      	str	r3, [r7, #72]	; 0x48
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	69b9      	ldr	r1, [r7, #24]
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	617b      	str	r3, [r7, #20]
   return(result);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e6      	bne.n	8004888 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d103      	bne.n	80048d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff f915 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048de:	e00b      	b.n	80048f8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc fbdf 	bl	80010a4 <HAL_UART_RxCpltCallback>
}
 80048e6:	e007      	b.n	80048f8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	619a      	str	r2, [r3, #24]
}
 80048f8:	bf00      	nop
 80048fa:	3758      	adds	r7, #88	; 0x58
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b096      	sub	sp, #88	; 0x58
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800490e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004916:	2b22      	cmp	r3, #34	; 0x22
 8004918:	f040 8094 	bne.w	8004a44 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800492c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004930:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004934:	4013      	ands	r3, r2
 8004936:	b29a      	uxth	r2, r3
 8004938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d177      	bne.n	8004a54 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	643b      	str	r3, [r7, #64]	; 0x40
 8004984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d12e      	bne.n	8004a3c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0310 	bic.w	r3, r3, #16
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e6      	bne.n	80049e4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d103      	bne.n	8004a2c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff f867 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a3a:	e00b      	b.n	8004a54 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fb31 	bl	80010a4 <HAL_UART_RxCpltCallback>
}
 8004a42:	e007      	b.n	8004a54 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]
}
 8004a54:	bf00      	nop
 8004a56:	3758      	adds	r7, #88	; 0x58
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 001c 	add.w	r0, r7, #28
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d120      	bne.n	8004ab6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <USB_CoreInit+0xac>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa92 	bl	8004fd4 <USB_CoreReset>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e010      	b.n	8004ad8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa86 	bl	8004fd4 <USB_CoreReset>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10b      	bne.n	8004af6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f043 0206 	orr.w	r2, r3, #6
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b02:	b004      	add	sp, #16
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	ffbdffbf 	.word	0xffbdffbf

08004b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 0201 	bic.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d115      	bne.n	8004b7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fc fc1d 	bl	800139c <HAL_Delay>
      ms++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa25 	bl	8004fb8 <USB_GetMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d01e      	beq.n	8004bb2 <USB_SetCurrentMode+0x84>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b31      	cmp	r3, #49	; 0x31
 8004b78:	d9f0      	bls.n	8004b5c <USB_SetCurrentMode+0x2e>
 8004b7a:	e01a      	b.n	8004bb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d115      	bne.n	8004bae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fc fc04 	bl	800139c <HAL_Delay>
      ms++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa0c 	bl	8004fb8 <USB_GetMode>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <USB_SetCurrentMode+0x84>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b31      	cmp	r3, #49	; 0x31
 8004baa:	d9f0      	bls.n	8004b8e <USB_SetCurrentMode+0x60>
 8004bac:	e001      	b.n	8004bb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e005      	b.n	8004bbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b32      	cmp	r3, #50	; 0x32
 8004bb6:	d101      	bne.n	8004bbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bc8:	b084      	sub	sp, #16
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e009      	b.n	8004bfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3340      	adds	r3, #64	; 0x40
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0e      	cmp	r3, #14
 8004c00:	d9f2      	bls.n	8004be8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11c      	bne.n	8004c42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c16:	f043 0302 	orr.w	r3, r3, #2
 8004c1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e005      	b.n	8004c4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	4619      	mov	r1, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	461a      	mov	r2, r3
 8004c6a:	680b      	ldr	r3, [r1, #0]
 8004c6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10c      	bne.n	8004c8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f961 	bl	8004f44 <USB_SetDevSpeed>
 8004c82:	e008      	b.n	8004c96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f95c 	bl	8004f44 <USB_SetDevSpeed>
 8004c8c:	e003      	b.n	8004c96 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c8e:	2103      	movs	r1, #3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f957 	bl	8004f44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c96:	2110      	movs	r1, #16
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8f3 	bl	8004e84 <USB_FlushTxFifo>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f91d 	bl	8004ee8 <USB_FlushRxFifo>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e043      	b.n	8004d6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf8:	d118      	bne.n	8004d2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e013      	b.n	8004d3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e008      	b.n	8004d3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3301      	adds	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d3b7      	bcc.n	8004ce2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e043      	b.n	8004e00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8e:	d118      	bne.n	8004dc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e013      	b.n	8004dd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	461a      	mov	r2, r3
 8004dba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e008      	b.n	8004dd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	2300      	movs	r3, #0
 8004de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3b7      	bcc.n	8004d78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f043 0210 	orr.w	r2, r3, #16
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <USB_DevInit+0x2b4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f043 0208 	orr.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <USB_DevInit+0x2b8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e78:	b004      	add	sp, #16
 8004e7a:	4770      	bx	lr
 8004e7c:	803c3800 	.word	0x803c3800
 8004e80:	40000004 	.word	0x40000004

08004e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3301      	adds	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <USB_FlushTxFifo+0x60>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e01a      	b.n	8004ed8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	daf3      	bge.n	8004e92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <USB_FlushTxFifo+0x60>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e006      	b.n	8004ed8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d0f1      	beq.n	8004eba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	00030d40 	.word	0x00030d40

08004ee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <USB_FlushRxFifo+0x58>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e017      	b.n	8004f34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	daf3      	bge.n	8004ef4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2210      	movs	r2, #16
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <USB_FlushRxFifo+0x58>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e006      	b.n	8004f34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d0f1      	beq.n	8004f16 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	00030d40 	.word	0x00030d40

08004f44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <USB_CoreReset+0x60>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e01a      	b.n	8005026 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	daf3      	bge.n	8004fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <USB_CoreReset+0x60>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e006      	b.n	8005026 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d0f1      	beq.n	8005008 <USB_CoreReset+0x34>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	00030d40 	.word	0x00030d40

08005038 <atoi>:
 8005038:	220a      	movs	r2, #10
 800503a:	2100      	movs	r1, #0
 800503c:	f000 b8cc 	b.w	80051d8 <strtol>

08005040 <__libc_init_array>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4e0d      	ldr	r6, [pc, #52]	; (8005078 <__libc_init_array+0x38>)
 8005044:	4c0d      	ldr	r4, [pc, #52]	; (800507c <__libc_init_array+0x3c>)
 8005046:	1ba4      	subs	r4, r4, r6
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	2500      	movs	r5, #0
 800504c:	42a5      	cmp	r5, r4
 800504e:	d109      	bne.n	8005064 <__libc_init_array+0x24>
 8005050:	4e0b      	ldr	r6, [pc, #44]	; (8005080 <__libc_init_array+0x40>)
 8005052:	4c0c      	ldr	r4, [pc, #48]	; (8005084 <__libc_init_array+0x44>)
 8005054:	f000 f936 	bl	80052c4 <_init>
 8005058:	1ba4      	subs	r4, r4, r6
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	2500      	movs	r5, #0
 800505e:	42a5      	cmp	r5, r4
 8005060:	d105      	bne.n	800506e <__libc_init_array+0x2e>
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005068:	4798      	blx	r3
 800506a:	3501      	adds	r5, #1
 800506c:	e7ee      	b.n	800504c <__libc_init_array+0xc>
 800506e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005072:	4798      	blx	r3
 8005074:	3501      	adds	r5, #1
 8005076:	e7f2      	b.n	800505e <__libc_init_array+0x1e>
 8005078:	08005464 	.word	0x08005464
 800507c:	08005464 	.word	0x08005464
 8005080:	08005464 	.word	0x08005464
 8005084:	08005468 	.word	0x08005468

08005088 <__itoa>:
 8005088:	1e93      	subs	r3, r2, #2
 800508a:	2b22      	cmp	r3, #34	; 0x22
 800508c:	b510      	push	{r4, lr}
 800508e:	460c      	mov	r4, r1
 8005090:	d904      	bls.n	800509c <__itoa+0x14>
 8005092:	2300      	movs	r3, #0
 8005094:	700b      	strb	r3, [r1, #0]
 8005096:	461c      	mov	r4, r3
 8005098:	4620      	mov	r0, r4
 800509a:	bd10      	pop	{r4, pc}
 800509c:	2a0a      	cmp	r2, #10
 800509e:	d109      	bne.n	80050b4 <__itoa+0x2c>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	da07      	bge.n	80050b4 <__itoa+0x2c>
 80050a4:	232d      	movs	r3, #45	; 0x2d
 80050a6:	700b      	strb	r3, [r1, #0]
 80050a8:	4240      	negs	r0, r0
 80050aa:	2101      	movs	r1, #1
 80050ac:	4421      	add	r1, r4
 80050ae:	f000 f8a9 	bl	8005204 <__utoa>
 80050b2:	e7f1      	b.n	8005098 <__itoa+0x10>
 80050b4:	2100      	movs	r1, #0
 80050b6:	e7f9      	b.n	80050ac <__itoa+0x24>

080050b8 <itoa>:
 80050b8:	f7ff bfe6 	b.w	8005088 <__itoa>

080050bc <memcpy>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	1e43      	subs	r3, r0, #1
 80050c0:	440a      	add	r2, r1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	d100      	bne.n	80050c8 <memcpy+0xc>
 80050c6:	bd10      	pop	{r4, pc}
 80050c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d0:	e7f7      	b.n	80050c2 <memcpy+0x6>

080050d2 <memset>:
 80050d2:	4402      	add	r2, r0
 80050d4:	4603      	mov	r3, r0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d100      	bne.n	80050dc <memset+0xa>
 80050da:	4770      	bx	lr
 80050dc:	f803 1b01 	strb.w	r1, [r3], #1
 80050e0:	e7f9      	b.n	80050d6 <memset+0x4>

080050e2 <_strtol_l.isra.0>:
 80050e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e6:	4680      	mov	r8, r0
 80050e8:	4689      	mov	r9, r1
 80050ea:	4692      	mov	sl, r2
 80050ec:	461e      	mov	r6, r3
 80050ee:	460f      	mov	r7, r1
 80050f0:	463d      	mov	r5, r7
 80050f2:	9808      	ldr	r0, [sp, #32]
 80050f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050f8:	f000 f8c2 	bl	8005280 <__locale_ctype_ptr_l>
 80050fc:	4420      	add	r0, r4
 80050fe:	7843      	ldrb	r3, [r0, #1]
 8005100:	f013 0308 	ands.w	r3, r3, #8
 8005104:	d132      	bne.n	800516c <_strtol_l.isra.0+0x8a>
 8005106:	2c2d      	cmp	r4, #45	; 0x2d
 8005108:	d132      	bne.n	8005170 <_strtol_l.isra.0+0x8e>
 800510a:	787c      	ldrb	r4, [r7, #1]
 800510c:	1cbd      	adds	r5, r7, #2
 800510e:	2201      	movs	r2, #1
 8005110:	2e00      	cmp	r6, #0
 8005112:	d05d      	beq.n	80051d0 <_strtol_l.isra.0+0xee>
 8005114:	2e10      	cmp	r6, #16
 8005116:	d109      	bne.n	800512c <_strtol_l.isra.0+0x4a>
 8005118:	2c30      	cmp	r4, #48	; 0x30
 800511a:	d107      	bne.n	800512c <_strtol_l.isra.0+0x4a>
 800511c:	782b      	ldrb	r3, [r5, #0]
 800511e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005122:	2b58      	cmp	r3, #88	; 0x58
 8005124:	d14f      	bne.n	80051c6 <_strtol_l.isra.0+0xe4>
 8005126:	786c      	ldrb	r4, [r5, #1]
 8005128:	2610      	movs	r6, #16
 800512a:	3502      	adds	r5, #2
 800512c:	2a00      	cmp	r2, #0
 800512e:	bf14      	ite	ne
 8005130:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005134:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005138:	2700      	movs	r7, #0
 800513a:	fbb1 fcf6 	udiv	ip, r1, r6
 800513e:	4638      	mov	r0, r7
 8005140:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005144:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005148:	2b09      	cmp	r3, #9
 800514a:	d817      	bhi.n	800517c <_strtol_l.isra.0+0x9a>
 800514c:	461c      	mov	r4, r3
 800514e:	42a6      	cmp	r6, r4
 8005150:	dd23      	ble.n	800519a <_strtol_l.isra.0+0xb8>
 8005152:	1c7b      	adds	r3, r7, #1
 8005154:	d007      	beq.n	8005166 <_strtol_l.isra.0+0x84>
 8005156:	4584      	cmp	ip, r0
 8005158:	d31c      	bcc.n	8005194 <_strtol_l.isra.0+0xb2>
 800515a:	d101      	bne.n	8005160 <_strtol_l.isra.0+0x7e>
 800515c:	45a6      	cmp	lr, r4
 800515e:	db19      	blt.n	8005194 <_strtol_l.isra.0+0xb2>
 8005160:	fb00 4006 	mla	r0, r0, r6, r4
 8005164:	2701      	movs	r7, #1
 8005166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800516a:	e7eb      	b.n	8005144 <_strtol_l.isra.0+0x62>
 800516c:	462f      	mov	r7, r5
 800516e:	e7bf      	b.n	80050f0 <_strtol_l.isra.0+0xe>
 8005170:	2c2b      	cmp	r4, #43	; 0x2b
 8005172:	bf04      	itt	eq
 8005174:	1cbd      	addeq	r5, r7, #2
 8005176:	787c      	ldrbeq	r4, [r7, #1]
 8005178:	461a      	mov	r2, r3
 800517a:	e7c9      	b.n	8005110 <_strtol_l.isra.0+0x2e>
 800517c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005180:	2b19      	cmp	r3, #25
 8005182:	d801      	bhi.n	8005188 <_strtol_l.isra.0+0xa6>
 8005184:	3c37      	subs	r4, #55	; 0x37
 8005186:	e7e2      	b.n	800514e <_strtol_l.isra.0+0x6c>
 8005188:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800518c:	2b19      	cmp	r3, #25
 800518e:	d804      	bhi.n	800519a <_strtol_l.isra.0+0xb8>
 8005190:	3c57      	subs	r4, #87	; 0x57
 8005192:	e7dc      	b.n	800514e <_strtol_l.isra.0+0x6c>
 8005194:	f04f 37ff 	mov.w	r7, #4294967295
 8005198:	e7e5      	b.n	8005166 <_strtol_l.isra.0+0x84>
 800519a:	1c7b      	adds	r3, r7, #1
 800519c:	d108      	bne.n	80051b0 <_strtol_l.isra.0+0xce>
 800519e:	2322      	movs	r3, #34	; 0x22
 80051a0:	f8c8 3000 	str.w	r3, [r8]
 80051a4:	4608      	mov	r0, r1
 80051a6:	f1ba 0f00 	cmp.w	sl, #0
 80051aa:	d107      	bne.n	80051bc <_strtol_l.isra.0+0xda>
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	b102      	cbz	r2, 80051b4 <_strtol_l.isra.0+0xd2>
 80051b2:	4240      	negs	r0, r0
 80051b4:	f1ba 0f00 	cmp.w	sl, #0
 80051b8:	d0f8      	beq.n	80051ac <_strtol_l.isra.0+0xca>
 80051ba:	b10f      	cbz	r7, 80051c0 <_strtol_l.isra.0+0xde>
 80051bc:	f105 39ff 	add.w	r9, r5, #4294967295
 80051c0:	f8ca 9000 	str.w	r9, [sl]
 80051c4:	e7f2      	b.n	80051ac <_strtol_l.isra.0+0xca>
 80051c6:	2430      	movs	r4, #48	; 0x30
 80051c8:	2e00      	cmp	r6, #0
 80051ca:	d1af      	bne.n	800512c <_strtol_l.isra.0+0x4a>
 80051cc:	2608      	movs	r6, #8
 80051ce:	e7ad      	b.n	800512c <_strtol_l.isra.0+0x4a>
 80051d0:	2c30      	cmp	r4, #48	; 0x30
 80051d2:	d0a3      	beq.n	800511c <_strtol_l.isra.0+0x3a>
 80051d4:	260a      	movs	r6, #10
 80051d6:	e7a9      	b.n	800512c <_strtol_l.isra.0+0x4a>

080051d8 <strtol>:
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <strtol+0x24>)
 80051da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051dc:	681c      	ldr	r4, [r3, #0]
 80051de:	4d08      	ldr	r5, [pc, #32]	; (8005200 <strtol+0x28>)
 80051e0:	6a23      	ldr	r3, [r4, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bf08      	it	eq
 80051e6:	462b      	moveq	r3, r5
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	460a      	mov	r2, r1
 80051ee:	4601      	mov	r1, r0
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7ff ff76 	bl	80050e2 <_strtol_l.isra.0>
 80051f6:	b003      	add	sp, #12
 80051f8:	bd30      	pop	{r4, r5, pc}
 80051fa:	bf00      	nop
 80051fc:	2000000c 	.word	0x2000000c
 8005200:	20000070 	.word	0x20000070

08005204 <__utoa>:
 8005204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <__utoa+0x78>)
 8005208:	b08b      	sub	sp, #44	; 0x2c
 800520a:	4605      	mov	r5, r0
 800520c:	460c      	mov	r4, r1
 800520e:	466e      	mov	r6, sp
 8005210:	f103 0c20 	add.w	ip, r3, #32
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	6859      	ldr	r1, [r3, #4]
 8005218:	4637      	mov	r7, r6
 800521a:	c703      	stmia	r7!, {r0, r1}
 800521c:	3308      	adds	r3, #8
 800521e:	4563      	cmp	r3, ip
 8005220:	463e      	mov	r6, r7
 8005222:	d1f7      	bne.n	8005214 <__utoa+0x10>
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	791b      	ldrb	r3, [r3, #4]
 8005228:	713b      	strb	r3, [r7, #4]
 800522a:	1e93      	subs	r3, r2, #2
 800522c:	2b22      	cmp	r3, #34	; 0x22
 800522e:	6038      	str	r0, [r7, #0]
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	d904      	bls.n	8005240 <__utoa+0x3c>
 8005236:	7023      	strb	r3, [r4, #0]
 8005238:	461c      	mov	r4, r3
 800523a:	4620      	mov	r0, r4
 800523c:	b00b      	add	sp, #44	; 0x2c
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005240:	1e66      	subs	r6, r4, #1
 8005242:	fbb5 f0f2 	udiv	r0, r5, r2
 8005246:	af0a      	add	r7, sp, #40	; 0x28
 8005248:	fb02 5510 	mls	r5, r2, r0, r5
 800524c:	443d      	add	r5, r7
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005254:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005258:	4605      	mov	r5, r0
 800525a:	b968      	cbnz	r0, 8005278 <__utoa+0x74>
 800525c:	5460      	strb	r0, [r4, r1]
 800525e:	4423      	add	r3, r4
 8005260:	4622      	mov	r2, r4
 8005262:	1b19      	subs	r1, r3, r4
 8005264:	1b10      	subs	r0, r2, r4
 8005266:	4281      	cmp	r1, r0
 8005268:	dde7      	ble.n	800523a <__utoa+0x36>
 800526a:	7811      	ldrb	r1, [r2, #0]
 800526c:	7818      	ldrb	r0, [r3, #0]
 800526e:	f802 0b01 	strb.w	r0, [r2], #1
 8005272:	f803 1901 	strb.w	r1, [r3], #-1
 8005276:	e7f4      	b.n	8005262 <__utoa+0x5e>
 8005278:	460b      	mov	r3, r1
 800527a:	e7e2      	b.n	8005242 <__utoa+0x3e>
 800527c:	0800532c 	.word	0x0800532c

08005280 <__locale_ctype_ptr_l>:
 8005280:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005284:	4770      	bx	lr

08005286 <__ascii_mbtowc>:
 8005286:	b082      	sub	sp, #8
 8005288:	b901      	cbnz	r1, 800528c <__ascii_mbtowc+0x6>
 800528a:	a901      	add	r1, sp, #4
 800528c:	b142      	cbz	r2, 80052a0 <__ascii_mbtowc+0x1a>
 800528e:	b14b      	cbz	r3, 80052a4 <__ascii_mbtowc+0x1e>
 8005290:	7813      	ldrb	r3, [r2, #0]
 8005292:	600b      	str	r3, [r1, #0]
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	1c10      	adds	r0, r2, #0
 8005298:	bf18      	it	ne
 800529a:	2001      	movne	r0, #1
 800529c:	b002      	add	sp, #8
 800529e:	4770      	bx	lr
 80052a0:	4610      	mov	r0, r2
 80052a2:	e7fb      	b.n	800529c <__ascii_mbtowc+0x16>
 80052a4:	f06f 0001 	mvn.w	r0, #1
 80052a8:	e7f8      	b.n	800529c <__ascii_mbtowc+0x16>

080052aa <__ascii_wctomb>:
 80052aa:	b149      	cbz	r1, 80052c0 <__ascii_wctomb+0x16>
 80052ac:	2aff      	cmp	r2, #255	; 0xff
 80052ae:	bf85      	ittet	hi
 80052b0:	238a      	movhi	r3, #138	; 0x8a
 80052b2:	6003      	strhi	r3, [r0, #0]
 80052b4:	700a      	strbls	r2, [r1, #0]
 80052b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80052ba:	bf98      	it	ls
 80052bc:	2001      	movls	r0, #1
 80052be:	4770      	bx	lr
 80052c0:	4608      	mov	r0, r1
 80052c2:	4770      	bx	lr

080052c4 <_init>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr

080052d0 <_fini>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr
